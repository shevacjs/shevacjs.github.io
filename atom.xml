<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shevacjs home</title>
  <subtitle>自强不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shevacjs.com/"/>
  <updated>2017-09-21T11:43:46.000Z</updated>
  <id>http://shevacjs.com/</id>
  
  <author>
    <name>shevacjs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx and Http2 应用篇</title>
    <link href="http://shevacjs.com/2017/09/21/nginx_and_http2_apply/"/>
    <id>http://shevacjs.com/2017/09/21/nginx_and_http2_apply/</id>
    <published>2017-09-21T11:39:07.000Z</published>
    <updated>2017-09-21T11:43:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gubeishuizhan.jpg" alt="古北水镇"></p>
<p><a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="external">http2协议</a> 一直被认为是这几年对互联网有着重要影响的新协议，业内对其的支持也是非常迅速和快捷的; 作为一个快速迭代的开源软件nginx，也是保持住对http2的快速支持，从最早的spdy到现在的http2，nginx都是<code>刚为天下先</code>的; 随着相关协议和实现的不断落地，不少大的互联网公司都已经支持http2的访问模式, 比如过google, cloudflare, facebook, 国内的腾讯,天猫也支持了(可以安装<a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en" target="_blank" rel="external">HTTP/2 and SPDY indicator</a>这个chrome插件显示)</p>
<p>这里，要从两个方面的实践去了解https，包括应用篇，具体而已就是通过自己构造client/server, 去了解应用https服务的方方面面；其次是实践篇，重点去分析nginx的代码。 本盘文章主要介绍应用篇的内容</p>
<h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>我们知道http2协议本身并没有要求底层是否要基于TLS(可选)，但是从实践方面来看，几乎所有的浏览器都只支持基于TLS的http2交互，而nginx相对比友好，两个模式都是<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen" target="_blank" rel="external">可以支持</a>的, 所以我们可以分别去验证着两种模式，前者我们可以采用curl命令发送，后者我们直接基于浏览器, server都用nginx服务。 具体而已，拆成如下两个交互场景: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  client                      server(nginx)</div><div class="line"></div><div class="line">+---------+    http2        +------------+</div><div class="line">| curl    +---------------&gt; | without TLS|</div><div class="line">+---------+                 +------------+</div><div class="line"></div><div class="line"></div><div class="line">+---------+    http2        +-------------+</div><div class="line">| Chrome  +----------------&gt;+ With TLS    |</div><div class="line">+---------+                 +-------------+</div></pre></td></tr></table></figure>
<h3 id="用curl发送http2请求"><a href="#用curl发送http2请求" class="headerlink" title="用curl发送http2请求"></a>用curl发送http2请求</h3><p>这个环节server端配置非常方便，不再赘述，具体如下:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## nginx非TLS的http2接入配置demo</span></div><div class="line">   <span class="section">server</span> &#123;</div><div class="line"></div><div class="line">      <span class="attribute">listen</span> <span class="number">8086</span> http2; </div><div class="line">       <span class="attribute">location</span> / &#123;</div><div class="line">           <span class="attribute">content_by_lua</span> <span class="string">'</span></div><div class="line">               ngx.say("I am location in http2")';</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>而curl这边，则就有点小问题，因为大部分的机器默认安装的curl版本都偏低(7.33.0支持带tls的http2/7.49.0支持降级的http2), 可以参照文末的参考文档进行更新, 剩余的问题就是如何发送一个不带TLS的客户端请求, 通过<code>man curl</code> 加上<code>grep http2</code>, 有如下几个说明:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--http2-prior-knowledge</div><div class="line">	  (HTTP)  Tells  curl  to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior</div><div class="line">	  knowledge that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2  the  standard  way</div><div class="line">	  with negotiated protocol version in the TLS handshake.</div><div class="line"></div><div class="line">--http2</div><div class="line">	  (HTTP) Tells curl to use HTTP version 2.</div><div class="line"></div><div class="line">	  See also --no-alpn. --http2 requires that the underlying libcurl was built to support HTTP/2. This option  over-</div><div class="line">	  rides --http1.1 and -0, --http1.0 and --http2-prior-knowledge. Added in 7.33.0.</div></pre></td></tr></table></figure>
<p> 上面的文档可以概述如下:</p>
<ul>
<li>curl可以通过<code>--http2</code>或者<code>--http2-prior-knowledge</code>来发送基于TLS的http2或者明文http2</li>
<li><code>--http2-prior-knowledge</code>说明，curl和nginx交互可以不走<code>HTTP/1.1</code>的<code>Upgrade</code>机制, 这个里面涉及到一个问题，就是一个客户端如何和服务器通过http2开始交互(还是老的端口)，理解上面，需要引入一个协商机制(negotiate), 从<a href="https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header" target="_blank" rel="external">wiki</a>里面介绍的是:<ul>
<li>如果是h2c, 可以急于http/1.1的upgrade机制</li>
<li>如果是h2(tls), 是基于<code>ALPN</code>或者<code>NLN</code>(快废弃)</li>
</ul>
</li>
</ul>
<p>这个里面碰到的问题是，配置的nginx好像不能很好的支持<code>http/1.1 upgrade</code>的协商机制，后续通过源码在分析。如上，最简单的构造http/2协议的方式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">]$ curl --http2-prior-knowledge  &quot;127.0.0.1:8086&quot; -i                                              16:42:29</div><div class="line">HTTP/2 200</div><div class="line">server: openresty/1.11.2.5</div><div class="line">date: Thu, 21 Sep 2017 08:42:45 GMT</div><div class="line">content-type: application/octet-stream</div><div class="line"></div><div class="line">I am location in http2</div></pre></td></tr></table></figure>
<h3 id="利用Chrome发送Http-2请求"><a href="#利用Chrome发送Http-2请求" class="headerlink" title="利用Chrome发送Http/2请求"></a>利用Chrome发送Http/2请求</h3><p>如上所述，由于浏览器只支持安全的http2，所以要验证这个demo，我们需要让我们的站点有相应的证书才可以, 所以这个环境主要关注如下几个topic:</p>
<ul>
<li>本地证书的生成步骤</li>
<li>本地nginx的配置</li>
<li>chrome请求的发送以及验证</li>
</ul>
<p>分别如下:</p>
<h4 id="关于测试证书"><a href="#关于测试证书" class="headerlink" title="关于测试证书"></a>关于测试证书</h4><p>虽然<code>Let&#39;s Encrypt</code>给了我们一个免费生成域名证书的机会，但是灵活性/时效性欠缺, 所以在特定的网络情况下(比如内网, 自己测试使用), 更建议自己生成简单的域名证书, 这样也方便接下来的测试, 因此这里简单介绍下如何通过<code>openssl</code>生成自己的域名证书</p>
<p>先介绍整体的逻辑, 要对生成一个域名证书，从<code>PKI</code>的体系来看，主要需要如下三个步骤(假设要生成<code>example.org</code>的域名证书):</p>
<ol>
<li>网站拥有者先生成自己网站的公钥私钥对(私钥对自己可见) :</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in example.org.key -noout -text</div></pre></td></tr></table></figure>
<ol>
<li>构造一个<code>Certificate Signing Request (CSR)</code>, 可以理解为你需要描述好你的需求(给那个域名加证书/用什么算法等), 这样后续CA才能依照此颁发证书, 具体如下:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">### 如上，由于这个是描述需求的，所以这个步骤关于最后证书的能力</div><div class="line">### 配置过程中会有不少可选性</div><div class="line">openssl req -new -key example.org.key -out example.org.csr</div></pre></td></tr></table></figure>
<ol>
<li><p>现在我们需要的是用CA对<code>CSR</code>请求进行授权，但是我们还缺少CA，所以这个步骤是生成自己的CA证书，大家可以理解这个是一次性的(后续给其他的域名颁发证书，不需要重复执行这一步), 具体如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### 生成密钥</div><div class="line">openssl genrsa -out ca.key 2048</div><div class="line">### 生成自签名的CA证书</div><div class="line">openssl req -new -x509 -key ca.key -out ca.crt</div></pre></td></tr></table></figure>
</li>
<li><p>有了如上CA证书, 最后一步就是用CA给CSR进行签名，具体如下:</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -in example.org.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.org.crt</div></pre></td></tr></table></figure>
<p>主要参考文档如下:</p>
<ul>
<li><p><a href="https://gist.github.com/Soarez/9688998" target="_blank" rel="external">How to setup your own CA with OpenSSL</a> : 上面的demo都是来自于这个文档，说的比较详细，包括背后的思路和具体的实践步骤，主要推荐</p>
</li>
<li><p><a href="https://jamielinux.com/docs/openssl-certificate-authority/index.html" target="_blank" rel="external">OpenSSL Certificate Authority</a> : 内容更细一些，但是也是非常系统的介绍, 里面还介绍了<code>intermediate CA</code>的操作方式，有此类需求的可以了解</p>
</li>
<li><p><a href="http://www.cnblogs.com/liyulong1982/p/6106129.html" target="_blank" rel="external">HTTPS证书生成原理和部署细节</a> : 中文文档</p>
</li>
</ul>
<h4 id="nginx配置以及chrome发送"><a href="#nginx配置以及chrome发送" class="headerlink" title="nginx配置以及chrome发送"></a>nginx配置以及chrome发送</h4><p>nginx配置比较简单，完整起见，具体配置贴出如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       8443 ssl http2;</div><div class="line">    server_name  www.shevacjs.com;</div><div class="line"></div><div class="line">    ### 证书</div><div class="line">    ssl_certificate      /xxxx/shevacjs.com.crt;</div><div class="line">    ### 私钥</div><div class="line">    ssl_certificate_key  /xxxx/shevacjs.com.key;</div><div class="line"></div><div class="line">    ssl_session_cache    shared:SSL:1m;</div><div class="line">    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>用Chrome发送，选择信任此证书, 即可;如下是一个简单的截图:</p>
<p><img src="/images/http2_demo.png" alt="http2_demo"></p>
<p>对比如果使用非http2网络交互情况如下:</p>
<p><img src="/images/http1_demo.png" alt="http1_demo"></p>
<h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ul>
<li><p>用wireshark抓包的时候, 如果协议不是走标准的端口(比如TLS走8443而不是443), 需要手动去配置,告诉wireshark 8443端口上面的应用协议是TLS(一直以为能自动识别), 具体可以参看<a href="https://ask.wireshark.org/questions/34075/why-wireshark-cannot-display-tlsssl" target="_blank" rel="external">Why wireshark cannot display TLS/SSL</a></p>
</li>
<li><p>Chrome下面<code>DevTools</code>会显示所谓的<code>Connection Id</code>, 可以看到在http2情况下，同一个域名的连接id是一致的, chrome是复用链接的, 同时可以通过<code>chrome://net-internals/#http2</code> 来查看HTTP2的交互情况</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://simonecarletti.com/blog/2016/01/http2-curl-macosx/" target="_blank" rel="external">Using cURL with HTTP/2 on Mac OS X</a> : 介绍了在macOS下面如何让<code>curl</code>支持发送<code>http2</code>请求, 不过有点坑，如果改方法不行，建议自己手动编译<a href="https://nghttp2.org/blog/2017/08/18/nghttp2-v1-25-0/" target="_blank" rel="external">nghttp2</a>和<a href="https://curl.haxx.se/download.html" target="_blank" rel="external">curl</a></p>
</li>
<li><p><a href="https://imququ.com/post/protocol-negotiation-in-http2.html" target="_blank" rel="external">谈谈HTTP/2的协议协商机制</a> 和 <a href="https://imququ.com/post/enable-alpn-asap.html" target="_blank" rel="external">为什么我们应该尽快支持ALPN</a> : 关于Http协议协商(包括Upgrade, NPN, ALPN)的非常好的介绍和说明</p>
</li>
</ul>
<p>以上，有错漏之处后续再补充</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gubeishuizhan.jpg&quot; alt=&quot;古北水镇&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http
    
    </summary>
    
    
      <category term="nginx, http2" scheme="http://shevacjs.com/tags/nginx-http2/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170917</title>
    <link href="http://shevacjs.com/2017/09/18/20170917/"/>
    <id>http://shevacjs.com/2017/09/18/20170917/</id>
    <published>2017-09-18T06:01:45.000Z</published>
    <updated>2017-09-18T06:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://blog.mozilla.org/firefox/introducing-firefox-multi-account-containers/" target="_blank" rel="external">Put your multiple personalities in Firefox Multi-Account Containers</a> :  Firefox新开发的<code>Muliti-Account Container</code>功能和机制, 可以使得你在一个浏览器上面拥有多个不同的帐号体系(比如工作/生活/娱乐), 改功能在<a href="https://news.ycombinator.com/item?id=15256603" target="_blank" rel="external">hacker news</a>倍受赞誉</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://jackhiston.com/2017/9/13/making-a-master-puppeteer/" target="_blank" rel="external">Making a Master Puppeteer</a> : 本文是最之前Chrome开放的<code>Puppeteer</code>(Chrome headless模式)的使用介绍和说明, 有助于大家对这个nodelib有个初步了解</p>
</li>
<li><p><a href="https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array" target="_blank" rel="external">Why is it faster to process a sorted array than an unsorted array?</a> : stack overflow上面一个非常高点赞(25K+)的问题, 分析为什么对一个已经排序好数组排序，速度会更快, 其主要原因认为在于排序好的数组在cpu做分支预测的时候会更准确, 上面的demo对于分支预测的解释非常准确, 可以深入了解</p>
</li>
<li><p><a href="https://github.com/agentzh/amazon-polly-batch" target="_blank" rel="external">agentzh: amazon-polly-batch</a> : “Convert large plain text files to MP3 files via Amazon Polly”, 这样你就可以随时随地练练自己的英语听力了。感觉<code>agentzh</code>的确是hacker极致的代表人物, 自己最近做诸多事情，都是偏眼高手低, 心态执行力太差，需要好好反思</p>
</li>
<li><p><a href="http://linuxperf.com/?p=83" target="_blank" rel="external">内核如何检测SOFT LOCKUP与HARD LOCKUP？</a> : 核心是有一个不可屏蔽的<code>NMI Watchdog</code>中断，可以定时检测和侦测</p>
</li>
</ul>
<a id="more"></a>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://blog.jessfraz.com/post/windows-for-linux-nerds/" target="_blank" rel="external">Windows for Linux Nerds</a> : 其实主要介绍了Windows Subsystem for Linux (WSL), 简单阐述了其原理机制以及优缺点(主要是跨系统的文件操作问题), 可以当做一个科普文</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;mid=2653163012&amp;idx=1&amp;sn=a69a6a439e677ff6e338d266f3c95bc2&amp;chksm=8b49336abc3eba7c05b91d6fdac9eecad89cbc01c76e2d38de3cd7564d3eec0a771f5971cd56#rd" target="_blank" rel="external">后台程序员转算法的参考秘籍：大规模机器学习框架的四重境界</a> : 最近看的感觉不错的中文文档, 对机器学习模型训练的工程化，有着非常清楚的介绍和说明, 也可以加深你自己对参数服务器的理解, 关于<code>Parameter Server</code>还可以参考<a href="http://blog.csdn.net/cyh_24/article/details/50545780" target="_blank" rel="external">Parameter Server 详解</a>, <a href="http://blog.csdn.net/buptgshengod/article/details/46819051" target="_blank" rel="external">MapReduce的替代者-Parameter Server</a> 这两个文章，可以综合起来理解</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://blog.mozilla.org/security/2017/09/13/verified-cryptography-firefox-57/" target="_blank" rel="external">Verified cryptography for Firefox 57</a> : Firefox尝试在其<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview" target="_blank" rel="external">NSS</a>引入<a href="https://github.com/mitls/hacl-star" target="_blank" rel="external"> HACL* cryptographic library</a>, 其被认为会有更好的健壮性，整体思路是依赖<a href="https://github.com/FStarLang/FStar" target="_blank" rel="external">Fstar</a> 这种<code>Verification system for effectful programs</code>, <code>F-star/F*</code>这类语言可以关注下</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247485394&amp;idx=1&amp;sn=ca2e301eb7ad996384306671205bc90b&amp;chksm=97236510a054ec06c67c7f8fd14eec29c07050746cb00dc3934580a76c8db7e8e98b92db1322&amp;scene=21#wechat_redirect" target="_blank" rel="external">React 的许可协议到底发生了什么问题？</a> : 可以了解之前业内讨论不休的<code>React</code>协议</p>
</li>
<li><p><a href="http://www.developingandstuff.com/2016/01/10-questions-to-make-on-tech-interview.html" target="_blank" rel="external">10 questions to make on a tech interview</a> : 不知道怎么面试的，问问这些问题也是可以的</p>
</li>
<li><p><a href="https://github.com/raymestalez/nulis" target="_blank" rel="external">Nulis: Tree editor for writers</a> : 一个针对作者/作家的编辑器, 支持树型模式的展开式编辑, 对于一些写故事和小说的写着而已，个人感觉是非常有意义的尝试</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/firefox/introducing-firefox-multi-account-containers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Put your multiple personalities in Firefox Multi-Account Containers&lt;/a&gt; :  Firefox新开发的&lt;code&gt;Muliti-Account Container&lt;/code&gt;功能和机制, 可以使得你在一个浏览器上面拥有多个不同的帐号体系(比如工作/生活/娱乐), 改功能在&lt;a href=&quot;https://news.ycombinator.com/item?id=15256603&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hacker news&lt;/a&gt;倍受赞誉&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://jackhiston.com/2017/9/13/making-a-master-puppeteer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making a Master Puppeteer&lt;/a&gt; : 本文是最之前Chrome开放的&lt;code&gt;Puppeteer&lt;/code&gt;(Chrome headless模式)的使用介绍和说明, 有助于大家对这个nodelib有个初步了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why is it faster to process a sorted array than an unsorted array?&lt;/a&gt; : stack overflow上面一个非常高点赞(25K+)的问题, 分析为什么对一个已经排序好数组排序，速度会更快, 其主要原因认为在于排序好的数组在cpu做分支预测的时候会更准确, 上面的demo对于分支预测的解释非常准确, 可以深入了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/agentzh/amazon-polly-batch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;agentzh: amazon-polly-batch&lt;/a&gt; : “Convert large plain text files to MP3 files via Amazon Polly”, 这样你就可以随时随地练练自己的英语听力了。感觉&lt;code&gt;agentzh&lt;/code&gt;的确是hacker极致的代表人物, 自己最近做诸多事情，都是偏眼高手低, 心态执行力太差，需要好好反思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://linuxperf.com/?p=83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内核如何检测SOFT LOCKUP与HARD LOCKUP？&lt;/a&gt; : 核心是有一个不可屏蔽的&lt;code&gt;NMI Watchdog&lt;/code&gt;中断，可以定时检测和侦测&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170910</title>
    <link href="http://shevacjs.com/2017/09/11/20170910/"/>
    <id>http://shevacjs.com/2017/09/11/20170910/</id>
    <published>2017-09-11T12:59:45.000Z</published>
    <updated>2017-09-11T12:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/?cb=1" target="_blank" rel="external">The Incredible Growth of Python</a> : 由于Machine Learning的不断推广和普及, python这几年变得愈发流行，本文是Stackf overlow的官方分析</p>
</li>
<li><p><a href="https://herbsutter.com/2017/09/06/c17-is-formally-approved/" target="_blank" rel="external">C++17 is formally approved</a> : C++ 17正式通过相关的标准审议, 具体相关的特性可以查看<a href="https://stackoverflow.com/questions/38060436/what-are-the-new-features-in-c17/38060437#38060437" target="_blank" rel="external">What are the new features in C++17?</a>, 感觉自己C++的相关理解还是停留在大学时代, 需要有机会可以去进一步了解实践:)</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/09/Angel-lda-vldb-windows-lightlda" target="_blank" rel="external">基于腾讯Angel的LDA*入选VLDB，超越微软LightLDA</a> : 不错，可惜今年的VLDB会议没有去参加</p>
</li>
</ul>
<a id="more"></a>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://www.jasondavies.com/bloomfilter/" target="_blank" rel="external">Bloom Filters</a> : 本文比较精炼的介绍了Bloom过滤器的实现和设计，还构造了一个可视化的demo展示，还是挺有意思的</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15185416" target="_blank" rel="external">Optimizing web servers for high throughput and low latency</a> : Dropbox的博客文章, 对于系统性能的分析和优化，从底层硬件, 到操作系统栈，到应用层, 都有非常详细的说明和介绍(比如cpu的avx2的支持, kenerl TLS支持等)，建议mark学习</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/09/streaming-Pipeline-kuaishou" target="_blank" rel="external">超百万观众同场看直播秒开不卡顿，快手是如何做到的？|首次披露</a> : 先mark</p>
</li>
<li><p><a href="https://eng.uber.com/michelangelo/" target="_blank" rel="external">MEET MICHELANGELO: UBER’S MACHINE LEARNING PLATFORM</a> : 有点类似公司内部的<code>BML</code>平台, 但是感觉其系统性考虑和整体设计的理念会更全局一些, 值得参考</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://www.infoq.com/cn/articles/cloud-data-auditing" target="_blank" rel="external">专注于隐私和安全的云数据审计技术</a> : 先mark</p>
</li>
<li><p><a href="https://varvy.com/pagespeed/" target="_blank" rel="external">Page speed optimization</a> : 不错的页面，可以展现不同网页的pagespeed优化策略, 其方法论值得学习</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.blog/2017/09/06/incredible-growth-python/?cb=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Incredible Growth of Python&lt;/a&gt; : 由于Machine Learning的不断推广和普及, python这几年变得愈发流行，本文是Stackf overlow的官方分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://herbsutter.com/2017/09/06/c17-is-formally-approved/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++17 is formally approved&lt;/a&gt; : C++ 17正式通过相关的标准审议, 具体相关的特性可以查看&lt;a href=&quot;https://stackoverflow.com/questions/38060436/what-are-the-new-features-in-c17/38060437#38060437&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the new features in C++17?&lt;/a&gt;, 感觉自己C++的相关理解还是停留在大学时代, 需要有机会可以去进一步了解实践:)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2017/09/Angel-lda-vldb-windows-lightlda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于腾讯Angel的LDA*入选VLDB，超越微软LightLDA&lt;/a&gt; : 不错，可惜今年的VLDB会议没有去参加&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170903</title>
    <link href="http://shevacjs.com/2017/09/04/20170903/"/>
    <id>http://shevacjs.com/2017/09/04/20170903/</id>
    <published>2017-09-04T07:27:45.000Z</published>
    <updated>2017-09-04T07:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://www.jianshu.com/p/072587b47515" target="_blank" rel="external">一篇文章，教你学会Git</a> : 对Git的概念和核心用法介绍的还是比较清晰的，可以学习下</p>
</li>
<li><p><a href="http://linuxperf.com/?p=184" target="_blank" rel="external">如何诊断SLUB问题</a> : 可以了解linux的内核内存分配的Slab机制</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><a href="https://blog.acolyer.org/2017/08/28/using-chatbots-against-voicespam-analyzing-lennys-effectiveness/" target="_blank" rel="external">Using chatbots against voicespam: analyzing Lenny’s effectiveness</a> :  这篇paper介绍了一种应对电话骚扰的简单而又有效的办法: 通过构建一个对话机器人，该机器人无需进行复杂的语音识别等，只需要通过固定的句式和轮回对话，就能大大拖累攻击者的会话时间，使其攻击成本成倍提升</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://blog.acolyer.org/2017/08/24/a-cloud-based-content-gathering-network/" target="_blank" rel="external">A cloud-based content gathering network</a> : 该paper介绍了<br>一个新的概念<code>CGN</code>节点, 有点类似于现在常见的正向代理, 其让用户的访问模式变为<code>Client --(1 RTT)--&gt; CGN --(N RTT)--&gt; Web Service</code>,  同时让CGN节点和web service尽快靠近，这会使得即便有N次RTT，其整体响应时间也会很快; 有点类似于动态的CDN，其实现在很多CDN服务商都在往这个方面走了</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://blog.apnic.net/2016/08/22/ipv6-performance-revisited/" target="_blank" rel="external">IPv6 Performance – Revisited</a> : 作者对比了IPv6和IPv4的性能差异, 总体的结论是 整体上看以RTT为例, IPv6和IPv4差异不是很大, 细化下来，在欧洲北美Ipv6的性能会稍好一些; 但是从连通率来看, Ipv4的连通率是好于IpV6(0.2%失败率 vs 1.6%)</p>
</li>
<li><p><a href="http://brianknapp.me/coding-secrets-that-are-only-learnt-by-experience/" target="_blank" rel="external">Do programmers have some coding secrets that are only learnt by experience?</a> : “There are absolutely 100% for sure coding secrets that are only learned by experience. In fact, and perhaps I shouldn’t tell you this, even if I tell you the secrets you won’t believe them until you experience them.”，需要不断的积累自己的经验, 换个工作环境, 亲自写码, 掌握基础知识，以及注重一些非技术体系方面的知识(管理，领域相关)</p>
</li>
<li><p><a href="http://insights.thoughtworks.cn/build-security-in-pii/" target="_blank" rel="external">Build Security In PII</a> : <code>PII</code>(Personal Identifiable Information)是可以用来标识个体的信息, 考虑到以后个人隐私的重要性, 本文论述了如何系统化的建设PII保护体系, 包括意识的强化, 相关研发流程解决方案的建立等</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/nikitavoloboev/my-mac-os/" target="_blank" rel="external">My wonderful world of macOS</a> : 列出了一系列MacOS非常有用的工具，可以mark, 个人感觉比较不错的命令行工具包括<a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">tldr</a>, <a href="https://github.com/asciinema/asciinema" target="_blank" rel="external">asciinema</a>, <a href="https://github.com/rgcr/m-cli" target="_blank" rel="external">m-cli</a></p>
</li>
<li><p><a href="https://qgraph.io/blog/deep-learning-surprises/" target="_blank" rel="external">Why Deep Learning Surprises me</a> : 作者认为, Deep Learning打破了他之前”Understanding is something more than computation. Since computers are computation machines, they can never understand anything”的认知</p>
</li>
<li><p><a href="https://github.com/abell123456/AST-/blob/master/README.md?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">AST业界实现收集整理</a> : 一些AST的实现, 先收藏，应该会有用到的地方</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/29004697" target="_blank" rel="external">在工作中学习</a> : 这个思路自己一直很认同，但是文中提到的一些技巧觉得还可以掌握: “阅读每个pull request”, “不要学习工作之外的编程语言/框架”</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/072587b47515&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇文章，教你学会Git&lt;/a&gt; : 对Git的概念和核心用法介绍的还是比较清晰的，可以学习下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://linuxperf.com/?p=184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何诊断SLUB问题&lt;/a&gt; : 可以了解linux的内核内存分配的Slab机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;每周paper&quot;&gt;&lt;a href=&quot;#每周paper&quot; class=&quot;headerlink&quot; title=&quot;每周paper&quot;&gt;&lt;/a&gt;每周paper&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/08/28/using-chatbots-against-voicespam-analyzing-lennys-effectiveness/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using chatbots against voicespam: analyzing Lenny’s effectiveness&lt;/a&gt; :  这篇paper介绍了一种应对电话骚扰的简单而又有效的办法: 通过构建一个对话机器人，该机器人无需进行复杂的语音识别等，只需要通过固定的句式和轮回对话，就能大大拖累攻击者的会话时间，使其攻击成本成倍提升&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170827</title>
    <link href="http://shevacjs.com/2017/08/28/20170827/"/>
    <id>http://shevacjs.com/2017/08/28/20170827/</id>
    <published>2017-08-28T04:12:45.000Z</published>
    <updated>2017-08-28T04:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://www.android.com/versions/oreo-8-0/" target="_blank" rel="external">Android Oreo</a> : Google发布安卓8.0, 加入一系列新特性, 包括引入支持模块化框架的<a href="https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html" target="_blank" rel="external">Treble</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15068278" target="_blank" rel="external">Initial Hammer2 filesystem implementation</a> : Hammer2 FS是一个类似于<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.3704&amp;rep=rep1&amp;type=pdf" target="_blank" rel="external">ZFS</a>的大型分布式文件系统，支持一系列新特性，可以了解下现在最近文件系统的<a href="https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/vfs/hammer2/DESIGN" target="_blank" rel="external">设计思路和理念</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15090424" target="_blank" rel="external">Introducing App Engine Firewall (googleblog.com)</a> : Google App Engine推出的新功能，支持配置一个服务的防火墙，这样可以避免代码上面做改动</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://cppcon2017.sched.com/event/Bgsj/time-travel-debugging-root-causing-bugs-in-commercial-scale-software" target="_blank" rel="external">Time Travel Debugging: Root Causing Bugs in Commercial Scale Software</a> : 微软开发支持了基于<code>Time Travel Debugging</code>的机制，不过具体这个机制还不是很了解，先mark，等到时候具体talk出来再深究</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://ialloc.org/tags.html#nginx-ref" target="_blank" rel="external">nginx源码笔记</a> : 该blog对nginx的实践机制有不少非常深刻的说明，对nginx有兴趣的同学可以多看看</p>
</li>
<li><p><a href="https://medium.freecodecamp.org/why-i-still-use-vim-67afd76b4db6" target="_blank" rel="external">Why I Still Use Vim</a> :  “it’s not because I can’t figure out how to close it”, 和其他的编辑器对比了启动时间，内存消耗等特性，vim还是非常精巧的, 上面也推荐了不少vim相关的资料，可以收藏</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://daily.zhihu.com/story/9583047" target="_blank" rel="external">如何快速成为数据分析师?</a> : </li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s/TjFzJVOowfceHwJNUItcxQ" target="_blank" rel="external">从语言学到深度学习NLP，一文概述自然语言处理</a> : 下一个阶段的目标，就是了解和学习NLP，先mark</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650997427&amp;idx=1&amp;sn=6dcc5fe91cb26c12a5357b10d7dde318" target="_blank" rel="external">测试已死？我看未必！</a> : 多测试人员的多样化需求</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&amp;mid=2247486468&amp;idx=1&amp;sn=b498aed5576470529d8a155846a8eac7&amp;chksm=96cdad49a1ba245f71d75208ca6711d23b9087fa4329ca68f774a763ce1ecfedd0c0cf9c9835&amp;mpshare=1&amp;scene=23&amp;srcid=08180g1CIQtUh5ECs7m6Of7I#rd" target="_blank" rel="external">推荐给程序员的一些书（不止是技术书</a> : mark，里面有一些社会学的书籍可以关注</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15089916" target="_blank" rel="external">Feather: Beautiful open-source icons</a> : 收藏了一些精美的icon图标，可以mark</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15089476" target="_blank" rel="external">Ask HN: What is your all time favorite CS paper?</a> : 必须mark, 上面的那些paper, 最好一篇一篇下载下来认真review</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.android.com/versions/oreo-8-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Oreo&lt;/a&gt; : Google发布安卓8.0, 加入一系列新特性, 包括引入支持模块化框架的&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Treble&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15068278&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Initial Hammer2 filesystem implementation&lt;/a&gt; : Hammer2 FS是一个类似于&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.3704&amp;amp;rep=rep1&amp;amp;type=pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZFS&lt;/a&gt;的大型分布式文件系统，支持一系列新特性，可以了解下现在最近文件系统的&lt;a href=&quot;https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/vfs/hammer2/DESIGN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计思路和理念&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15090424&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing App Engine Firewall (googleblog.com)&lt;/a&gt; : Google App Engine推出的新功能，支持配置一个服务的防火墙，这样可以避免代码上面做改动&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cppcon2017.sched.com/event/Bgsj/time-travel-debugging-root-causing-bugs-in-commercial-scale-software&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Time Travel Debugging: Root Causing Bugs in Commercial Scale Software&lt;/a&gt; : 微软开发支持了基于&lt;code&gt;Time Travel Debugging&lt;/code&gt;的机制，不过具体这个机制还不是很了解，先mark，等到时候具体talk出来再深究&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170820</title>
    <link href="http://shevacjs.com/2017/08/22/20170820/"/>
    <id>http://shevacjs.com/2017/08/22/20170820/</id>
    <published>2017-08-22T03:28:45.000Z</published>
    <updated>2017-08-22T03:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15012882" target="_blank" rel="external">64-bit Firefox is the new default on 64-bit Windows</a> : FireFox在windows系统的默认版本将会是64位的程序，Hacker News很有意义，主要讨论了两个点: 1) 迁移64位的困难之处: 主要是扩展(比如Flash)的兼容; 2)迁移64位对crash的影响，由于用于更多的虚拟内存，已经可以更好的分配连续比较大的地址空间, 对JIT之类更为友好</p>
</li>
<li><p><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">Puppeteer</a> : “Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome”, 个人觉得对一些浏览器上面的自动化工作(比如抓取, 性能分析)都是有非常大的裨益</p>
</li>
<li><p><a href="https://research.googleblog.com/2017/08/making-visible-watermarks-more-effective.html" target="_blank" rel="external">Making Visible Watermarks More Effective</a> : 还是Google的研究成果，通过对聚类水印图片的学习，可以更高效的去除图片里面的水印，具体如何实现可以进一步了解, 先mark</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2017/08/Memsniff-Memcached" target="_blank" rel="external">Memsniff：一个健壮的Memcached流量分析工具</a> : 思路是通过分析网络包(tcpdump产出等)，来对memcached进行相关的分析, 有时候应该有用</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://h14s.p5r.org/2012/09/0x5f3759df.html" target="_blank" rel="external">0x5f3759df</a> : “This post is about the magic constant 0x5f3759df and an extremely neat hack, fast inverse square root, which is where the constant comes from.”, mark</p>
</li>
<li><p><a href="http://io.upyun.com/2017/08/19/nginx-signals/" target="_blank" rel="external">谈谈 nginx 信号集</a> : 关于nginx信号的一些细节，梳理的很清楚，可以加深理解</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2017/08/Spark-on-Angel-swift" target="_blank" rel="external">Spark on Angel：Spark机器学习的核心加速器</a> : 本文具体介绍了腾讯<a href="https://github.com/Tencent/angel" target="_blank" rel="external">Angle</a> 参数服务器如何和spark有效结合的策略, 对于机器学习工程架构有兴趣的可以好好看下</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471" target="_blank" rel="external">Machine Learning is Fun!</a> : “The world’s easiest introduction to Machine Learning”，也有<a href="https://zhuanlan.zhihu.com/p/24339995" target="_blank" rel="external">中文版</a>, 先mark</p>
</li>
<li><p><a href="http://www.infoq.com/cn/minibooks/profile-in-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=minibooks_link&amp;utm_content=link_text" target="_blank" rel="external">架构师特刊：用户画像实践</a> : Infoq<a href="http://www.infoq.com/cn/minibooks?utm_source=infoq&amp;utm_medium=breadcrumbs_feature&amp;utm_campaign=breadcrumbs" target="_blank" rel="external">架构师特刊</a>里面的系列专刊，专门介绍用户画像的实践，有不少干货</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15012882&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Firefox is the new default on 64-bit Windows&lt;/a&gt; : FireFox在windows系统的默认版本将会是64位的程序，Hacker News很有意义，主要讨论了两个点: 1) 迁移64位的困难之处: 主要是扩展(比如Flash)的兼容; 2)迁移64位对crash的影响，由于用于更多的虚拟内存，已经可以更好的分配连续比较大的地址空间, 对JIT之类更为友好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Puppeteer&lt;/a&gt; : “Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome”, 个人觉得对一些浏览器上面的自动化工作(比如抓取, 性能分析)都是有非常大的裨益&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://research.googleblog.com/2017/08/making-visible-watermarks-more-effective.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Visible Watermarks More Effective&lt;/a&gt; : 还是Google的研究成果，通过对聚类水印图片的学习，可以更高效的去除图片里面的水印，具体如何实现可以进一步了解, 先mark&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2017/08/Memsniff-Memcached&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memsniff：一个健壮的Memcached流量分析工具&lt;/a&gt; : 思路是通过分析网络包(tcpdump产出等)，来对memcached进行相关的分析, 有时候应该有用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170813</title>
    <link href="http://shevacjs.com/2017/08/14/20170813/"/>
    <id>http://shevacjs.com/2017/08/14/20170813/</id>
    <published>2017-08-14T11:51:00.000Z</published>
    <updated>2017-08-14T11:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://medium.com/@andrewng/deeplearning-ai-announcing-new-deep-learning-courses-on-coursera-43af0a368116" target="_blank" rel="external">Deeplearning.ai: Announcing new Deep Learning courses on Coursera</a> : Ng的新的关于Deep Learning的AI课程将会在courses发布，有兴趣的同学可以关注</p>
</li>
<li><p><a href="http://nginx.org/en/CHANGES" target="_blank" rel="external">nginx 1.13.4 </a> : Nginx退出1.13.4版本, 支持<a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html" target="_blank" rel="external">mirror module</a>，感觉有不少应用场景，可以关注下</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/08/deeplearn-js-Browser-machine-int" target="_blank" rel="external">deeplearn.js：浏览器端机器智能框架</a> : “deeplearn.js最初由Google Brain PAIR开发，是一款基于硬件加速的开源JavaScript库，可被用在机器智能领域”</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" target="_blank" rel="external">Linux Load Averages: Solving the Mystery</a> : 对<code>load average</code> 有非常系统的阐述和说明, 可以加深对其的认识和理解, mark</p>
</li>
<li><p><a href="https://tools.ietf.org/id/draft-nottingham-thanks-larry-00.html#RFC2324" target="_blank" rel="external">Reserving the 418 HTTP Status Code</a> : 现在才知道还有418这个奇葩的状态码，含义是:”I’m a teapot’”</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://medium.com/netflix-techblog/starting-the-avalanche-640e69b14a06" target="_blank" rel="external">Starting the Avalanche</a> : Netflix关于发现和防止系统雪崩的设计, 最后一段的总结还是有不少干货</p>
</li>
<li><p><a href="http://www.infoq.com/cn/presentations/practice-of-wechat-advertising-engine-and-rhythm-algorithm?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2" target="_blank" rel="external">微信广告引擎与播放节奏算法实践</a> : 微信的广告算法实践，相比于百度等公司，其策略里面会更多引入社交相关的信息，另外整个PPT做的非常好看，值得收藏</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15005031" target="_blank" rel="external">An Intro to Compilers</a> : 对编译器很简洁但很系统的介绍，另外hacker news上面的讨论有不少干货和资料，可以关注，mark</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/28418760" target="_blank" rel="external">机器学习领域值得关注的 10 位 Quora 大咖</a> : 感觉不错，里面的一些相关问题的推荐可以都好好读一遍</p>
</li>
<li><p><a href="https://github.com/vahidk/EffectiveTensorflow?" target="_blank" rel="external">Effective Tensorflow</a> : Tensorflow的教程，这几周需要抽时间开始系统学习了</p>
</li>
<li><p><a href="https://www.thomas-krenn.com/de/wikiDE/images/e/e0/Linux-storage-stack-diagram_v4.10.png" target="_blank" rel="external">Linux Storage Stack Diagram</a> : 图花的很好，可以收藏</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@andrewng/deeplearning-ai-ann
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>nginx 1.13.4 版本说明</title>
    <link href="http://shevacjs.com/2017/08/09/nginx_1_13_4/"/>
    <id>http://shevacjs.com/2017/08/09/nginx_1_13_4/</id>
    <published>2017-08-09T09:27:07.000Z</published>
    <updated>2017-08-11T07:25:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原始feature说明"><a href="#原始feature说明" class="headerlink" title="原始feature说明"></a>原始feature说明</h3><blockquote>
<p>主要摘录1.13.1/1.13.2新feature</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">*) Feature: the ngx_http_mirror_module.</div><div class="line"></div><div class="line">*) Bugfix: client connections might be dropped during configuration</div><div class="line">   testing when using the &quot;reuseport&quot; parameter of the &quot;listen&quot;</div><div class="line">   directive on Linux.</div></pre></td></tr></table></figure>
<p>具体而言包括:</p>
<ul>
<li>新增<a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html" target="_blank" rel="external">mirror module</a>，个人感觉有不少用处，下面详解</li>
<li>其次一个<code>reuseport</code>相关的bug的修复，之前没怎么介绍过<code>port reuser</code>, 这里也简单说明下</li>
</ul>
<a id="more"></a>
<h3 id="ngx-http-mirror-module"><a href="#ngx-http-mirror-module" class="headerlink" title="ngx_http_mirror_module"></a>ngx_http_mirror_module</h3><p><a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html" target="_blank" rel="external">ngx_http_mirror_module</a> 是主要功能是支持请求镜像，对于一个请求r而言，nginx除了正常处理r1，还可以fork一个在后台处理的请求r2; 虽然功能听起来很简单，但是个人感觉他的业务应用场景是非常多的，比如:</p>
<ul>
<li>实现流量复制/流量放大，可以用于一些压测/自动化测试等场景</li>
<li>实现nginx pagecache, 请求进来，可以让r2请求按照一定的规则去读取/设置缓存</li>
<li>实现消息分发/通知, r2可以直接通报给其他的系统，用于消息通知 </li>
</ul>
<p>如下是mirror module的配置demo: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">location = /test_mirror &#123;</div><div class="line">    proxy_pass http://127.0.0.1:8083/b;</div><div class="line">    ## 支持多次请求镜像, 分别镜像到inner和inner1</div><div class="line">    mirror /inner_mirror;</div><div class="line">    mirror /inner_mirror1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">## 镜像请求处理，分发到 http://127.0.0.1:8083/a</div><div class="line">location = /inner_mirror &#123;</div><div class="line">    internal;</div><div class="line">    proxy_pass http://127.0.0.1:8083/a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">## 镜像请求处理，分发到 http://127.0.0.1:8083/b</div><div class="line">location = /inner_mirror1 &#123;</div><div class="line">    internal;</div><div class="line">    proxy_pass http://127.0.0.1:8083/c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再看下源码实现，整体逻辑是非常清晰&amp;简单，特别适合做新写module的demo(故这里面会说的详细一些些);</p>
<blockquote>
<p>所有代码路径都在: src/http/modules/ngx_http_mirror_module.c</p>
</blockquote>
<p>首先是注册钩子: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ngx_int_t</span></div><div class="line"><span class="title">ngx_http_mirror_init</span><span class="params">(<span class="keyword">ngx_conf_t</span> *cf)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">//创建一个在NGX_HTTP_PRECONTENT_PHASE阶段的钩子</span></div><div class="line">    h = ngx_array_push(&amp;cmcf-&gt;phases[NGX_HTTP_PRECONTENT_PHASE].handlers);</div><div class="line">    <span class="keyword">if</span> (h == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> NGX_ERROR;</div><div class="line">    &#125;</div><div class="line">    *h = ngx_http_mirror_handler;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面具体看下<code>ngx_http_mirror_handler</code>是如何处理:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ngx_int_t</span></div><div class="line"><span class="title">ngx_http_mirror_handler</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 判读是否需要读取body, 是由指令mirror_request_body控制的</span></div><div class="line">    <span class="keyword">if</span> (mlcf-&gt;request_body) &#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line">        <span class="comment">// 构建一个ctx管理读取body的异步请求</span></div><div class="line">        ngx_http_set_ctx(r, ctx, ngx_http_mirror_module);</div><div class="line"></div><div class="line">        <span class="comment">// 读取包体，回调设置为 ngx_http_mirror_body_handler, 其会调用</span></div><div class="line">        <span class="comment">// ngx_http_mirror_handler_internal</span></div><div class="line">        rc = ngx_http_read_client_request_body(r, ngx_http_mirror_body_handler);</div><div class="line">        <span class="keyword">if</span> (rc &gt;= NGX_HTTP_SPECIAL_RESPONSE) &#123;</div><div class="line">            <span class="keyword">return</span> rc;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ngx_http_finalize_request(r, NGX_DONE);</div><div class="line">        <span class="keyword">return</span> NGX_DONE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 不需要读取包体，直接调用: ngx_http_mirror_body_handler</span></div><div class="line">    <span class="keyword">return</span> ngx_http_mirror_handler_internal(r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到具体处理请求的是<code>ngx_http_mirror_handler_internal</code>, 其代码如下: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ngx_int_t</span></div><div class="line"><span class="title">ngx_http_mirror_handler_internal</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 对于设置的内部url，遍历调用</span></div><div class="line">    name = mlcf-&gt;mirror-&gt;elts;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mlcf-&gt;mirror-&gt;nelts; i++) &#123;</div><div class="line">        <span class="comment">// 构建sub-request, 注意类型是 NGX_HTTP_SUBREQUEST_BACKGROUND (好像是1.13.1引入的)</span></div><div class="line">        <span class="keyword">if</span> (ngx_http_subrequest(r, &amp;name[i], &amp;r-&gt;args, &amp;sr, <span class="literal">NULL</span>,</div><div class="line">                                NGX_HTTP_SUBREQUEST_BACKGROUND)</div><div class="line">            != NGX_OK)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> NGX_HTTP_INTERNAL_SERVER_ERROR;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> NGX_DECLINED;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Port-Reuse"><a href="#Port-Reuse" class="headerlink" title="Port Reuse"></a>Port Reuse</h3><p><code>port reuse</code>功能是nginx在<code>1.9.1</code>版本引入的, 其还专门写了一篇文章介绍该特性<a href="https://www.nginx.com/blog/socket-sharding-nginx-release-1-9-1/" target="_blank" rel="external">Socket Sharding in NGINX Release 1.9.1</a>。引入改特性整体而言，可以预见的优势包括:</p>
<ul>
<li>更方便的做程序的热升级: 由于port服用，可以方便的新起来一个进程，用同样的端口, 不过nginx有自己的<a href="http://nginx.org/en/docs/control.html?&amp;_ga=2.52130720.809544211.1502340590-1798186825.1502340590#upgrade" target="_blank" rel="external">解决方案</a></li>
<li>可以缓解解决<code>惊群效应</code>,  nginx之前也有自己的解决方案，通过进程锁做一些控制, 但现在内核直接支持，理论上更优雅, 如下两个图可以说明使用port reuse，整个进程监听模型的变化:<br><img src="/images/without_port_reuse.png" alt="关闭SO_REUSEPORT监听模型"></li>
</ul>
<p>而开启<code>SO_REUSEPORT</code>，整个模型变为:<br><img src="/images/with_port_reuse.png" alt="开启SO_REUSEPORT监听模型"></p>
<p>基于上面的介绍，就容易理解上面说的bugfix的内容: </p>
<blockquote>
<p>client connections might be dropped during configuration testing when using the “reuseport” parameter of the “listen” directive on Linux</p>
</blockquote>
<p>因为开启<code>port reuse</code>, 在test的时候，可能请求也会进来，这样处理请求就可能存在异常；fix的办法就是test的时候，关闭改flag，具体如下: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// diff -r nginx-1.13.3/src/core/ngx_connection.c nginx-1.13.4/src/core/ngx_connection.c</span></div><div class="line"><span class="number">476</span>c476</div><div class="line">&lt;             <span class="keyword">if</span> (ls[i].reuseport) &#123;</div><div class="line">---</div><div class="line">&gt;             <span class="keyword">if</span> (ls[i].reuseport &amp;&amp; !ngx_test_config) &#123;</div><div class="line"><span class="number">486</span>c486</div><div class="line">&lt;                                   <span class="string">"setsockopt(SO_REUSEPORT) %V failed, ignored"</span>,</div><div class="line">---</div><div class="line">&gt;                                   <span class="string">"setsockopt(SO_REUSEPORT) %V failed"</span>,</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原始feature说明&quot;&gt;&lt;a href=&quot;#原始feature说明&quot; class=&quot;headerlink&quot; title=&quot;原始feature说明&quot;&gt;&lt;/a&gt;原始feature说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要摘录1.13.1/1.13.2新feature&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: the ngx_http_mirror_module.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Bugfix: client connections might be dropped during configuration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   testing when using the &amp;quot;reuseport&amp;quot; parameter of the &amp;quot;listen&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   directive on Linux.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体而言包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_mirror_module.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mirror module&lt;/a&gt;，个人感觉有不少用处，下面详解&lt;/li&gt;
&lt;li&gt;其次一个&lt;code&gt;reuseport&lt;/code&gt;相关的bug的修复，之前没怎么介绍过&lt;code&gt;port reuser&lt;/code&gt;, 这里也简单说明下&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://shevacjs.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170806</title>
    <link href="http://shevacjs.com/2017/08/08/20170806/"/>
    <id>http://shevacjs.com/2017/08/08/20170806/</id>
    <published>2017-08-08T04:51:00.000Z</published>
    <updated>2017-08-08T04:52:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://stackoverflow.com/questions/1427032/fast-linux-file-count-for-a-large-number-of-files" target="_blank" rel="external">Fast Linux File Count for a large number of files</a> : 一个小技巧, <code>By default ls sorts the names, which can take a while if there are a lot of them. Also there will be no output until all of the names are read and sorted. Use the ls -f option to turn off sorting</code></p>
</li>
<li><p><a href="https://github.com/gwuhaolin/blog/issues/10" target="_blank" rel="external">流媒体加密</a> : 科普的小文章, 具体介绍了<code>HLS</code>格式的传输方式，以及其对视频的加密原理，此类的科普文章还是非常值得花点时间去读的</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/6f_w_Cpu8WFKE9lGPC84Ug" target="_blank" rel="external">数据处理中的准确性问题</a> : 不少干货, 非常中肯的技巧&amp;建议</p>
</li>
<li><p><a href="http://loup-vaillant.fr/articles/rolling-your-own-crypto" target="_blank" rel="external">Rolling Your Own Crypto</a> : 作者是加密库<a href="http://loup-vaillant.fr/projects/monocypher/" target="_blank" rel="external">Monocypher</a> 的作者, 本文作者分享了对于<code>Crypto</code>的理解，对于加密从应用到自己实现加密库到<code>inventing crypto</code> 的理解，个人对加密还是非常有兴趣的，也先mark</p>
</li>
</ul>
<a id="more"></a>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="http://muratbuffalo.blogspot.com/2017/07/a-comparison-of-distributed-machine.html" target="_blank" rel="external">A Comparison of Distributed Machine Learning Platforms</a> : 关于几个机器学习平台的对比，包括spark, <a href="https://blog.acolyer.org/2016/01/27/petuum/" target="_blank" rel="external">PMLS (Petuum)</a>, Tensorflow等, 结论有”It is safe to say the parameter-server approach won for training in distributed ML platforms.” , 不过<a href="https://news.ycombinator.com/item?id=14889630" target="_blank" rel="external">hacker news</a>上面对此颇有异议</p>
</li>
<li><p><a href="http://tech.lede.com/2017/07/21/rd/server/crossdomain/" target="_blank" rel="external">Nginx缓存引发的跨域惨案</a> : 一个Nginx的缓存的问题, 虽然很简单, 可以当做入门读物</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/-tc8MSpu6h5q3h8xuaRtcw" target="_blank" rel="external">PhxSQL设计与实现（详细版）</a> : 先mark</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s/cQ6LnH1t7n3iy4K83qOoRQ" target="_blank" rel="external">科学式家｜戴文渊：机器学习教科书的7大经典问题</a> : 结论不一定对，但是对于这些问题的拆分，分析和理解，可以加深我们对机器学习的认识</p>
</li>
<li><p><a href="https://scram-pra.org/index.html" target="_blank" rel="external">SCRAM 0.14.0</a> : “SCRAM is a free and open source probabilistic risk analysis tool that supports the Open-PSA Model Exchange Format.”，感觉会是个有趣的东西, 先mark</p>
</li>
<li><p><a href="https://blog.sicara.com/07-2017-best-big-data-new-articles-this-month-acb58d4bb15d" target="_blank" rel="external">The Best of Big Data: New Articles Published This Month (July 2017)</a> : 一些Big Data / Machine Learning的材料, 先mark</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1427032/fast-linux-file-count-for-a-large-number-of-files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fast Linux File Count for a large number of files&lt;/a&gt; : 一个小技巧, &lt;code&gt;By default ls sorts the names, which can take a while if there are a lot of them. Also there will be no output until all of the names are read and sorted. Use the ls -f option to turn off sorting&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gwuhaolin/blog/issues/10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流媒体加密&lt;/a&gt; : 科普的小文章, 具体介绍了&lt;code&gt;HLS&lt;/code&gt;格式的传输方式，以及其对视频的加密原理，此类的科普文章还是非常值得花点时间去读的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/6f_w_Cpu8WFKE9lGPC84Ug&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;数据处理中的准确性问题&lt;/a&gt; : 不少干货, 非常中肯的技巧&amp;amp;建议&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://loup-vaillant.fr/articles/rolling-your-own-crypto&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rolling Your Own Crypto&lt;/a&gt; : 作者是加密库&lt;a href=&quot;http://loup-vaillant.fr/projects/monocypher/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Monocypher&lt;/a&gt; 的作者, 本文作者分享了对于&lt;code&gt;Crypto&lt;/code&gt;的理解，对于加密从应用到自己实现加密库到&lt;code&gt;inventing crypto&lt;/code&gt; 的理解，个人对加密还是非常有兴趣的，也先mark&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>nginx 1.13.1/2 版本说明</title>
    <link href="http://shevacjs.com/2017/08/03/nginx_1_13_1_and_2/"/>
    <id>http://shevacjs.com/2017/08/03/nginx_1_13_1_and_2/</id>
    <published>2017-08-03T06:17:29.000Z</published>
    <updated>2017-08-05T08:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原始feature说明"><a href="#原始feature说明" class="headerlink" title="原始feature说明"></a>原始feature说明</h3><blockquote>
<p>主要摘录1.13.1/1.13.2新feature</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">*) Feature: now a hostname can be used as the &quot;set_real_ip_from&quot;</div><div class="line">       directive parameter.</div><div class="line"></div><div class="line">*) Feature: the &quot;add_trailer&quot; directive.</div><div class="line"></div><div class="line">*) Change: nginx now returns 200 instead of 416 when a range starting</div><div class="line">       with 0 is requested from an empty file.</div></pre></td></tr></table></figure>
<p>具体而言包括:</p>
<ul>
<li><code>set_real_ip_from</code> 指令支持指定hostname定义可信的来源</li>
<li>新增<code>add_trailer</code> 指令, 其具体功能后面详述</li>
<li>对于一个empty的文件，现在是返回200而不是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416" target="_blank" rel="external">416</a></li>
</ul>
<p>同样，这类详细说明前两者的实现，功能以及作用</p>
<a id="more"></a>
<h3 id="set-real-ip-from"><a href="#set-real-ip-from" class="headerlink" title="set_real_ip_from"></a>set_real_ip_from</h3><p><code>set_real_ip_from</code> 是属于模块<a href="http://nginx.org/en/docs/http/ngx_http_realip_module.html" target="_blank" rel="external">ngx_http_realip_module</a>的一个指令，用于设置信任的源IP地址，以便做类似于<code>X-Forwarded-For</code>的替换; 之前主要是用IP地址(包括address/CIDR/unix), 现在支持<code>域名</code>控制，具体实现如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//code path: http/modules/ngx_http_realip_module.c</span></div><div class="line"></div><div class="line"><span class="comment">//如上, 尝试解析ip/unix地址, 现在对hostname做判断</span></div><div class="line"></div><div class="line">u.host = value[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// 域名解析</span></div><div class="line"><span class="keyword">if</span> (ngx_inet_resolve_host(cf-&gt;pool, &amp;u) != NGX_OK) &#123;</div><div class="line">    <span class="keyword">if</span> (u.err) &#123;</div><div class="line">        ngx_conf_log_error(NGX_LOG_EMERG, cf, <span class="number">0</span>,</div><div class="line">                           <span class="string">"%s in set_real_ip_from \"%V\""</span>,</div><div class="line">                           u.err, &amp;u.host);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> NGX_CONF_ERROR;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 预留空间</span></div><div class="line">cidr = ngx_array_push_n(rlcf-&gt;from, u.naddrs);</div><div class="line"><span class="keyword">if</span> (cidr == <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="keyword">return</span> NGX_CONF_ERROR;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 填充IP地址</span></div><div class="line">ngx_memzero(cidr, u.naddrs * <span class="keyword">sizeof</span>(<span class="keyword">ngx_cidr_t</span>));</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; u.naddrs; i++) &#123;</div><div class="line">    cidr[i].family = u.addrs[i].sockaddr-&gt;sa_family;</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> (cidr[i].family) &#123;</div><div class="line">    <span class="keyword">default</span>: <span class="comment">/* AF_INET */</span></div><div class="line">        <span class="built_in">sin</span> = (struct sockaddr_in *) u.addrs[i].sockaddr;</div><div class="line">        cidr[i].u.in.addr = <span class="built_in">sin</span>-&gt;sin_addr.s_addr;</div><div class="line">        cidr[i].u.in.mask = <span class="number">0xffffffff</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码实现来看，其策略是nginx启动的时候，通过对hostname的反解获取对应的IP，然后存储起来；<br>在处理请求的时候，和存储的ip list进行比对；可以看到存在的一个风险是: 如果在运行过程中hostname ip发生变化了，可能会存在误判的情况</p>
<h3 id="add-trailer-指令"><a href="#add-trailer-指令" class="headerlink" title="add_trailer 指令"></a>add_trailer 指令</h3><p><a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_trailer" target="_blank" rel="external">add_trailer</a> 指令是在<code>1.13.2</code>版本支持的; 在看其具体实现之前，先分析其具体作用, 如下是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Trailer" target="_blank" rel="external">MDN web docs</a>的说明: </p>
<blockquote>
<p>Trailer 是一个响应首部，允许发送方在分块发送的消息后面添加额外的元信息，这些元信息是随着消息主体的发送动态生成的，比如消息完整性校验，数字签名，或者后处理状态等。</p>
</blockquote>
<p>再看看demo，应该会容易理解一些: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">## 头部内容, `Trailer: Expires` 指定在body里面会有这段信息</div><div class="line">HTTP/1.1 200 OK </div><div class="line">Content-Type: text/plain </div><div class="line">Transfer-Encoding: chunked</div><div class="line">Trailer: Expires</div><div class="line"></div><div class="line">7\r\n </div><div class="line">Mozilla\r\n </div><div class="line">9\r\n </div><div class="line">Developer\r\n </div><div class="line">7\r\n </div><div class="line">Network\r\n </div><div class="line">0\r\n </div><div class="line">Expires: Wed, 21 Oct 2015 07:28:00 GMT\r\n  --&gt; 这里注意`Trailer`信息是放在终止块之后 </div><div class="line">\r\n</div></pre></td></tr></table></figure>
<p>具体作用，在nginx forum上面有较多的讨论，具体可以参看<a href="https://forum.nginx.org/read.php?29,267882,269331" target="_blank" rel="external">add support for trailers in HTTP responses</a> 以及相关的文档<a href="http://engineering.pivotal.io/post/http-trailers/" target="_blank" rel="external">HTTP Trailers</a>, 由于<code>trailer</code>相比于之前的header方式，主要在于其可以在body返回之后返回一些信息，可以预期到的应用空间有:</p>
<blockquote>
<p>让nginx支持trailer，作者和committer还有还不少争论，具体可以参看<a href="https://forum.nginx.org/read.php?29,267882,268680#msg-268680" target="_blank" rel="external">add support for trailers in HTTP</a>, 可以加深对改feature的理解</p>
</blockquote>
<ul>
<li>对于返回的body做一些checksum，包括算hash值等, trailer机制可以支持一次流式计算</li>
<li>标记返回body的状态: 我们可以在返回的body里面标记相关的状态</li>
</ul>
<p>实现方面, 简单说明如下: </p>
<blockquote>
<p>主要是<a href="http://nginx.org/en/docs/http/ngx_http_headers_module.html#add_trailer" target="_blank" rel="external">ngx_http_headers_module</a> 模块实现</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// code path: src/http/modules/ngx_http_headers_filter_module.c</div><div class="line"></div><div class="line">//引入trailer关联变量, 关联指令:</div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line">    ngx_http_expires_t         expires;</div><div class="line">    time_t                     expires_time;</div><div class="line">    ngx_http_complex_value_t  *expires_value;</div><div class="line">    ngx_array_t               *headers;</div><div class="line">    ngx_array_t               *trailers;</div><div class="line">&#125; ngx_http_headers_conf_t;</div><div class="line"></div><div class="line">static ngx_command_t  ngx_http_headers_filter_commands[] = &#123;</div><div class="line">    ...</div><div class="line">    &#123; ngx_string(&quot;add_trailer&quot;),</div><div class="line">      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_HTTP_LIF_CONF</div><div class="line">                        |NGX_CONF_TAKE23,</div><div class="line">      ngx_http_headers_add,</div><div class="line">      NGX_HTTP_LOC_CONF_OFFSET,</div><div class="line">      offsetof(ngx_http_headers_conf_t, trailers), //存储结果在如上trailers变量里面</div><div class="line">      NULL &#125;,</div><div class="line">      ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送头部的时候，加上如下逻辑，插入: </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// code path: ngx_http_headers_filter_module.c</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ngx_int_t</span></div><div class="line"><span class="title">ngx_http_trailers_filter</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r, <span class="keyword">ngx_chain_t</span> *in)</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">switch</span> (r-&gt;headers_out.status) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 对于满足状态的才输出</span></div><div class="line">    h = conf-&gt;trailers-&gt;elts;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conf-&gt;trailers-&gt;nelts; i++) &#123;</div><div class="line">        <span class="comment">//解析变量</span></div><div class="line">        <span class="keyword">if</span> (ngx_http_complex_value(r, &amp;h[i].value, &amp;value) != NGX_OK) &#123;</div><div class="line">            <span class="keyword">return</span> NGX_ERROR;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 结果存储在 headers_out.trailers</span></div><div class="line">        <span class="keyword">if</span> (value.len) &#123;</div><div class="line">            t = ngx_list_push(&amp;r-&gt;headers_out.trailers);</div><div class="line">            <span class="keyword">if</span> (t == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">return</span> NGX_ERROR;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            t-&gt;key = h[i].key;</div><div class="line">            t-&gt;value = value;</div><div class="line">            t-&gt;hash = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> ngx_http_next_body_filter(r, in);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在发送包体的时候，把trailer的信息插入到尾部(这里面有一点现在还没有理解，<code>就是这个扩展不主动添加trailer头部, 需要进一步明确</code>), 具体如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// code path : ngx_http_chunked_filter_module.c</span></div><div class="line"><span class="function"><span class="keyword">static</span> ngx_chain_t *</span></div><div class="line"><span class="title">ngx_http_chunked_create_trailers</span><span class="params">(<span class="keyword">ngx_http_request_t</span> *r,</span></div><div class="line">    <span class="keyword">ngx_http_chunked_filter_ctx_t</span> *ctx)</div><div class="line">&#123;</div><div class="line"></div><div class="line">    len = <span class="number">0</span>;</div><div class="line"></div><div class="line">    part = &amp;r-&gt;headers_out.trailers.part;</div><div class="line"></div><div class="line">    <span class="comment">// ... 省略，先计算buffer长度 len</span></div><div class="line"></div><div class="line">    b-&gt;pos = ngx_palloc(r-&gt;pool, len);</div><div class="line">    <span class="keyword">if</span> (b-&gt;pos == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    b-&gt;last = b-&gt;pos;</div><div class="line"></div><div class="line">    <span class="comment">// 下面代码是填充最后一个chunked </span></div><div class="line">    *b-&gt;last++ = CR; *b-&gt;last++ = LF;</div><div class="line">    *b-&gt;last++ = <span class="string">'0'</span>;</div><div class="line">    *b-&gt;last++ = CR; *b-&gt;last++ = LF;</div><div class="line"></div><div class="line">    <span class="comment">// 真正填充信息</span></div><div class="line">    part = &amp;r-&gt;headers_out.trailers.part;</div><div class="line">    header = part-&gt;elts;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; <span class="comment">/* void */</span>; i++) &#123;</div><div class="line">        <span class="comment">// ... 具体填充</span></div><div class="line">        b-&gt;last = ngx_copy(b-&gt;last, header[i].key.data, header[i].key.len);</div><div class="line">        *b-&gt;last++ = <span class="string">':'</span>; *b-&gt;last++ = <span class="string">' '</span>;</div><div class="line"></div><div class="line">        b-&gt;last = ngx_copy(b-&gt;last, header[i].value.data, header[i].value.len);</div><div class="line">        *b-&gt;last++ = CR; *b-&gt;last++ = LF;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *b-&gt;last++ = CR; *b-&gt;last++ = LF;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个todo的是，需要明确下一步的具体应用场景, 上面资料提到的一个是<a href="https://www.w3.org/TR/server-timing/" target="_blank" rel="external">Server Timing</a>，的确不错，但如需要进一步探究</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原始feature说明&quot;&gt;&lt;a href=&quot;#原始feature说明&quot; class=&quot;headerlink&quot; title=&quot;原始feature说明&quot;&gt;&lt;/a&gt;原始feature说明&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要摘录1.13.1/1.13.2新feature&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: now a hostname can be used as the &amp;quot;set_real_ip_from&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       directive parameter.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: the &amp;quot;add_trailer&amp;quot; directive.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Change: nginx now returns 200 instead of 416 when a range starting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       with 0 is requested from an empty file.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体而言包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set_real_ip_from&lt;/code&gt; 指令支持指定hostname定义可信的来源&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;add_trailer&lt;/code&gt; 指令, 其具体功能后面详述&lt;/li&gt;
&lt;li&gt;对于一个empty的文件，现在是返回200而不是&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/416&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;416&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样，这类详细说明前两者的实现，功能以及作用&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://shevacjs.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>nginx 1.13.0 版本说明</title>
    <link href="http://shevacjs.com/2017/08/02/nginx_1_13_0/"/>
    <id>http://shevacjs.com/2017/08/02/nginx_1_13_0/</id>
    <published>2017-08-02T06:17:29.000Z</published>
    <updated>2017-08-03T03:23:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原始feature说明"><a href="#原始feature说明" class="headerlink" title="原始feature说明"></a>原始feature说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">*) Change: SSL renegotiation is now allowed on backend connections.</div><div class="line"></div><div class="line">*) Feature: the &quot;rcvbuf&quot; and &quot;sndbuf&quot; parameters of the &quot;listen&quot;</div><div class="line">   directives of the mail proxy and stream modules.</div><div class="line"></div><div class="line">*) Feature: the &quot;return&quot; and &quot;error_page&quot; directives can now be used to</div><div class="line">   return 308 redirections.</div><div class="line">   Thanks to Simon Leblanc.</div><div class="line"></div><div class="line">*) Feature: the &quot;TLSv1.3&quot; parameter of the &quot;ssl_protocols&quot; directive.</div><div class="line"></div><div class="line">*) Feature: when logging signals nginx now logs PID of the process which</div><div class="line">   sent the signal.</div><div class="line"></div><div class="line">*) Bugfix: in memory allocation error handling.</div><div class="line"></div><div class="line">*) Bugfix: if a server in the stream module listened on a wildcard</div><div class="line">   address, the source address of a response UDP datagram could differ</div><div class="line">   from the original datagram destination address.</div></pre></td></tr></table></figure>
<p>我们主要关系其新增的feature, 包括:</p>
<ul>
<li>return/error_page支持308状态码</li>
<li>nginx收到信号的时候，支持打印信号源的pid</li>
<li><code>ssl_protocols</code> 支持 TLSv1.3 协议</li>
</ul>
<p><code>TLS 1.3</code>协议是一个比较先进的新协议, 这里先不展开，我们重点介绍前两个功能特性的作用和简单实现</p>
<a id="more"></a>
<h3 id="308状态码的支持"><a href="#308状态码的支持" class="headerlink" title="308状态码的支持"></a>308状态码的支持</h3><p>首先，我们来看308状态码的含义以及作用，因为其和301/302/307有很多相似之处(参考<a href="https://stackoverflow.com/questions/42136829/whats-difference-between-http-301-and-308-status-codes" target="_blank" rel="external">此文章</a>)</p>
<p>具体结果可以用表格说明如下: </p>
<table>
<thead>
<tr>
<th>功能作用</th>
<th>Permanent</th>
<th>Temporary </th>
</tr>
</thead>
<tbody>
<tr>
<td>Allows changing the request method from POST to GET</td>
<td>301</td>
<td>302  </td>
</tr>
<tr>
<td>Doesn’t allow changing the request method from POST to GET</td>
<td>308</td>
<td>307  </td>
</tr>
</tbody>
</table>
<p>具体作用，参考了<a href="https://tools.ietf.org/html/rfc7238" target="_blank" rel="external">RFC7238</a>, 个人感觉好像只是能用于保证请求的方法不会被改变; 但其实不是特别理解这一类应用场景</p>
<p>如下是个人感觉比较好的一个HTTP状态码说明图:</p>
<p><img src="/images/http_status.png" alt="http status"></p>
<p>其次简单看下代码实现, 其实不是很难，简单代码摘要如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 主要代码在: ngx_http_special_response.c</span></div><div class="line"></div><div class="line"><span class="comment">// 1. 对于特殊的状态码，nginx会通过如下方式回调:ngx_http_special_response_handler </span></div><div class="line"><span class="comment">// ngx_http_request.c:2345:        ngx_http_finalize_request(r, ngx_http_special_response_handler(r, rc));</span></div><div class="line"></div><div class="line"><span class="comment">// 2. ngx_http_special_response_handler如果有error_page 会调用: ngx_http_send_error_page</span></div><div class="line"></div><div class="line"><span class="comment">// 3. ngx_http_send_error_page 对于特殊状态码处理如下:</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">char</span> ngx_http_error_308_page[] =</div><div class="line"><span class="string">"&lt;html&gt;"</span> CRLF</div><div class="line"><span class="string">"&lt;head&gt;&lt;title&gt;308 Permanent Redirect&lt;/title&gt;&lt;/head&gt;"</span> CRLF</div><div class="line"><span class="string">"&lt;body bgcolor=\"white\"&gt;"</span> CRLF</div><div class="line"><span class="string">"&lt;center&gt;&lt;h1&gt;308 Permanent Redirect&lt;/h1&gt;&lt;/center&gt;"</span> CRLF</div><div class="line">;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">ngx_str_t</span> ngx_http_error_pages[] = &#123;</div><div class="line"></div><div class="line">    ngx_null_string,                     <span class="comment">/* 201, 204 */</span></div><div class="line"></div><div class="line">#define NGX_HTTP_LAST_2XX  <span class="number">202</span></div><div class="line">#define NGX_HTTP_OFF_3XX   (NGX_HTTP_LAST_2XX - <span class="number">201</span>)</div><div class="line"></div><div class="line">    <span class="comment">/* ngx_null_string, */</span>               <span class="comment">/* 300 */</span></div><div class="line">    ngx_string(ngx_http_error_301_page),</div><div class="line">    ngx_string(ngx_http_error_302_page),</div><div class="line">    ngx_string(ngx_http_error_303_page),</div><div class="line">    ngx_null_string,                     <span class="comment">/* 304 */</span></div><div class="line">    ngx_null_string,                     <span class="comment">/* 305 */</span></div><div class="line">    ngx_null_string,                     <span class="comment">/* 306 */</span></div><div class="line">    ngx_string(ngx_http_error_307_page),</div><div class="line">    ngx_string(ngx_http_error_308_page),</div><div class="line"></div><div class="line">#define NGX_HTTP_LAST_3XX  <span class="number">309</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// nginx 会自动化判断数组里面的元素，如果有的话，就可以返回相关的状态码</span></div></pre></td></tr></table></figure>
<p>可以看到实现起来其实还是方便和简单的</p>
<h3 id="支持打印信号源进程信息"><a href="#支持打印信号源进程信息" class="headerlink" title="支持打印信号源进程信息"></a>支持打印信号源进程信息</h3><blockquote>
<p>PS: 现在还不是很理解这个功能的作用，一般控制nginx都是一些脚本，生命周期很短，即便记录pid感觉对于生产应用作用也有限哈</p>
</blockquote>
<p>实现起来其实很简单, 因为<a href="http://man7.org/linux/man-pages/man2/sigaction.2.html" target="_blank" rel="external">sigaction</a> 本身是支持传递来源pid的，只不过老版本的nginx用来较弱的功能, diff如下:</p>
<p>回调函数原型修改(sigaction本身对function的支持就是一个union)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">diff -r nginx<span class="number">-1.11</span><span class="number">.13</span>/src/os/unix/ngx_process.c nginx<span class="number">-1.13</span><span class="number">.0</span>/src/os/unix/ngx_process.c</div><div class="line"><span class="number">18</span>c18</div><div class="line">&lt;     <span class="keyword">void</span>  (*handler)(<span class="keyword">int</span> signo);</div><div class="line">---</div><div class="line">&gt;     <span class="keyword">void</span>  (*handler)(<span class="keyword">int</span> signo, <span class="keyword">siginfo_t</span> *siginfo, <span class="keyword">void</span> *ucontext);</div></pre></td></tr></table></figure>
<p>打印日志的时候加上相关信息:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; ngx_signal_handler(<span class="keyword">int</span> signo, <span class="keyword">siginfo_t</span> *siginfo, <span class="keyword">void</span> *ucontext)</div><div class="line"><span class="number">434</span>,<span class="number">435</span>c442,<span class="number">451</span></div><div class="line">&lt;     ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</div><div class="line">&lt;                   <span class="string">"signal %d (%s) received%s"</span>, signo, sig-&gt;signame, action);</div><div class="line">---</div><div class="line">&gt;     <span class="keyword">if</span> (siginfo &amp;&amp; siginfo-&gt;si_pid) &#123;</div><div class="line">&gt;         ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</div><div class="line">&gt;                       <span class="string">"signal %d (%s) received from %P%s"</span>,</div><div class="line">&gt;                       signo, sig-&gt;signame, siginfo-&gt;si_pid, action);</div><div class="line">&gt; </div><div class="line">&gt;     &#125; <span class="keyword">else</span> &#123;</div><div class="line">&gt;         ngx_log_error(NGX_LOG_NOTICE, ngx_cycle-&gt;<span class="built_in">log</span>, <span class="number">0</span>,</div><div class="line">&gt;                       <span class="string">"signal %d (%s) received%s"</span>,</div><div class="line">&gt;                       signo, sig-&gt;signame, action);</div><div class="line">&gt;     &#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>没有感觉特别有用的业务场景支持；不过nginx对<code>TLSv1.3</code>的支持，下来会review下；其对后续的https交互优化有着重要促进作用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原始feature说明&quot;&gt;&lt;a href=&quot;#原始feature说明&quot; class=&quot;headerlink&quot; title=&quot;原始feature说明&quot;&gt;&lt;/a&gt;原始feature说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;*) Change: SSL renegotiation is now allowed on backend connections.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: the &amp;quot;rcvbuf&amp;quot; and &amp;quot;sndbuf&amp;quot; parameters of the &amp;quot;listen&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   directives of the mail proxy and stream modules.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: the &amp;quot;return&amp;quot; and &amp;quot;error_page&amp;quot; directives can now be used to&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return 308 redirections.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   Thanks to Simon Leblanc.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: the &amp;quot;TLSv1.3&amp;quot; parameter of the &amp;quot;ssl_protocols&amp;quot; directive.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Feature: when logging signals nginx now logs PID of the process which&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   sent the signal.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Bugfix: in memory allocation error handling.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*) Bugfix: if a server in the stream module listened on a wildcard&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   address, the source address of a response UDP datagram could differ&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   from the original datagram destination address.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们主要关系其新增的feature, 包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return/error_page支持308状态码&lt;/li&gt;
&lt;li&gt;nginx收到信号的时候，支持打印信号源的pid&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssl_protocols&lt;/code&gt; 支持 TLSv1.3 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;TLS 1.3&lt;/code&gt;协议是一个比较先进的新协议, 这里先不展开，我们重点介绍前两个功能特性的作用和简单实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://shevacjs.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170730</title>
    <link href="http://shevacjs.com/2017/07/31/20170730/"/>
    <id>http://shevacjs.com/2017/07/31/20170730/</id>
    <published>2017-07-31T12:43:11.000Z</published>
    <updated>2017-07-31T12:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://github.com/memcached/memcached/wiki/ReleaseNotes150" target="_blank" rel="external">Memcached 1.5.0 Release Notes</a> : 支持更丰富强大的LRU策略</p>
</li>
<li><p><a href="https://blogs.windows.com/windowsexperience/2017/07/24/ms-paint-stay/#7aOF1Y7VUckzCI8i.97" target="_blank" rel="external">MS Paint is here to stay</a> : <code>画图</code>软件，先说可能被win10放弃，后来不少用户表示遗憾；现在调整为在windows store可以下载</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://hacks.mozilla.org/2017/07/the-next-generation-of-web-gaming/" target="_blank" rel="external">The Next Generation of Web Gaming</a> : Mozilla的官方blog论述近几年浏览器对web game的支持情况，包括<code>webassembly</code>, <code>SIMD</code>指令支持, <code>SharedArrayBuffer</code>等</p>
</li>
<li><p><a href="https://blogs.technet.microsoft.com/machinelearning/2017/07/25/lessons-learned-benchmarking-fast-machine-learning-algorithms/" target="_blank" rel="external">Lessons Learned From Benchmarking Fast Machine Learning Algorithms</a> : This blog shows the Microsoft’s efforts on <code>boosted decision trees</code> algrothim – LightGBM, which is think to be faster than XGBBoost; We can have a try later. </p>
</li>
<li><p><a href="http://codefine.co/2918.html" target="_blank" rel="external">Linux TCP Backlog机制分析</a> : 主要介绍了当半连接队列打满时候，客户端和服务端的行为, <code>tcp_abort_on_overflow</code> 可以控制不同的行为</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28197440" target="_blank" rel="external">《攻击者说企业安全》之终端安全建议</a> : 先mark里面的建议: <code>强烈推荐习惯 GPG，官网 http://gnupg.org，超强公私钥加密体系，其实习惯后，使用成本很低的，而且免费，以后一些重要文件需要传播，用 GPG 绝对是第一选择，顺便建议学学 gpg 命令</code></p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="http://www.52cs.org/?p=1851&amp;from=timeline&amp;isappinstalled=1" target="_blank" rel="external">点击率预估综述</a> :  对rank的排序算法有个非常系统和完整的介绍，理解了一部分，mark后继续</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/1y5WD_vRfoSmGPbJ2-e86Q" target="_blank" rel="external">如何直观解释卷积神经网络的工作原理？</a> : </p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://codebay.cn/post/3964.html" target="_blank" rel="external">调查显示：近半程序员认为上级技术水平不如自己</a> : 有点标题党，不过里面的其他一些信息还是有指导意义, 包括”程序员在未来三个月内想要学习的顶尖工具：Docker，Python，Angular，Ansible和Jenkins”</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=14842276" target="_blank" rel="external">Ask HN: What programming blogs do you follow?</a> : 有很多非常好的blog推荐, 先mark，后续看看怎么放到RSS上面</p>
</li>
<li><p><a href="http://ruder.io/deep-learning-nlp-best-practices/" target="_blank" rel="external">Deep Learning for NLP Best Practices</a> : 先mark</p>
</li>
<li><p><a href="https://medium.com/towards-data-science/symspell-vs-bk-tree-100x-faster-fuzzy-string-search-spell-checking-c4f10d80a078" target="_blank" rel="external">SymSpell vs. BK-tree: 100x faster fuzzy string search &amp; spell checking</a> : 也是只能先mark</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/memcached/memcached/wiki/Rele
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170723</title>
    <link href="http://shevacjs.com/2017/07/23/20170723/"/>
    <id>http://shevacjs.com/2017/07/23/20170723/</id>
    <published>2017-07-23T06:15:31.000Z</published>
    <updated>2017-07-21T06:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://stackoverflow.com/channels" target="_blank" rel="external">Stack Overflow Channels</a> : Stack Overflow Channel是SO新退出的产品功能, 用于支持一些组织或者机构内部的问题交流&amp;沉淀, 感觉对于一些中小企业还是有帮助的</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://coolshell.cn/articles/17998.html" target="_blank" rel="external">LINUX PID 1 和 SYSTEMD</a> :  关于linux启动的systemd和<code>init 1</code>的恩恩怨怨</p>
</li>
<li><p><a href="https://jvns.ca/blog/2017/07/05/linux-tracing-systems/" target="_blank" rel="external">Linux tracing systems &amp; how they fit together</a> : 对Linux系统的trace工具有个系统性的介绍和分类，可以加深我们对这些分类工具和系统的理解</p>
</li>
<li><p><a href="https://techcrunch.com/2017/07/18/yandex-open-sources-catboost-a-gradient-boosting-machine-learning-librar/" target="_blank" rel="external">Yandex open sources CatBoost, a gradient boosting machine learning library</a> :  一个新的梯度学习算法库，可以了解参考下</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://wetest.qq.com/lab/view/320.html" target="_blank" rel="external">性能百万/s：腾讯轻量级全局流控方案详解</a> : 可以看到比较具体的实现，<code>租赁</code>机制是个不错的创新，可以在性能和功能上面有个合适的折衷</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="http://road.ruanyifeng.com/2007/2007-12-12-joel-spolsky.html" target="_blank" rel="external">Joel Spolsky 在耶鲁大学的演讲</a> : 生活是自己的，好好工作，好好生活</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/channels&quot; target=&quot;_blank&quot;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>关于CTR预估的算法</title>
    <link href="http://shevacjs.com/2017/07/21/ctr/"/>
    <id>http://shevacjs.com/2017/07/21/ctr/</id>
    <published>2017-07-20T16:25:11.000Z</published>
    <updated>2017-07-21T11:17:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>偏实践应用, by chenjiansen</p>
<p><code>WARN</code>, 个人理解, 应该是多有谬误</p>
</blockquote>
<h3 id="关于CTR预估"><a href="#关于CTR预估" class="headerlink" title="关于CTR预估"></a>关于CTR预估</h3><p>在很多推荐系统里面，rank是一个关键的环节；从不同召回源获取到的数据, 按照哪种排序方式推荐给用户是一个关键的问题; 所谓的<code>CTR预估</code>就是希望我们能对输出的list 做一个合适的点击预估; 抽象起来其实就是算一个item被点击的概率或者可能性；</p>
<p>这个问题映射为机器学习里面的算法，现在常见的，使用广泛的主要有如下几个算法: </p>
<h3 id="LR"><a href="#LR" class="headerlink" title="LR"></a>LR</h3><p>映射为LR算法，可以理解为，就是要预测一个算法被判为正例(‘click’)的概率；由于LR算法的输出是一个概率值, 所以可以直接用来sort;</p>
<p>同时LR由于具有比较好的实现和调试；是早期大家使用较为广泛的Rank算法;</p>
<h2 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h2><h2 id="FM"><a href="#FM" class="headerlink" title="FM"></a>FM</h2><p>考虑到我们这特征输入的时候，可能有如下几个问题: </p>
<ul>
<li>数据稀疏</li>
<li>特征之间存在一些关联性</li>
</ul>
<p>传统的LR算法的$h_\theta(x) = \theta^Tx$，显然可能不适合此类数据，一个简单是思路是引入二次项，包含关联关系的预估, 如下 : </p>
<p>$$y(x) = w_0 + \sum_{i=1}^nw_ix_i  + \sum_{i=1}^n \sum_{j=i+1}^n w_{ij}x_ix_j$$</p>
<p>这个表达共有$\frac{n(n-1)}{2}$个模型参数,  我们需要训练这么多参数，但是该表达式存在如下问题: </p>
<ul>
<li>由于每个$w_{ij}$ 都需要大量$x_i$和$x_j$非零的情况下进行预估，但是样本数据本来就比较稀疏，这将导致整个样本训练的难度非常大</li>
</ul>
<p>一个思路是: “所有二次项参数$w_{ij}$可以组成一个对称阵 $W$，那么这个矩阵就可以分解为 $W=V^TV=VV^T$，$V$ 的第 $j$ 列便是第 $j$维特征的隐向量。换句话说，每个参数 $w_{ij}=<v_i,v_j>$” ，所以上面可以转化为 : </v_i,v_j></p>
<p>$$y(x) = w_0 + \sum_{i=1}^nw_ix_i  + \sum_{i=1}^n \sum_{j=i+1}^n <v_i, v_j="">x_ix_j$$</v_i,></p>
<p>其中: </p>
<ul>
<li>$v_i$ : 是一个k阶的隐向量$(k &lt;&lt; n)$</li>
<li>$&lt; , &gt; $代表点积</li>
</ul>
<p>为了求上面式子的优化解，我们继续拆分有: </p>
<p>$$\sum_{i=1}^n \sum_{j=i+1}^n <v_i, v_j="">x_ix_j = \frac{1}{2} \sum_{f=1}^k( (\sum_{i=1}^n v_{i,f} x_i)^2 - \sum_{i=1}^nv_{i,f}^2x_i^2)$$</v_i,></p>
<p>可以证明FM参数的训练模型是$0(kn)$</p>
<h3 id="FFM"><a href="#FFM" class="headerlink" title="FFM"></a>FFM</h3><p>基于FM，我们再分析他模型可能存在的问题:  </p>
<p>在FM模型里面，我们为每个特征定义一个隐向量$\overrightarrow{v_i}$ , $\overrightarrow{v_i}$ 的估计是基于和其他参数的$\overrightarrow{v_j}$的相关性计算而成；这里面就有一个假设，就是任何其他特征对改特征的影响是一致的；但有时候，这个假设不一定合适；所以，我们引入所谓的<code>Field-aware Factorization Machine</code></p>
<p>在FFM模型里面，每个特征都属于某个field; 所以隐向量不仅和特征有关，也和field有关; 假设样本的 n 个特征属于 f个field，那么FFM的二次项有 nf 个隐向量。而在FM模型中，每一维特征的隐向量只有一个。FM可以看作FFM的特例，是把所有特征都归属到一个field时的FFM模型。其方程可以表达为: </p>
<p>$$y(x) = w_0 + \sum_{i=1}^nw_ix_i  + \sum_{i=1}^n \sum_{j=i+1}^n <v_{i,f_j}, v_{j,f_i}="">x_ix_j$$</v_{i,f_j},></p>
<p>其中: </p>
<ul>
<li>$f_j$是第$j$个特征所属的<code>field</code></li>
<li>$v_{i,j}$ 表明特征$i$,和 $j$ ，对应的隐向量，其中 $ j \in {  1, 2, 3, … , f }$</li>
</ul>
<p>可以看到FFM模型，共有<code>nfk</code>个待学习参数, 其预测复杂度是 $O(kn^2)$</p>
<p>关于FM和FFM，本质上，都是希望寻找一个模型，能够表征不同特征直接的关联关系；<code>FFM</code>可以理解是在具体应用上面的一个折衷；具有较好的可适应性</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="FFM-如何落地应用"><a href="#FFM-如何落地应用" class="headerlink" title="FFM 如何落地应用"></a>FFM 如何落地应用</h4><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://www.zhihu.com/question/26154847" target="_blank" rel="external">广告ctr预估有什么值得推荐的论文？</a> : 好多资料</p>
</li>
<li><p><a href="http://tech.meituan.com/deep-understanding-of-ffm-principles-and-practices.html" target="_blank" rel="external">深入FFM原理与实践</a> : 关于<code>FM</code>和<code>FFM</code>的介绍，说的挺清楚的，主要是参考他理解的</p>
</li>
<li><p><a href="http://www.jianshu.com/p/005a4e6ac775" target="_blank" rel="external">GBDT：梯度提升决策树</a> : </p>
</li>
<li><p><a href="https://www.csie.ntu.edu.tw/~cjlin/libffm/" target="_blank" rel="external">LIBFFM: A Library for Field-aware Factorization Machines</a> : 关于FFM</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;偏实践应用, by chenjiansen&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WARN&lt;/code&gt;, 个人理解, 应该是多有谬误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关于CTR预估&quot;&gt;&lt;a href=&quot;#关于CTR预估&quot; class=&quot;h
    
    </summary>
    
    
      <category term="ml" scheme="http://shevacjs.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>关于AdaBoost&amp;Boosting</title>
    <link href="http://shevacjs.com/2017/07/21/boosting/"/>
    <id>http://shevacjs.com/2017/07/21/boosting/</id>
    <published>2017-07-20T16:25:11.000Z</published>
    <updated>2017-07-27T17:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>核心思想 : 用于将一些弱的分类器组合起来, 提升分类的性能;</p>
<h3 id="About-AdaBoost"><a href="#About-AdaBoost" class="headerlink" title="About AdaBoost"></a>About AdaBoost</h3><p>AdaBoost的算法归纳如下: </p>
<p>假设输入样本如下: </p>
<p>$${ (x_1, y_1,), … (x_n, y_n) }$$</p>
<p>且 $y \in  { -1, 1}$</p>
<p>且我们有弱分类器: ${k_1, k_2, .. k_L }$ ，则$k_j(x_i)$ 表示 $j$ 分类器对输入$x_i$的分类结果</p>
<p>则在$m-1$次迭代之后，我们的boost分类器可以表达如下: </p>
<p>$$C_{(m-1)}(x_i) = \alpha_1k_1(x_i) + … + \alpha_{m-1}k_{m-1}(x_i)$$</p>
<p>对第m次迭代后，我们的目标分类器的表达式可以表述为: </p>
<p>$$C_m(x_i) = C_{(m-1)}(xi) + \alpha_mk_m(x_i)$$</p>
<p>则问题转化为: 我们需要明确$\alpha_m$ 和 $k_m$的值 ;</p>
<p>设我们的损失函数定义如下: (<code>mark</code>)</p>
<p>$$E = \sum_{i=1}^n e^{-y_iC_m(x_i)}$$</p>
<p>令$w_i^{(1)} = 1, w_i^{(m)} = e^{-y_iC_{m-1}(x_i)}$, 则有: </p>
<p>$$ E = \sum_{i=1}^n w_i^{(m)} e^{-y_i\alpha_mk_m(x_i)}$$</p>
<p>由于$y_i*k_m(x_i) \in { -1, 1 }$,  则有:</p>
<p>$$ E = \sum _{yi=k_m(x_i)} w_i^{(m)}e^{-\alpha_m} + \sum _{yi \neq k_m(x_i)} w_i^{(m)}e^{\alpha_m} $$<br>$$ = \sum_{i=1}^N w_i^{(m)}e^{-\alpha_m} + \sum _{yi \neq k_m(x_i)} w_i^{(m)} (e^{\alpha_m}   - e^{-\alpha_m} )$$</p>
<p>从而可以看到我们关注的$k_m$对E的影响，仅表现在等式右侧,  其需要最小化$\sum _{yi \neq k_m(x_i)} w_i^{(m)}$ </p>
<p>在考虑$\alpha_m$的取值: </p>
<p>$$\frac{d E}{d \alpha_m} = - \sum _{yi=k_m(x_i)} w_i^{(m)}e^{-\alpha_m} + \sum _{yi \neq k_m(x_i)} w_i^{(m)}e^{\alpha_m}  $$</p>
<p>令其取值为0； 则有: </p>
<p>$$ \alpha_m = \frac{1}{2} \ln( \frac{\sum _{yi=k_m(x_i)} w_i^{(m)} }{\sum _{yi \neq k_m(x_i)} w_i^{(m)}}$$</p>
<p>令 $\epsilon_m =  {\sum _{yi \neq k_m(x_i)} w_i^{(m)}} / \sum_{i=1}^n w_i^{(m)}$, 则有 : </p>
<p>$$ \alpha_m = \frac{1}{2} \ln(\frac{1-\epsilon_m}{\epsilon_m})$$</p>
<p>上面就是我们最常见的算法；</p>
<p>概述如下：</p>
<p>At each iteration, choose the classifier $k_{m}$ which minimizes the total weighted error :</p>
<p>$$\sum_{y_i \neq k_m(x_i)}w_i^m $$</p>
<p>use this to calculate the error rate </p>
<p>$$\epsilon_m=\sum_{y_{i}\neq k_{m}(x_{i})}w_{i}^m/\sum_{i=1}^{N}w_{i}^m$$</p>
<p>use this to calculate the weight<br>$$\alpha_m = \frac{1}{2}\ln\left( \frac{1 - \epsilon_m}{\epsilon_m}\right)$$</p>
<p>and finally use this to improve the boosted classifier $C_NaN$ to $C_=C_NaN+\alpha _{m}k_{m}$<br>上面所述全来自wiki:  <a href="https://en.wikipedia.org/wiki/AdaBoost" target="_blank" rel="external">https://en.wikipedia.org/wiki/AdaBoost</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;核心思想 : 用于将一些弱的分类器组合起来, 提升分类的性能;&lt;/p&gt;
&lt;h3 id=&quot;About-AdaBoost&quot;&gt;&lt;a href=&quot;#About-AdaBoost&quot; class=&quot;headerlink&quot; title=&quot;About AdaBoost&quot;&gt;&lt;/a&gt;About
    
    </summary>
    
    
      <category term="ml" scheme="http://shevacjs.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>Supervised learning ： Linear Regression</title>
    <link href="http://shevacjs.com/2017/07/21/Supervised_Learning/"/>
    <id>http://shevacjs.com/2017/07/21/Supervised_Learning/</id>
    <published>2017-07-20T16:25:11.000Z</published>
    <updated>2017-07-21T11:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>chenjiansen from CS229 Lecture notes by Andrew Ng</p>
</blockquote>
<p>本文简单介绍下线性回归的基本思想和算法</p>
<h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>设有 :  </p>
<p>$$X = { x^{(1)},  x^{(2)}, … , x^{(m)} }$$<br>$$Y = { y^{(1)},   y^{(2)}, … , y^{(m)} }$$</p>
<p>X表示输入集合，Y则代表对应的输出，则对于任意$x^{(i)}$, 有$x^{(i)} = {x_1, x_2,x_3, … x_n }$, 也就是我们假设这个数据集有<code>m</code>个元素，每个元素是<code>n</code>个维度的</p>
<p>同时，目标预测函数满足线性回归，则我们的假设函数可以写成: </p>
<p>$$h_\theta(x) = \theta_0 + \theta_1x_1 + \theta_2x_2 + … + \theta_nx_n = \sum_{i=0}^{n}\theta_ix_i = \theta^TX$$</p>
<p>同时定义我们的<code>cost function</code> ，我们可以把他定义为<code>差的平方和</code>(具体后面会解释为什么可以这样定义) : </p>
<p>$$ J(\theta) = \frac{1}{2} \sum_{i=0}^m(h_{(\theta)}(x^{(i)}) - y^{(i)})^2$$</p>
<p>则我们的问题可以简化为, 给定数据集合$X, Y$,  求让$J(\theta)$ 最小的$\theta$</p>
<h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p>最优化算法有非常多，这里面主要介绍两种最优化算法，包括<code>梯度下降法</code>和<code>最小二乘法</code>，下面分别说明 : </p>
<h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>考虑到上面定义的cost function，梯度下降法在这边的应用可以直接的表示为 : </p>
<p>$$ \theta_j : \theta_j - \alpha \frac{\partial}{\partial\theta} J(\theta)$$</p>
<p>其中$\alpha$表示下降的速度，$ j = { 0, 1, 2, … , n}$</p>
<p>下面我们来求解上面那个方程，简单起见，我们考虑只有一个样本的情况，如下: </p>
<p>$$ \frac{\partial}{\partial \theta} J(\theta) = \frac{1}{2} \ast 2 (h_{(\theta)}(x^{(i)}) - y^{(i)})  \ast \frac{\partial}{\partial\theta}{(h_{(\theta)}(x^{(i)} -y^{(i)})}$$</p>
<p>$$ = (h_{(\theta)}(x^{(i)}) - y^{(i)}) \ast \frac{\partial}{\partial\theta}{(\theta^TX -y^{(i)})} $$</p>
<p>$$ = (h_{(\theta)}(x^{(i)}) - y^{(i)}) \ast  x_j$$</p>
<p>也就是可以表示为:<br>$$ \theta_j =  \theta_j + \alpha \ast (h_{\theta}(x^{(i)}) - y^{(i)}) \ast  x_j $$</p>
<p>则一般在实际应用的时候，可以有两个办法：</p>
<p>第一个办法称为<code>batch gradient descent</code>,  大概算法如下 : </p>
<p>Repeat until convergence {<br>$$\theta_j = \theta_j + \alpha \sum_{i=0}^{m}( y^{(i)} - h_{\theta}(x^{(i)}) $$<br>[ for every j ]<br>}</p>
<p>第二个办法成为<code>incremental gradient descent</code> , 大概形式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Loop &#123;</div><div class="line">	for i = 1 to m &#123;</div></pre></td></tr></table></figure></p>
<p>$        \theta_j = \theta_j + \alpha \ast ( y^{(i)} - h_{\theta}(x^{(i)})  $ ( for every j)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到: </p>
<ul>
<li><p>批量梯度下降: 最小化所有训练样本的损失函数，使得最终求解的是全局的最优解，即求解的参数是使得风险函数最小，但是对于大规模样本问题效率低下；每迭代一次需要的计算量约为<code>m*n^2</code>，如果m很大的话，性能上面会有比较大的压力</p>
</li>
<li><p>随机梯度下降 : 最小化每条样本的损失函数，虽然不是每次迭代得到的损失函数都向着全局最优方向， 但是大的整体的方向是向全局最优解的，最终的结果往往是在全局最优解附近，适用于大规模训练样本情况。</p>
</li>
</ul>
<h4 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h4><p>上面的优化问题，也可以用最小二乘法求解，依照输入的情况，我们定义如下几个变量 :</p>
<ul>
<li>矩阵 A :  m*n矩阵， 行向量 $x^{(j)}  $ 代表一个样本 </li>
<li>向量$\overrightarrow{\theta}$ : n*1 向量，也就是我们要求解的参数向量</li>
<li>向量 $\overrightarrow{y}$ :  m*1 向量，每个元素$y^{(i)}$, 对应着输入样本$x^{(i)}$的值</li>
</ul>
<p>则我们的问题可以转换为，求解向量$\overrightarrow{\theta}$, 使得 : </p>
<p>$$ A \overrightarrow {\theta} = \overrightarrow{y} $$</p>
<p>有最优解或者有解；无论矩阵A是否可逆那个，我们知道最小二乘的解为 (具体证明下面另述):</p>
<p>$$ \overrightarrow {\theta} = (A^TA)^{(-1)} A^T \overrightarrow{y} $$ </p>
<blockquote>
<p>个人理解: 缺点应该是整体的计算量会非常大</p>
</blockquote>
<h3 id="概率解释"><a href="#概率解释" class="headerlink" title="概率解释"></a>概率解释</h3><p>上面说到，我们使用<code>least-squares function</code> 来定义我们的cost function；下面简单说明，如此定义的合理性；</p>
<p>首先，对于预测结果和实际结果的关系，我们可以用如下式子说明 : </p>
<p>$$ y^{(i)} = \theta^T x^{(i)} + \epsilon^{(i)}$$</p>
<p>其中 $\epsilon^{(i)}$ 代表着我们的预估结果误差；</p>
<p>现在我们假设$\epsilon^{(i)}$ 满足正态分布，也就是$\epsilon^{(i)} \sim \aleph (0, \sigma^2)$ , 则有: </p>
<p>$$ p(y^{(i)} |  x^{(i)}, \theta ) = \frac{1}{\sqrt{2\pi}\sigma} exp (-\frac{(y^{(i)} - \theta^Tx^{(i)})^2}{2\sigma^2})$$</p>
<p>同样，现在我们面临的问题是，给定了集合${X, Y}$ , 需要预估一个合理的$\theta$,  所以我们定义似然函数如下: </p>
<p>$$ L(\theta) = L(\theta; X, \overrightarrow{y}) = p(\overrightarrow{y} | X; \theta)$$</p>
<p>如上，我们考虑到所有的$\epsilon^{(i)}$ 是独立的，所以有 ： </p>
<p>$$L(\theta) = \prod_{i=1}^{m} \frac{1}{\sqrt{2\pi}\sigma} exp (-\frac{(y^{(i)} - \theta^Tx^{(i)})^2}{2\sigma^2}) $$</p>
<p>现在就是要求这个函数的最大值, 我们求解<code>log likehood</code>的情况: </p>
<p>$$ l(\theta) = log L(\theta) = log \prod_{i=1}^{m} \frac{1}{\sqrt{2\pi}\sigma} exp (-\frac{(y^{(i)} - \theta^Tx^{(i)})^2}{2\sigma^2})  $$</p>
<p>$$ = \sum_{i=0}^{m} log \frac{1}{\sqrt{2\pi}\sigma} exp (-\frac{(y^{(i)} - \theta^Tx^{(i)})^2}{2\sigma^2})$$</p>
<p>$$ = m  \ast log \frac{1}{\sqrt{2\pi}\sigma}  - \frac{1}{\sigma^2} \ast \frac{1}{2} \sum_{i=1}^{m}(y^{(i)} - \theta^Tx^{(i)})^2$$</p>
<p>也就是令 $\frac{1}{2} \sum_{i=1}^{m}(y^{(i)} - \theta^Tx^{(i)})^2 $为最小值的时候其概率最大； 正好对应着我们定义的<code>cost function</code></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.cnblogs.com/maybe2030/p/4751804.html" target="_blank" rel="external">常见的几种最优化方法</a> : 几个常见的优化算法，说的非常详细</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;chenjiansen from CS229 Lecture notes by Andrew Ng&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文简单介绍下线性回归的基本思想和算法&lt;/p&gt;
&lt;h3 id=&quot;基本定义&quot;&gt;&lt;a href=&quot;#基本定义&quot;
    
    </summary>
    
    
      <category term="ml" scheme="http://shevacjs.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>About SVM</title>
    <link href="http://shevacjs.com/2017/07/21/svm/"/>
    <id>http://shevacjs.com/2017/07/21/svm/</id>
    <published>2017-07-20T16:25:11.000Z</published>
    <updated>2017-07-21T09:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>SVM的核心思想是，通过构造一个超平面将空间中的数据进行划分，可以用于分类，回归或者其他任务;</p>
<p>一个直观的理解是: 我们构造的平面, 其距离样本的点距离越远越好;</p>
<p>而对于线性不可分的情况，我们则可以通过构造映射函数，将其映射到高维空间, 变成一个线性可分的模型</p>
<p>下面具体介绍这些思路的数学演绎过程</p>
<h2 id="数学演绎"><a href="#数学演绎" class="headerlink" title="数学演绎"></a>数学演绎</h2><p>设我们的<code>输入样本</code>为: </p>
<p>$$ { (x_1,y_1), … , (x_N, y_N)}$$</p>
<p>其中: </p>
<ul>
<li>$x_i \in R^n $</li>
<li>$y_i \in { -1, 1 }$</li>
</ul>
<p>首先考虑<code>线性可分</code>的情况;  此时设我们要求解的超平面为: </p>
<p>$$\textbf{w}^T\textbf{x} + b = 0 $$</p>
<p>则有: </p>
<h3 id="间隔定义"><a href="#间隔定义" class="headerlink" title="间隔定义"></a>间隔定义</h3><p>我们定义函数间隔如下: </p>
<p>$$\widehat{\gamma}_i = y_i (w \centerdot x + b )$$</p>
<p>定义几何间隔如下 :<br>$$\gamma_i = y_i (\frac{w}{|w|} \centerdot x + \frac{b}{|w|})$$</p>
<p>可以看到几何间隔就是在$|w| = 1$ 时候的函数间隔，也是代表这个点到平面的实际几何距离；也有如下关系: </p>
<p>$$ \gamma = \frac{\widehat {\gamma}}{| w |}$$</p>
<h3 id="最优值定义"><a href="#最优值定义" class="headerlink" title="最优值定义"></a>最优值定义</h3><p>我们可以理解需要获取一个最大几何间隔的分离超平面(<code>为什么</code> ? ), 表针为: </p>
<p>$$ \max \limits_{w,b} \gamma  \\ s.t. \ \ \  y_i (\frac{w}{|w|} \centerdot x + \frac{b}{|w|}) \geqslant  \gamma $$</p>
<p>用函数间隔替换如下: </p>
<p>$$ \max \limits_{w,b} \frac{\widehat {\gamma}}{| w |}   \\ s.t. \ \ \  y_i (w \centerdot x + b ) \geqslant  \widehat{\gamma} $$</p>
<p>可以令 $\widehat{\gamma} = 1$,  则有: </p>
<p>$$ \max \limits_{w,b} \frac{1}{| w |}   \\ s.t. \ \ \  y_i (w \centerdot x + b ) \geqslant  1 $$</p>
<p>也就是: </p>
<p>$$ \min \limits_{w,b} \frac{1}{2}{| w |}^2   \\ s.t. \ \ \quad  y_i (w \centerdot x + b ) \geqslant  1 \quad i \in { 1, 2, … , N }$$</p>
<p><code>也就是可以理解为</code> :  我们需要寻找合适的$w, b$，对应着一个超平面，使得所有的样本点到其的函数间隔都大于1；同时使得$|w|$最小</p>
<p>上述方程的一个优化方法是:  通过对偶方法构造原来不等式的等价最优解（也就是拉格朗日对偶函数，具体太复杂了，就(也不懂)不展开了) ，总之如上的约束条件的等价对偶问题为:</p>
<p>$$ \min \limits_{\alpha} \frac{1}{2} \sum_{i=1}^{N}\sum_{i=1}^{N} \alpha_i \alpha_j y_iy_j - \sum_{i=1}^N\alpha_i \\ s.t. \quad \sum_{i=1}^{N} \alpha_iy_i = 0 \\ a_i (y_i(w*x_i + b) - 1) =0 \\ \\ w = \sum_{i=1}^{N} \alpha_i x_i y_i \\ a_i \geqslant 0 \quad i \in { 1, 2, … , N } $$<br>(可以忽略$\alpha_i$ 为什么会出现)</p>
<p>这里我们称令$a_i &gt; 0$ 成立的样本点为<code>支持向量</code>, 依照上面的定义，当$a_i &gt; 0 $时，则有: </p>
<p>$$ y_i(w*x_i + b) - 1 =0$$</p>
<p>也就是$x_i$ 一定是在间隔的边界</p>
<h3 id="线性不可分情况"><a href="#线性不可分情况" class="headerlink" title="线性不可分情况"></a>线性不可分情况</h3><p>考虑到现实生活中，存在一些异常或者脏数据，此时我们可以每个样本点引入一个松弛变量$\xi_i$,  则约束条件可以变为 : </p>
<p>$$ y_i (w \centerdot x_i + b ) \geqslant  1-\xi_i \quad i \in { 1, 2, … , N } $$</p>
<p>同时目标函数可以变成: </p>
<p>$$ \min \limits_{w,b} \frac{1}{2}{| w |}^2 + C \sum_{i=1}^{N} \xi_i$$</p>
<p>其中 : C代表着惩罚系数，需要视具体的业务场景而定 ；C值越大，表明对误差的惩罚增大，反之则减小；</p>
<p>忽略一些很复杂的计算，可以得到对偶问题如下: </p>
<p>$$ \min \limits_{\alpha} \frac{1}{2} \sum_{i=1}^{N}\sum_{i=1}^{N} \alpha_i \alpha_j y_iy_j - \sum_{i=1}^N\alpha_i \\ s.t. \quad \sum_{i=1}^{N} \alpha_iy_i = 0 \\  0 \leqslant a_i \leqslant C \quad i \in { 1, 2, … , N } $$</p>
<p>从上面可以分析出: </p>
<ul>
<li>$w$是确定且唯一的</li>
<li>$b$的解并不唯一</li>
</ul>
<h3 id="核函数及其应用"><a href="#核函数及其应用" class="headerlink" title="核函数及其应用"></a>核函数及其应用</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA" target="_blank" rel="external">支持向量机</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Support_vector_machine" target="_blank" rel="external">Support vector machine</a> </p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;SVM的核心思想是，通过构造一个超平面将空间中的数据进行划分，可以用于分类，回归或者其他任务;&lt;/p&gt;
&lt;p&gt;一个直观的理解是: 我们构造的
    
    </summary>
    
    
      <category term="ml" scheme="http://shevacjs.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>关于贝叶斯分类</title>
    <link href="http://shevacjs.com/2017/07/21/bayes/"/>
    <id>http://shevacjs.com/2017/07/21/bayes/</id>
    <published>2017-07-20T16:25:11.000Z</published>
    <updated>2017-07-21T11:17:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>by chenjiansen</p>
</blockquote>
<h3 id="判定模型与生成模型"><a href="#判定模型与生成模型" class="headerlink" title="判定模型与生成模型"></a>判定模型与生成模型</h3><p>判定模型的理论基础 :</p>
<p>$$ y = p(y | x : \theta) $$</p>
<p>生成模型</p>
<p>$$ y = p( y | x) = p(x,y) / p(x) = p(x|y) p(y) / p(x) $$</p>
<p>此时我们会考虑使用$p(x|y)p(y)$ 来评估$p(y|x)$ ，是一个联合概率的考虑</p>
<h3 id="Native-Bayes"><a href="#Native-Bayes" class="headerlink" title="Native Bayes"></a>Native Bayes</h3><p>考虑判断一个邮件是否是垃圾邮件；我们设定如下的模型: </p>
<ul>
<li>$x$ 为输入向量；其中$x_i^{(j)}$ 表示第$i$个样本的第$j$维的特征值,  任何一个邮件可以用如下的形式表示 : </li>
</ul>
<p>$$x=\left[ \begin{array}{cc} 0 &amp; a_0\\ 1 &amp; a_1 \\ 1 &amp; a_2\\ 0  &amp; a_3 \\ 1 &amp; a_4 \\ .. &amp; .. \end{array} \right]$$</p>
<p>其中第$i$行代表着单词$a_i$是否出现在这个邮件里面；$|A|$ 表示着词汇量的个数，也是也是输入特征$x$的维度</p>
<ul>
<li>$y$为输入结果,  这里面设定 $y=1$为垃圾邮件，否则$y=0$</li>
</ul>
<p>这里，我们准备使用<code>朴素贝叶斯</code>的方法解决分类问题，如上面生成模型的说明, 我们的求解问题转化为:</p>
<p>$ p(y|x) = p(x|y) p(y) / p(x) $</p>
<p>我们约定如下: </p>
<p>$$\phi_{i|y=1} = p(x_i = 1 | y = 1)$$<br>$$\phi_{i|y=0} = p(x_i = 1 | y = 0)$$<br>$$\phi_y = p(y = 1) $$</p>
<p>则有 : </p>
<p>$$ \phi_{i|y=1} = \frac{\sum_{i=0}^{m} 1 {x_j^{(i)} = 1 \ and \  y^{(i)} = 1}}{\sum_{i=0}^{m} 1 { y^{(i)} = 1}}$$</p>
<p>其他的$\phi_{i|y=0} , \phi_y$ 同理易得</p>
<p>则在样本输入${x^{(i)}, y^{(i)}}, i = 0, 1, 2 …$ 的情况下；对于上面的分类问题，我们可以先求解:</p>
<p>$$ P(y=1\ |x) = P(x|y=1) P(y=1) / P(x) \\ = \frac{ (\prod_{i=0}^{m}P(x_i\ |y = 1)) P(y=1)}{ (\prod_{i=0}^{m}P(x_i\ |y = 1)) + (\prod_{i=0}^{m}P(x_i\ |y = 0))}$$</p>
<p>上面的$\prod$ 展开是依赖于所谓的<code>贝叶斯假设</code>， 也就是对于给定的结果$y$, 事件$x_i$相对于$y$是独立分布的, 也就是有: </p>
<p>$$P(x_1,x_2,…,x_n\ |\ y) = p(x_1|y)p(x_2|y,x_1)….p(x_n|y,x_1,x_2, …) \\ = p(x_1|y)p(x_2|y) … p(x_n|y) \\ = \prod_{i=1}^{n} p(x_i|y)$$</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://guangchun.wordpress.com/2011/10/13/ml-bayes-map/" target="_blank" rel="external">参数估计：最大似然、贝叶斯与最大后验</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;by chenjiansen&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;判定模型与生成模型&quot;&gt;&lt;a href=&quot;#判定模型与生成模型&quot; class=&quot;headerlink&quot; title=&quot;判定模型与生成模型&quot;&gt;&lt;/a&gt;判定模型与生成模型&lt;
    
    </summary>
    
    
      <category term="ml" scheme="http://shevacjs.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170716</title>
    <link href="http://shevacjs.com/2017/07/16/20170716/"/>
    <id>http://shevacjs.com/2017/07/16/20170716/</id>
    <published>2017-07-16T06:15:30.000Z</published>
    <updated>2017-07-21T06:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://www.microsoft.com/en-us/seeing-ai/" target="_blank" rel="external">Seeing AI</a> : 微软新出来的app, “A free app that narrates the world around you. Designed for the low vision community, this research project harnesses the power of AI to describe people, text and objects”</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=14769762" target="_blank" rel="external">Redis 4.0 (groups.google.com)</a> : 感觉有不少特性值得关注，个人觉得有兴趣的包括:<code>PSYNC2</code>, <code>Redis modules</code>, <code>LFU eviction algorithm</code> , <code>MEMORY DOCTOR</code> 以及 <code>Active memory defragmentation</code></p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://paragonie.com/book/pecl-libsodium" target="_blank" rel="external">Using Libsodium in PHP Projects</a> : LibSodium是一个php的安全基础库，会成为PHP 7.2的标准扩展，对于安全的php编程意义重大</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659599404&amp;idx=1&amp;sn=12c9a9da66286e398e5fd48fe338ad48" target="_blank" rel="external">携程的Web漏洞扫描系统实现细节</a> : 可以了解下, 总感觉很多关键点没说清楚，比如流量重放的脏数据问题,  数据镜像方案等(有点重)</p>
</li>
<li><p><a href="http://karpathy.github.io/neuralnets/" target="_blank" rel="external">Hacker’s guide to Neural Networks</a> : 关于深度学习的介绍，先mark</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/seeing-ai/&quot; targ
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170709</title>
    <link href="http://shevacjs.com/2017/07/09/20170709/"/>
    <id>http://shevacjs.com/2017/07/09/20170709/</id>
    <published>2017-07-09T06:15:30.000Z</published>
    <updated>2017-07-21T06:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://www.computer.org/csdl/mags/ic/2017/03/mic2017030012.html" target="_blank" rel="external">Two Decades of Recommender Systems at Amazon.com</a> : AWS关于他们推荐系统的介绍，可以好好学习</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://nginx.org/en/docs/dev/development_guide.html#introduction" target="_blank" rel="external">Nginx Development guide</a> : Nginx官方的开发手册, 先mark</p>
</li>
<li><p><a href="https://blog.haschek.at/2017/how-to-defend-your-website-with-zip-bombs.html" target="_blank" rel="external">How to defend your website with ZIP bombs</a> : 通过<code>zip boom</code> 来应对一些恶意的扫描</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="https://blog.acolyer.org/2017/06/29/twitter-heron-towards-extensible-streaming-engines/" target="_blank" rel="external">Twitter Heron: towards extensible streaming engines</a> : Heron是一个Twritter开源的实时流解决方案，相比于storm/spark, 其特点是可插拔的组件架构, 感觉整个设计理念可以学习下; 同时还可以关注<a href="https://blog.acolyer.org/2017/06/30/dhalion-self-regulating-stream-processing-in-heron/" target="_blank" rel="external">Dhalion: self-regulating stream processing in Heron</a> 另外一个系统，目标是致力于让Heron变成一个<code>self-regulating</code>系统</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://startupsventurecapital.com/essential-cheat-sheets-for-machine-learning-and-deep-learning-researchers-efb6a8ebd2e5" target="_blank" rel="external">Essential Cheat Sheets for Machine Learning and Deep Learning Engineers</a> : 好几个cheat sheets, 感觉挺不错的</p>
</li>
<li><p><a href="https://joshondesign.com/2017/07/02/hire_old_programmer" target="_blank" rel="external">Five Reasons Why You Should Hire an Old Programmer</a> : 可以当做自己需要去培养的能力，包括<code>Experience</code>, <code>Judgement</code>, <code>Deep Knowledge</code>, <code>Wide Knowledge</code> 和 <code>Communication Skills</code></p>
</li>
<li><p><a href="https://www.kernel.org/doc/html/v4.10/process/coding-style.html" target="_blank" rel="external">Linux kernel coding style</a> : linux内核的编码风格, 大部分的编码方式自己还是比如认同了；除了括号的换行要求</p>
</li>
<li><p><a href="https://www.leiphone.com/news/201707/86tSZrqgcVFXEfnc.html" target="_blank" rel="external">谷歌大神Jeff Dean对话Talking Machine：我们要推动机器学习再上一层楼</a> : 佩服的人</p>
</li>
<li><p><a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl" target="_blank" rel="external">如何掌握所有的程序语言</a> : 王垠的新文章，关于如何学习所有语言的, 可以试试”自己实现所有的语言特性”, 相关推荐的文章包括<a href="https://www.zhihu.com/question/62097662" target="_blank" rel="external">知乎: 如何评价王垠新博文《如何掌握所有的程序语言》？</a> 以及 <a href="http://www.yinwang.org/blog-cn/2017/05/23/kotlin" target="_blank" rel="external">Kotlin 和 Checked Exception</a> 介绍checked exception</p>
</li>
<li><p><a href="https://medium.com/@matelabs_ai/public-data-sets-use-these-to-train-machine-learning-models-on-mateverse-4dda18a27851" target="_blank" rel="external">Public Data Sets: Use these to train Machine Learning models on Mateverse</a> : 推荐的一些公开的dataset, mark下</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.computer.org/csdl/mags/ic/2017/03/mic20
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
</feed>
