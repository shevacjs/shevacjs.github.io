<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shevacjs home</title>
  <subtitle>自强不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shevacjs.com/"/>
  <updated>2018-01-07T07:08:49.000Z</updated>
  <id>http://shevacjs.com/</id>
  
  <author>
    <name>shevacjs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx 1.13.8 版本说明</title>
    <link href="http://shevacjs.com/2018/01/03/nginx_1_13_8/"/>
    <id>http://shevacjs.com/2018/01/03/nginx_1_13_8/</id>
    <published>2018-01-03T07:17:29.000Z</published>
    <updated>2018-01-07T07:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原始feature说明"><a href="#原始feature说明" class="headerlink" title="原始feature说明"></a>原始feature说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*) Feature: now nginx automatically preserves the CAP_NET_RAW capability</div><div class="line">   in worker processes when using the &quot;transparent&quot; parameter of the</div><div class="line">   &quot;proxy_bind&quot;, &quot;fastcgi_bind&quot;, &quot;memcached_bind&quot;, &quot;scgi_bind&quot;, and</div><div class="line">   &quot;uwsgi_bind&quot; directives.</div><div class="line"></div><div class="line">*) Feature: improved CPU cache line size detection.</div><div class="line">   Thanks to Debayan Ghosh.</div><div class="line"></div><div class="line">*) Feature: new directives in vim syntax highlighting scripts.</div><div class="line">   Thanks to Gena Makhomed.</div><div class="line">.....</div></pre></td></tr></table></figure>
<p>这个我们主要关注<code>feature1</code>和<code>feature2</code>, 即是:</p>
<ul>
<li>对<code>xxx_bind</code>的指令支持<code>CAP_NET_RAW</code>方式</li>
<li>改进对cpu cache line长度的检测</li>
</ul>
<p>我们分布研究这两个问题的背景以及nginx的解决方案</p>
<h3 id="关于xxx-bind"><a href="#关于xxx-bind" class="headerlink" title="关于xxx_bind"></a>关于xxx_bind</h3><p>我们知道存在类似于<code>proxy_bind</code>, <code>fastcgi_bind</code>, <code>memcached_bind</code>之类的nginx指令，其重要是干嘛的呢? 如下是<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_bind" target="_blank" rel="external">proxy_bind</a>的官方说明(精简):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Syntax:    proxy_bind address [transparent] | off;</div><div class="line">Default:    —</div><div class="line">Context:    http, server, location</div><div class="line"></div><div class="line">Makes outgoing connections to a proxied server originate from the specified local IP address with an optional port (1.11.2). Parameter value can contain variables (1.3.12). The transparent parameter (1.11.0) allows outgoing connections to a proxied server originate from a non-local IP address, for example, from a real IP address of a client:</div><div class="line"></div><div class="line">&gt;&gt;&gt; proxy_bind $remote_addr transparent;</div><div class="line"></div><div class="line">In order for this parameter to work, it is usually necessary to run nginx worker processes with the superuser privileges. On Linux it is not required (1.13.8) as if the transparent parameter is specified, worker processes inherit the CAP_NET_RAW capability from the master process. It is also necessary to configure kernel routing table to intercept network traffic from the proxied server.</div></pre></td></tr></table></figure>
<p>如上, 我们可以总结为<code>proxy_bind</code>实现代理时，和<code>upstream</code>交互，其使用的ip/port是可以调整的，具体包括:</p>
<ol>
<li>绑定本地的其他ip地址 </li>
<li>绑定一个非本地的ip地址 : 这个需要加入<code>transparent</code>参数</li>
</ol>
<p>方法2可以实现真正的透明代理, 不过要具体实现这个功能，需要调整的地方还很多(要保障返回数据报地址是OK的)，具体可以参看nginx的官方blog的文章<a href="https://www.nginx.com/blog/ip-transparency-direct-server-return-nginx-plus-transparent-proxy/" target="_blank" rel="external">IP Transparency and Direct Server Return with NGINX and NGINX Plus as Transparent Proxy</a></p>
<p>回到这次的版本升级的点，可以想像，如果一个机器A想伪造机器B的IP发送请求，是需要一些权限控制的(想想大家之前写的ping程序:) ), 这个传统上面是需要<code>root</code>权限的。显然，这个方案的缺点是，整个nginx都需要以<code>root</code>权限去执行，在安全性和隐私方案是存在风险的。随之，在新的内核和安卓系统强调更多是<a href="http://man7.org/linux/man-pages/man7/capabilities.7.html" target="_blank" rel="external">Capability</a>机制</p>
<p>所以, nginx这次升级的策略就是, 如果存在这个capability，就无需要求root权限了，具体代码如下(添加些许注释): </p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_PR_SET_KEEPCAPS &amp;&amp; NGX_HAVE_CAPABILITIES)</span></div><div class="line"><span class="comment">/*</span></div><div class="line">* 使用prctl(PR_SET_KEEPCAPS, xxx)的效果是保证即便切换用户, 其capabilities依旧保留</div><div class="line">*/</div><div class="line">        <span class="keyword">if</span> (ccf-&gt;transparent &amp;&amp; ccf-&gt;user) &#123;</div><div class="line">            <span class="keyword">if</span> (prctl(PR_SET_KEEPCAPS, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</div><div class="line">                ngx_log_error(NGX_LOG_EMERG, cycle-&gt;<span class="built_in">log</span>, ngx_errno,</div><div class="line">                              <span class="string">"prctl(PR_SET_KEEPCAPS, 1) failed"</span>);</div><div class="line">                <span class="comment">/* fatal */</span></div><div class="line">                <span class="built_in">exit</span>(<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_CAPABILITIES)</span></div><div class="line">        <span class="keyword">if</span> (ccf-&gt;transparent &amp;&amp; ccf-&gt;user) &#123;</div><div class="line">            <span class="class"><span class="keyword">struct</span> __<span class="title">user_cap_data_struct</span>    <span class="title">data</span>;</span></div><div class="line">            <span class="class"><span class="keyword">struct</span> __<span class="title">user_cap_header_struct</span>  <span class="title">header</span>;</span></div><div class="line"></div><div class="line">            ngx_memzero(&amp;header, <span class="keyword">sizeof</span>(struct __user_cap_header_struct));</div><div class="line">            ngx_memzero(&amp;data, <span class="keyword">sizeof</span>(struct __user_cap_data_struct));</div><div class="line"></div><div class="line">            header.version = _LINUX_CAPABILITY_VERSION_1;</div><div class="line">            data.effective = CAP_TO_MASK(CAP_NET_RAW);</div><div class="line">            data.permitted = data.effective;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">* 设置用户的CAP_NET_RAW权限</div><div class="line">*/</div><div class="line">            <span class="keyword">if</span> (syscall(SYS_capset, &amp;header, &amp;data) == <span class="number">-1</span>) &#123;</div><div class="line">                ngx_log_error(NGX_LOG_EMERG, cycle-&gt;<span class="built_in">log</span>, ngx_errno,</div><div class="line">                              <span class="string">"capset() failed"</span>);</div><div class="line">                <span class="comment">/* fatal */</span></div><div class="line">                <span class="built_in">exit</span>(<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="关于CPU-Cache-Line"><a href="#关于CPU-Cache-Line" class="headerlink" title="关于CPU Cache Line"></a>关于CPU Cache Line</h3><p>关于CPU Cache Line，我们分成三个细化的问题进行研究:</p>
<ol>
<li>CPU Cache 是什么，有什么作用/影响?</li>
<li>Nginx如何实现对CPU Cache Line Size的检测?</li>
<li>Nginx如何应用CPU Cache?</li>
</ol>
<p>下面依次分析</p>
<h4 id="CPU-Cache-作用"><a href="#CPU-Cache-作用" class="headerlink" title="CPU Cache 作用"></a>CPU Cache 作用</h4><p><a href="http://cenalulu.github.io/linux/all-about-cpu-cache/" target="_blank" rel="external">关于CPU Cache – 程序猿需要知道的那些事</a>和<a href="http://www.aristeia.com/TalkNotes/ACCU2011_CPUCaches.pdf" target="_blank" rel="external">CPU Caches and Why You Care</a>这两篇文章对Cpu Cache有非常详细和深刻的说明，可以深入研究之, 简而言之, CPU Cache是一个CPU的硬件Cache，如何合理的利用其特性，可以极大提升程序的性能, 如下是<a href="http://www.aristeia.com/TalkNotes/ACCU2011_CPUCaches.pdf" target="_blank" rel="external">CPU Cache的示意图</a><br>:<br><img src="/images/cpu_cache.png" alt="CPU Cache"></p>
<p>具体地，CPU CACHE是以<code>CPU CACHE LINE</code>为粒度进行组织管理的，不同的cpu其size会有所不同，但一般都是32/64/128位等; 基于次，我们很自然而然的想到，如果要充分利用CPU CACHE，我们的内存地址最好和<code>CPU CACHE LINE SIZE</code>对齐, 这样可以保障较好的cache命中率和cache利用率</p>
<h4 id="Nginx对CPU-CACHE-LINE-SIZE的检测"><a href="#Nginx对CPU-CACHE-LINE-SIZE的检测" class="headerlink" title="Nginx对CPU CACHE LINE SIZE的检测"></a>Nginx对CPU CACHE LINE SIZE的检测</h4><p>这方面，就不详述其推理过程了，直接结论如下(有谬误之处，<a href="mailto:shevacjs@qq.com" target="_blank" rel="external">还请告知</a>) :</p>
<ul>
<li>在<code>configure</code>阶段, 通过获取CPU信息设置<code>NGX_CPU_CACHE_LINE</code>宏变量，在<code>auto/cc/gcc(clang)</code>里面都会有此类的代码，比如:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## file: auto/cc/gcc</span></div><div class="line"><span class="keyword">case</span> <span class="variable">$CPU</span> <span class="keyword">in</span></div><div class="line">    pentium)</div><div class="line">        <span class="comment"># optimize for Pentium and Athlon</span></div><div class="line">        CPU_OPT=<span class="string">"-march=pentium"</span></div><div class="line">        NGX_CPU_CACHE_LINE=32</div><div class="line">    ;;</div></pre></td></tr></table></figure>
<ul>
<li>在编译阶段, 验证是否支持<code>sysconf(_SC_LEVEL1_DCACHE_LINESIZE)</code>这个特性，如果支持, 则开启宏<code>NGX_HAVE_LEVEL1_DCACHE_LINESIZE</code>, 大概代码如下:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">file: ./src/os/unix/ngx_posix_init.c</div><div class="line">如果宏 NGX_HAVE_LEVEL1_DCACHE_LINESIZE 设置，就通过sysconf获取*/</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HAVE_LEVEL1_DCACHE_LINESIZE)</span></div><div class="line">    size = sysconf(_SC_LEVEL1_DCACHE_LINESIZE);</div><div class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">        ngx_cacheline_size = size;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<ul>
<li>在运行启动时候获取(编译和运行的机器可能不一样), 所以还需要主动获取，这个里面主要使用<a href="https://en.wikipedia.org/wiki/CPUID#EAX=1:_Processor_Info_and_Feature_Bits" target="_blank" rel="external">cpuid</a>这个指令获取具体的CPU信息, 简要代码如下:</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">file: ./src/os/unix/ngx_posix_init.c 获取信息</div><div class="line">*/</div><div class="line">ngx_cpuinfo();</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">file: src/core/ngx_cpuinfo.c</div><div class="line">通过汇编指令获取cpu信息，结果存储在 ngx_cacheline_size</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> ngx_inline <span class="keyword">void</span></span></div><div class="line"><span class="title">ngx_cpuid</span><span class="params">(<span class="keyword">uint32_t</span> i, <span class="keyword">uint32_t</span> *buf)</span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * we could not use %ebx as output parameter if gcc builds PIC,</div><div class="line">     * and we could not save %ebx on stack, because %esp is used,</div><div class="line">     * when the -fomit-frame-pointer optimization is specified.</div><div class="line">     */</div><div class="line"></div><div class="line">    __asm__ (</div><div class="line"></div><div class="line">    <span class="string">"    mov    %%ebx, %%esi;  "</span></div><div class="line"></div><div class="line">    <span class="string">"    cpuid;                "</span></div><div class="line">    <span class="string">"    mov    %%eax, (%1);   "</span></div><div class="line">    <span class="string">"    mov    %%ebx, 4(%1);  "</span></div><div class="line">    <span class="string">"    mov    %%edx, 8(%1);  "</span></div><div class="line">    <span class="string">"    mov    %%ecx, 12(%1); "</span></div><div class="line"></div><div class="line">    <span class="string">"    mov    %%esi, %%ebx;  "</span></div><div class="line"></div><div class="line">    : : <span class="string">"a"</span> (i), <span class="string">"D"</span> (buf) : <span class="string">"ecx"</span>, <span class="string">"edx"</span>, <span class="string">"esi"</span>, <span class="string">"memory"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="NGINX如何应用CPU-CACHE-LINE"><a href="#NGINX如何应用CPU-CACHE-LINE" class="headerlink" title="NGINX如何应用CPU CACHE LINE"></a>NGINX如何应用CPU CACHE LINE</h4><p>如上，nginx知道<code>cpu cache line size</code>之后，要想办法尽量的把申请的内存地址和<code>cpu cache line size</code>对齐，一个重要的示例就是<code>CRC32</code>的实现，具体如下:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file: ./src/core/ngx_crc32.c</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_int_t</span> ngx_crc32_table_init(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//申请空间，注意多申请了 ngx_cacheline_size</span></div><div class="line">    p = ngx_alloc(<span class="number">16</span> * <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>) + ngx_cacheline_size, ngx_cycle-&gt;<span class="built_in">log</span>);</div><div class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">return</span> NGX_ERROR;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//将内存地址和ngx_cacheline_size对齐，注意，由于多申请了</span></div><div class="line">    <span class="comment">//一些空间，即便内存往前偏移一些，也不会发生内存越界</span></div><div class="line">    p = ngx_align_ptr(p, ngx_cacheline_size);</div><div class="line"></div><div class="line">    <span class="comment">// copy </span></div><div class="line">    ngx_memcpy(p, ngx_crc32_table16, <span class="number">16</span> * <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</div><div class="line">    ngx_crc32_table_short = p;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/sdk/assemble/inline/" target="_blank" rel="external">Linux 中 x86 的内联汇编</a> : 可以用于了解nginx如何使用<code>cpuid</code>这个指令</li>
<li><a href="http://man7.org/linux/man-pages/man7/capabilities.7.html" target="_blank" rel="external">Capabilities - overview of Linux capabilities</a> :  官方的man手册，对<code>capability</code>有个概述</li>
<li><p><a href="http://rk700.github.io/2016/10/26/linux-capabilities/" target="_blank" rel="external">Linux的capabilities机制</a> : 简单的中文说明，可以作为入门了解</p>
</li>
<li><p><a href="http://www.aristeia.com/TalkNotes/ACCU2011_CPUCaches.pdf" target="_blank" rel="external">CPU Caches and Why You Care</a> : 对CPU CACHE有系统的介绍，其他的概述文章还包括<a href="http://cenalulu.github.io/linux/all-about-cpu-cache/" target="_blank" rel="external">关于CPU Cache – 程序猿需要知道的那些事</a>和<a href="https://coolshell.cn/articles/10249.html" target="_blank" rel="external">7个示例科普CPU CACHE</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原始feature说明&quot;&gt;&lt;a href=&quot;#原始feature说明&quot; class=&quot;headerlink&quot; title=&quot;原始feature说明&quot;&gt;&lt;/a&gt;原始feature说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
    
      <category term="nginx" scheme="http://shevacjs.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171210</title>
    <link href="http://shevacjs.com/2017/12/12/20171210/"/>
    <id>http://shevacjs.com/2017/12/12/20171210/</id>
    <published>2017-12-12T07:17:45.000Z</published>
    <updated>2017-12-12T07:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/seu.jpg" alt="SEU四牌楼-冬日清晨"></p>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://www.haproxy.com/blog/dynamic-configuration-haproxy-runtime-api/" target="_blank" rel="external">Dynamic Configuration with the HAProxy Runtime API</a> : 介绍了<code>HAProxy</code>的动态configure功能，其可以通过一个<code>socat</code>的命令行工具进行交互, 感觉这个设计对于nginx也很有借鉴意义，先mark</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15845114" target="_blank" rel="external">Evolution of <img>: Gif without the GIF</a> : 先mark</p>
</li>
<li><p><a href="https://github.com/Microsoft/ProcDump-for-Linux" target="_blank" rel="external">Microsoft/ProcDump-for-Linux</a> : “ProcDump provides a convenient way for Linux developers to create core dumps of their application based on performance triggers”</p>
</li>
<li><p><a href="https://blog.cloudflare.com/arm-takes-wing/" target="_blank" rel="external">ARM Takes Wing: Qualcomm vs. Intel CPU comparison</a> : 本文具体对比了intel和高通的CPU在服务器市场的性能情况，文章具体分析了在<code>openssl</code>, <code>zlib</code>, <code>go</code>语言, <code>nginx</code>等，在以C语言为基础的组件里面intel的cpu在单核上面优势都比较明显，但是整体的性能(28核vs48核)会弱一些，而go语言arm的处理器没有太多优势; 整体来看, arm后续的服务器的处理器还是很有竞争力的</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><p><a href="https://machinelearning.apple.com/docs/learning-with-privacy-at-scale/appledifferentialprivacysystem.pdf" target="_blank" rel="external">Learning with Privacy at Scale</a> : 苹果介绍了其差分隐私(Differential Privacy)的实践和经验，略长，先mark</p>
</li>
<li><p><a href="https://blog.acolyer.org/2017/11/28/popularity-predictions-of-facebook-videos-for-higher-quality-streaming/" target="_blank" rel="external">Popularity predictions of Facebook videos for higher quality streaming</a> : 预判一些内容的流行度/热点有时候非常有用，比如说视频转H265对CPU等成本非常高, 所以我们如果能够正确预估哪些视频会是热点，并且提前压缩，对带宽和cpu等资源的利用率会有质的提升，具体的预估算法不是特别理解，反正是又引入了一个简单的神经网络模型进行训练，下来可以细看下</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://blog.cloudflare.com/make-ssl-boring-again/" target="_blank" rel="external">Make SSL boring again</a> : CloudFlare的分享文章，介绍其引入google的开源<a href="https://boringssl.googlesource.com/boringssl/" target="_blank" rel="external">BoringSSL</a>的历程以及收获, 除了对TLS1.3更好的支持以外，还包括<code>private key callback</code>, <code>equal-preference cipher grouping</code>等特性，对于大规模的SSL部署，非常有裨益</p>
</li>
<li><p><a href="https://www.nginx.com/blog/optimizing-web-servers-for-high-throughput-and-low-latency/" target="_blank" rel="external">Optimizing Web Servers for High Throughput and Low Latency</a> : 对于实现一个高性能web server的建议, 从硬件CPU的选择到上层lib库和nginx配置的控制, 讲得非常细，非常系统, 对里面一些优化的理解可以加深对nginx/linux系统的理解，建议多多review</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/sDRftJL1xNBR6tQB7S4SIA" target="_blank" rel="external">Aurora Serveless的红与黑</a> : <code>Aurora Serveless</code>是AWS新推出的无服务,类似于mysql的存储解决方案，现在还不大清楚里面的一些实现细节，但是其设计抽象理念值得关注</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://www.gatesnotes.com/About-Bill-Gates/Best-Books-2017" target="_blank" rel="external">5 amazing books I read this year</a> :  Bill Gates推荐2017的几本书，包括<code>The Rise of ISIS by</code>, <code>Turtles All the Way Down</code>, <code>The Color of Law</code> 等, 以上几本书亚马逊基本都有售，可以考虑入手</p>
</li>
<li><p><a href="http://www.visualcapitalist.com/histomap/" target="_blank" rel="external">Histomap: Visualizing the 4,000 Year History of Global Power</a> : 通过可视化的方式展现近4000年历史上各个权利的迭代更替</p>
</li>
<li><p><a href="https://www.feistyduck.com/books/openssl-cookbook/" target="_blank" rel="external">OpenSSL Cookbook</a> : 非常好的关于openssl的工具和实践书籍，对此有兴趣的可以深入看看</p>
</li>
<li><p><a href="https://blog.cloudflare.com/randomness-101-lavarand-in-production/" target="_blank" rel="external">Randomness 101: LavaRand in Production</a> : CloudFlare通过摄像头采集<code>LavaRand</code>的信息，来作为加密随机数的输入变量</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/seu.jpg&quot; alt=&quot;SEU四牌楼-冬日清晨&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171126</title>
    <link href="http://shevacjs.com/2017/12/05/20171126/"/>
    <id>http://shevacjs.com/2017/12/05/20171126/</id>
    <published>2017-12-05T03:39:45.000Z</published>
    <updated>2017-12-05T03:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/shanghai01.jpg" alt="上海外滩"></p>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://aws.amazon.com/cn/blogs/opensource/better-random-number-generation-for-openssl-libc-and-linux-mainline/" target="_blank" rel="external">Better Random Number Generation for OpenSSL, libc, and Linux Mainline</a> : AWS构建了自己的ssl库(<a href="https://aws.amazon.com/cn/blogs/security/introducing-s2n-a-new-open-source-tls-implementation/" target="_blank" rel="external">s2c</a>), 其在随机数生成里面考虑了具体在linux系统下面实线的一个问题，比如fork子进程的时候会完全拷贝内存，导致信息泄露, 引入了在madvise的新的option(<code>MADV_DONTFORK</code>)；还是非常佩服这些公司，能够持续的在这些基础技术上面做投入</p>
</li>
<li><p><a href="https://draveness.me/docker" target="_blank" rel="external">Docker 核心技术与实现原理</a> :  非常不错的docker技术的普及和介绍</p>
</li>
<li><p><a href="https://www.opengarden.com/meshkit.html" target="_blank" rel="external">MeshKit: Mesh networking made easy</a> : 可以支持各设备以<code>P2P</code>的方式交互, 类似于PC上面的P2P，个人觉得随着视频等富媒体的增长，此方向是一个不错的技术选择，但是需要考虑和权衡对用户体验/隐私等方面的保护</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/31630417" target="_blank" rel="external">拒绝超大coredump - 用backtrace和addr2line搞定异常函数栈</a> : 思路可以总结为自己捕捉段错误的信息, 然后通过<code>backtrace</code>和<code>addr2line</code>打印相应的堆栈信息</p>
</li>
<li><p><a href="http://www.commandlinefu.com/commands/browse/sort-by-votes" target="_blank" rel="external">Commandlinefu</a> : 不少命令还挺有用的，关注<code>curl ifconfig.me</code>, <code>dig +short txt &lt;keyword&gt;.wp.dg.cx</code></p>
</li>
<li><p><a href="https://hackernoon.com/how-ive-captured-all-passwords-trying-to-ssh-into-my-server-d26a2a6263ec" target="_blank" rel="external">How I’ve captured all passwords trying to ssh into my server!</a> : 挺有意思的一个研究, 作者通过重编译<code>openssh</code>使得其可以打印出来登录的用户名和密码, 再基于这些数据做研究，可以发现很多攻击者和登陆者的特征</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://code.facebook.com/posts/190251048047090/myrocks-a-space-and-write-optimized-mysql-database/" target="_blank" rel="external">MyRocks: A space- and write-optimized MySQL database</a> : <code>MyRocks</code>是基于<code>RocksDB</code>封装的mysql存储引擎,  对存储空间和写优化上面做了大幅的提升, 可以了解下，另外也可以参看<a href="https://code.facebook.com/posts/1478526992216557/migrating-a-database-from-innodb-to-myrocks/" target="_blank" rel="external">Migrating a database from InnoDB to MyRocks</a> 了解他们迁移到Innodb的具体过程</p>
</li>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404179898175459305" target="_blank" rel="external">企业大规模部署机器学习模型的困境</a> : 通过类似于<code>FAAS</code>的方式，提供人工智能相关的服务，可以让其他更多专注于策略的迭代和开发</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://developers.googleblog.com/2017/09/introducing-tensorflow-datasets.html" target="_blank" rel="external">Introduction to TensorFlow Datasets and Estimators</a> : 关于tensorflow的教程，先收藏mark</p>
</li>
<li><p><a href="https://leastauthority.com/blog/mixnet-intro/" target="_blank" rel="external">Introduction to Mix Networks and Anonymous Communication Networks</a> : 对于混杂网络和匿名通信的系统性介绍, 简单扫了一眼，感觉是非常系统性的文章，先收藏mark</p>
</li>
<li><p><a href="https://cs007.blog/" target="_blank" rel="external">Stanford CS007: Personal Finance For Engineers</a> : 斯坦福的教程，一些对于工程师财务管理的建议和指导，现在的材料多为PPT, 先mark收藏</p>
</li>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404179321597125139" target="_blank" rel="external">【深度长文】为什么微博不像微信一样设计得简洁？</a> : 对产品的思考和分析</p>
</li>
<li><p><a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/" target="_blank" rel="external">Dynamic linker tricks: Using LD_PRELOAD to cheat, inject features and investigate programs</a> : 我们知道系统在搜索动态链接库的时候会优先加载<code>LD_PRELOAD</code>里面的so, 通过着特性，如果我们构造合适威胁的so，可能对程序的行为有着重大影响，比如随机数生成等</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/shanghai01.jpg&quot; alt=&quot;上海外滩&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171119</title>
    <link href="http://shevacjs.com/2017/11/24/20171119/"/>
    <id>http://shevacjs.com/2017/11/24/20171119/</id>
    <published>2017-11-24T08:47:45.000Z</published>
    <updated>2017-11-24T08:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/austria02.jpg" alt="奥地利一景"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://github.com/blog/2470-introducing-security-alerts-on-github" target="_blank" rel="external">Introducing security alerts on GitHub</a> : Github支持对于Js或者ruby项目的依赖的安全问题进行警告, 值得关注的是，github通过<code>gemfile</code>和<code>package.json</code>自动解析<a href="https://help.github.com/articles/listing-the-packages-that-a-repository-depends-on/" target="_blank" rel="external">分析依赖</a>, 其次通过<a href="https://cve.mitre.org/" target="_blank" rel="external">CVE IDs</a>对于具体的安全问题进行分析，深入分析这个里面技术/规范需要投入较大的支持, 但是对社区其实是非常好的帮助</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://tomassetti.me/guide-natural-language-processing/" target="_blank" rel="external">What can you use Natural Language Processing for?</a> : 非常好的NLP工具的入门和大量的材料，先mark</p>
</li>
<li><p><a href="http://abau.org/hannah" target="_blank" rel="external">Hannah – a DSL for parsing and generating files and network traces</a> : 挺好玩的一个工具，通过<code>DSL</code>的方式来定义如何解析和生成数据</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/U0311_AiGkIEtyuO9Uh1Rw" target="_blank" rel="external">HTTP/2之服务器推送(Server Push)最佳实践</a> : 具体介绍了如何在合适的业务场景采用server push, 还是比较接地气的</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://shevacjs.com/2017/11/21/simple_rank_algo/">简单排序算法概述</a> : 关于hacker news和reddit的简单排序算法的介绍, 可以了解下</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/laoqiren/mlhelper" target="_blank" rel="external">mlhelper: Algorithms and utils for Machine Learning in JavaScript</a> : 一个基于Js的机器学习lib, 可以放在前端做一些简单的机器学习支持，但是google已经开发了一些基于端的机器学习能力组件, 比如<a href="https://deeplearnjs.org/" target="_blank" rel="external">deeplearnjs</a></p>
</li>
<li><p><a href="https://github.com/jacobdufault/cquery/#cquery" target="_blank" rel="external">jacobdufault/cquery</a> : “Low-latency vscode language server for large C++ code-bases, powered by libclang”, cquery implements almost the entire <a href="https://github.com/Microsoft/language-server-protocol" target="_blank" rel="external">language server protocol</a> and provides some extra features to boost; 也有VS的扩展, 可以关注；不过没有其他语言的支持, 先mark</p>
</li>
<li><p><a href="https://time.geekbang.org/column/article/961" target="_blank" rel="external">GitHub上的五大开源机器学习项目</a> : 包括<code>tensorflow</code>, <code>scikit-learn</code>, <code>PredictionIO</code>, <code>Swift AI</code> 和 <code>GoLearn</code>, 后三者分别是<code>scala</code>, <code>swift</code>和<code>go</code>语言的学习库</p>
</li>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404173389983009423" target="_blank" rel="external">细思极恐的YouTube可跳过广告</a> : 文章具体分析了<code>Youtube</code>可跳过广告背后的产品逻辑和商业化策略, 个人还是比较认同的；任何产品都需要找个一个用户体验和商业化的一个折衷点</p>
</li>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404177368133588050" target="_blank" rel="external">10家将机器学习玩出新花样的公司</a> : 具体介绍不用公司在AI在业务线的落地, 个人感觉可以关注<code>Yelp</code>, <code>Pinterest</code>等</p>
</li>
<li><p><a href="https://lagunita.stanford.edu/courses/Engineering/Compilers/Fall2014/about" target="_blank" rel="external">Stanford: Compliers</a> : 斯坦福的关于编译器的课程，想学编译原理的同学可以看看，每个人程序员心中应该都有写一个自己的编译器的一个梦想</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/austria02.jpg&quot; alt=&quot;奥地利一景&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>简单排序算法概述</title>
    <link href="http://shevacjs.com/2017/11/21/simple_rank_algo/"/>
    <id>http://shevacjs.com/2017/11/21/simple_rank_algo/</id>
    <published>2017-11-21T12:01:29.000Z</published>
    <updated>2017-11-22T04:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>网上有很多这个方面的资料，这里做个简单的总结, 参考资料里面很多写的都很好</p>
</blockquote>
<p>主要介绍两个: Hacker News 和 Reddit</p>
<h3 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h3><p>整体算法如下:</p>
<p>$$ score = weight * \frac{(base-1)^{0.8}}{(time + 2)^G}$$</p>
<p>几个关键因子:</p>
<ul>
<li>weigth : 对不同的类别，权重可以自定义</li>
<li>time : 从提交时刻到现在的时间 (以小时计算)</li>
<li>base : 物料的基本信息, 和业务相关，比如点赞数/评论等等</li>
<li>G : 控制时间因子的敏感程度</li>
</ul>
<p>可以理解是和<code>内容质量(base)</code>/<code>内容分类(weight</code>)/<code>内容新鲜度相关</code>的一个排序算法</p>
<p>如下可以分析出G对score的影响(敏感程度) :</p>
<p><img src="/images/hacker_rank.png" alt="敏感程度"></p>
<blockquote>
<p>发现直接采用<code>notebook</code> + <code>pyplot</code> 绘制数学曲线还是非常有效的，建议!</p>
</blockquote>
<h3 id="Reddit"><a href="#Reddit" class="headerlink" title="Reddit"></a>Reddit</h3><p>如下:</p>
<p>$$f(t_s, y, z) = log_{10}z + \frac{y*t_s}{45000}$$</p>
<p>其中:</p>
<ul>
<li>$t_s$ : 发帖时间的时间戳</li>
<li>$y$ : $y \in {-1, 0, 1}$, 且有:</li>
</ul>
<p>$$<br>y = \begin{cases}<br>    1 &amp; \text{if x &gt; 0} \\<br>    0 &amp; \text{if x = 0} \\<br>   -1 &amp; \text{if x &lt; 0}<br>    \end{cases}<br>$$</p>
<ul>
<li>$x$, 其为$U$,$D$之差，前者为正反馈数量(比如点赞/评论)，后者为负反馈数量(比如踩之类的)</li>
</ul>
<p>$$ x = U - D $$</p>
<ul>
<li>而z者为：</li>
</ul>
<p>$$<br>z = \begin{cases}<br>     |x| &amp; \text{if |x| } \geq 1  \\<br>         1 &amp; \text{if |x| &lt; 1 }<br>     \end{cases}<br>$$</p>
<p>从上面公式可以分析:</p>
<ul>
<li><p>发帖时间对score影响较大, 但是和hacker news不一样的是，发帖分数不会降低，不过新增的贴子分数会比较高</p>
</li>
<li><p>由于通过$log_{10}z$ 打平, 前10的投票效果和前100相差不会很大, 而且是算$(U-D)$,所有有争议的文章的分数也不会很高 </p>
</li>
</ul>
<h3 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h3><ul>
<li>reddit对时间较为不敏感，较好的文章可以保留更久, hacker news则不一样</li>
<li>实现上面, reddit时间系数不变；所以只需要再文章up/down的时候更新score即可</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.cnblogs.com/zhengyun_ustc/archive/2010/12/15/amir.html" target="_blank" rel="external">Hacker News与Reddit的算法比较</a></li>
<li><a href="http://fjdu.github.io/algorithm/2016/11/29/hacker-news-ranking-algorithm.html" target="_blank" rel="external">Hacker News 的排序算法</a></li>
<li><p><a href="https://redditblog.com/2009/10/15/reddits-new-comment-sorting-system/" target="_blank" rel="external">reddit’s new comment sorting system</a></p>
</li>
<li><p><a href="https://moz.com/blog/reddit-stumbleupon-delicious-and-hacker-news-algorithms-exposed" target="_blank" rel="external">Reddit, Stumbleupon, Del.icio.us and Hacker News Algorithms Exposed!</a></p>
</li>
<li><p><a href="https://medium.com/hacking-and-gonzo/how-reddit-ranking-algorithms-work-ef111e33d0d9" target="_blank" rel="external">How Reddit ranking algorithms work</a> : 比较新的文章，分析也比较深入，比较推荐</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网上有很多这个方面的资料，这里做个简单的总结, 参考资料里面很多写的都很好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要介绍两个: Hacker News 和 Reddit&lt;/p&gt;
&lt;h3 id=&quot;Hacker-News&quot;&gt;&lt;a href=&quot;#H
    
    </summary>
    
    
      <category term="misc" scheme="http://shevacjs.com/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171112</title>
    <link href="http://shevacjs.com/2017/11/20/20171112/"/>
    <id>http://shevacjs.com/2017/11/20/20171112/</id>
    <published>2017-11-20T08:31:45.000Z</published>
    <updated>2017-11-21T12:03:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近略忙, 大部分weekly都延迟了</p>
</blockquote>
<p><img src="/images/milan_church.jpg" alt="米兰大教堂"></p>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://ialloc.org/posts/2017/11/03/ngx-notes-prerequisite/#id2" target="_blank" rel="external">Nginx 源代码笔记 - Prerequisite</a> : 之前推荐过这个博主的文章, 这篇是比较新的介绍nginx核心处理流程, 对于filter等执行顺序也有比较深入的介绍</p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html" target="_blank" rel="external">eBPF 简史</a> : “高屋建瓴深入浅出”, 非常好的<code>eBPF</code>系统性介绍, 对这方面有认识的，可以深入了解下</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://brandur.org/redis-streams" target="_blank" rel="external">Redis Streams and the Unified Log</a> : 本文主要介绍了redis新的将要支持的<code>streams</code>机制, 其设计功能类似于<code>kafaka</code>, 用于全局统一的日志/事件记录, 作者任务redis对于精细简单任务更为适合，也更容易上手;</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;mid=2247483872&amp;idx=1&amp;sn=db0fbb2bec0d4e68593f1b9bfc20a8b5" target="_blank" rel="external">爱奇艺个性化推荐排序实践</a> : 具体介绍了爱奇艺的推荐架构里面排序层的实践，从最原始的<code>LR</code>, 到现在的多层<code>DNN+GBDT+FM</code>, 如果理解是对技术的不断机制追求的探索</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/29768996" target="_blank" rel="external">用深度学习检测WAF恶意请求</a> : “总结一下，这篇文章提出了 RNN-LSTM 方法做恶意请求log的判别，用字符序列作为输入给一个简单的 LSTM 可以在自己数据集上达到不错的效果，大家可以一试，这可能是把人类从写规则和写正则里解放出来的一条路”</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://weibo.com/ttarticle/p/show?id=2309404171026404610589" target="_blank" rel="external">最奇葩的编程语言？最让人讨厌的语言？最伟大的语言？</a> : 同样可以关注下几个奇葩的语言<a href="https://gist.github.com/sharmaeklavya2/8a0e2581baf969be0f64" target="_blank" rel="external">Lolcode</a>, <a href="http://progopedia.com/language/befunge/" target="_blank" rel="external">Befunge</a>, <a href="http://www.muppetlabs.com/~breadbox/bf/" target="_blank" rel="external">Brainfuck</a> 等</p>
</li>
<li><p><a href="https://www.networkworld.com/article/3236064/servers/minix-the-most-popular-os-in-the-world-thanks-to-intel.html" target="_blank" rel="external">MINIX — The most popular OS in the world, thanks to Intel</a> : Intel在其内置的CPU里面都安卓了<code>MINIX</code>系统, 运行在<code>Ring -3</code>这个层面(我们常规的应用大家知道一般是在<code>Ring 3</code>), 这个系统其拥有”Full networking stack, File systems, Many drivers (including USB, networking, etc.),A web server”, Google的这篇文章<a href="https://schd.ws/hosted_files/osseu17/84/Replace%20UEFI%20with%20Linux.pdf" target="_blank" rel="external">Replace your exploit-ridden firmware with a Linux kernel</a> 对这个方面有非常深入的介绍，有兴趣可以看着</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近略忙, 大部分weekly都延迟了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/milan_church.jpg&quot; alt=&quot;米兰大教堂&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://ialloc.org/posts/2017/11/03/ngx-notes-prerequisite/#id2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx 源代码笔记 - Prerequisite&lt;/a&gt; : 之前推荐过这个博主的文章, 这篇是比较新的介绍nginx核心处理流程, 对于filter等执行顺序也有比较深入的介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-lo-eBPF-history/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eBPF 简史&lt;/a&gt; : “高屋建瓴深入浅出”, 非常好的&lt;code&gt;eBPF&lt;/code&gt;系统性介绍, 对这方面有认识的，可以深入了解下&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;系统设计&quot;&gt;&lt;a href=&quot;#系统设计&quot; class=&quot;headerlink&quot; title=&quot;系统设计&quot;&gt;&lt;/a&gt;系统设计&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://brandur.org/redis-streams&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redis Streams and the Unified Log&lt;/a&gt; : 本文主要介绍了redis新的将要支持的&lt;code&gt;streams&lt;/code&gt;机制, 其设计功能类似于&lt;code&gt;kafaka&lt;/code&gt;, 用于全局统一的日志/事件记录, 作者任务redis对于精细简单任务更为适合，也更容易上手;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI0MjczMjM2NA==&amp;amp;mid=2247483872&amp;amp;idx=1&amp;amp;sn=db0fbb2bec0d4e68593f1b9bfc20a8b5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;爱奇艺个性化推荐排序实践&lt;/a&gt; : 具体介绍了爱奇艺的推荐架构里面排序层的实践，从最原始的&lt;code&gt;LR&lt;/code&gt;, 到现在的多层&lt;code&gt;DNN+GBDT+FM&lt;/code&gt;, 如果理解是对技术的不断机制追求的探索&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171105</title>
    <link href="http://shevacjs.com/2017/11/07/20171105/"/>
    <id>http://shevacjs.com/2017/11/07/20171105/</id>
    <published>2017-11-07T08:31:45.000Z</published>
    <updated>2017-11-07T08:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/Austria1.jpg" alt="奥地利一景-2015"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=2651113865&amp;idx=1&amp;sn=6a2153fc5eb16c7d2c31e05c83dd6e7a" target="_blank" rel="external">重磅消息！Kotlin要支持iOS开发和Web开发</a> : 有个统一的前端开发栈也是非常不错的</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://paper.seebug.org/423/" target="_blank" rel="external">前端防御从入门到弃坑–CSP变迁</a> : 比较喜欢的文章风格，对CSP的历史缘由，发展历程说的很清楚, 去年paper提出的<code>nonce script</code>和<code>strict-dynamic</code>如今也面临着更多的威胁和挑战</p>
</li>
<li><p><a href="https://qiuzhenyuan.github.io/2017/09/24/%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E6%8A%80%E6%9C%AF/" target="_blank" rel="external">常用密码学技术</a> : 对密码学的有比较系统的介绍和梳理，感觉非常适合入门者学习; 如果能加上一些应用就更好了；争取本周自己也补一篇此类的文章</p>
</li>
<li><p><a href="https://www.igvita.com/2012/12/18/deploying-new-image-formats-on-the-web/" target="_blank" rel="external">Deploying WebP via Accept Content Negotiation</a> : 是一篇2013年的文章, 作者(<a href="https://hpbn.co/" target="_blank" rel="external">High Performance Browser Networking</a>书籍的作者) 很详细的介绍了如果通过client/server等多方的联动，可以透明，相对低成本的接入webp格式的图片; 对后续我们要引入新的资源类型有比较好的参考意义, 也可以参考作者另外一篇文章<a href="https://www.igvita.com/2012/12/18/deploying-new-image-formats-on-the-web/" target="_blank" rel="external">Deploying New Image Formats on the Web</a></p>
</li>
<li><p><a href="https://blog.lizzie.io/linux-containers-in-500-loc.html#sec-1" target="_blank" rel="external">Linux containers in 500 lines of code</a> : 本文用一个最小的集合实现vm, 可以加深对linux下面虚拟机机制的理解</p>
</li>
</ul>
<a id="more"></a>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><a href="https://blog.acolyer.org/2017/10/26/the-quic-transport-protocol-design-and-internet-scale-deployment/" target="_blank" rel="external">The QUIC transport protocol: design and Internet-scale deployment</a> : 关于<code>QUIC</code>协议的paper,  比较系统的介绍了QUIC的背景(对TCP队首阻塞, 握手消耗问题), 整体设计思路(0-RTT， 1-RTT, 以及基于UDP稍高层次的发送重传机制), 更多资料可以查看<a href="https://www.chromium.org/quic" target="_blank" rel="external">QUIC, a multiplexed stream transport over UDP</a>, 但是没有太多的server支持<code>QUIC</code>, 个人理解nginx/apache是应该要考虑的，静待</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="https://certsimple.com/blog/nginx-brotli" target="_blank" rel="external">Yes, Brotli can compress faster than gzip</a> : <code>Brotli</code>压缩策略已经是正式的<a href="https://tools.ietf.org/html/rfc7932" target="_blank" rel="external">RFC标准</a>了, 在其具体应用上面文章校正大家的常用的一些误解，包括可以确保<code>Brotli</code>可以在压缩大小和速度上面都高于<code>gzip</code>, 通过预生成的<code>.br</code>文件还会有更好的表现, 详细的数据可以查看<a href="https://blogs.akamai.com/2016/02/understanding-brotlis-potential.html" target="_blank" rel="external">Understanding Brotli’s Potential</a>这篇文章, 不过简单review了几个网站, 几个国外的网站基本都是支持<code>br</code>压缩，国内的基本都是<code>gzip</code>方式</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://tech.marksblogg.com/sqlite3-tutorial-and-guide.html" target="_blank" rel="external">A Minimalist Guide to SQLite</a> : <code>SQLite</code>的入门介绍文档，通过具有范例说明, 个人感觉对sqlite可以深入熟练的去使用</p>
</li>
<li><p><a href="http://weibo.com/ttarticle/p/show?id=2309351000224169168638358204" target="_blank" rel="external">腾讯QQ空间超分辨率技术TSR：为用户节省3/4流量</a> : </p>
</li>
<li><p><a href="https://github.com/yishn/tikzcd-editor" target="_blank" rel="external">tikzcd-editor</a> : 很好的一个基于web的图表绘制网站, 好像是要基于node构建；不好没有找到比较好的图标导出方式</p>
</li>
<li><p><a href="http://openfootball.github.io/" target="_blank" rel="external">football.db: free open public domain football data</a> : 足球的公开数据集，可以收藏 </p>
</li>
<li><p><a href="https://con.openresty.org/cn/2017/books/OpenResty%20Commercialization%20and%20DSL%20Era%20-%20V3.pdf" target="_blank" rel="external">OpenResty 的商业化及小语言时代</a> : zhangyichun的最新的分享，这篇文章更多是侧重介绍openresty现在的商业业务情况，对应技术上面的实现涉及极少一些</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Austria1.jpg&quot; alt=&quot;奥地利一景-2015&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;amp;mid=2651113865&amp;amp;idx=1&amp;amp;sn=6a2153fc5eb16c7d2c31e05c83dd6e7a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;重磅消息！Kotlin要支持iOS开发和Web开发&lt;/a&gt; : 有个统一的前端开发栈也是非常不错的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://paper.seebug.org/423/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端防御从入门到弃坑–CSP变迁&lt;/a&gt; : 比较喜欢的文章风格，对CSP的历史缘由，发展历程说的很清楚, 去年paper提出的&lt;code&gt;nonce script&lt;/code&gt;和&lt;code&gt;strict-dynamic&lt;/code&gt;如今也面临着更多的威胁和挑战&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://qiuzhenyuan.github.io/2017/09/24/%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E5%AD%A6%E6%8A%80%E6%9C%AF/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用密码学技术&lt;/a&gt; : 对密码学的有比较系统的介绍和梳理，感觉非常适合入门者学习; 如果能加上一些应用就更好了；争取本周自己也补一篇此类的文章&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.igvita.com/2012/12/18/deploying-new-image-formats-on-the-web/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deploying WebP via Accept Content Negotiation&lt;/a&gt; : 是一篇2013年的文章, 作者(&lt;a href=&quot;https://hpbn.co/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;High Performance Browser Networking&lt;/a&gt;书籍的作者) 很详细的介绍了如果通过client/server等多方的联动，可以透明，相对低成本的接入webp格式的图片; 对后续我们要引入新的资源类型有比较好的参考意义, 也可以参考作者另外一篇文章&lt;a href=&quot;https://www.igvita.com/2012/12/18/deploying-new-image-formats-on-the-web/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deploying New Image Formats on the Web&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blog.lizzie.io/linux-containers-in-500-loc.html#sec-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux containers in 500 lines of code&lt;/a&gt; : 本文用一个最小的集合实现vm, 可以加深对linux下面虚拟机机制的理解&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171029</title>
    <link href="http://shevacjs.com/2017/11/02/20171029/"/>
    <id>http://shevacjs.com/2017/11/02/20171029/</id>
    <published>2017-11-02T06:31:45.000Z</published>
    <updated>2017-11-02T06:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/danshui.jpg" alt="台湾-淡水渔人码头"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s/VZMhbha3sjxxNFTcIGYESw" target="_blank" rel="external">No.22 漫谈数据质量监控</a> : 非常有干货的一篇文章, 可以加深</p>
</li>
<li><p><a href="https://github.com/Tencent/tsf" target="_blank" rel="external">Tencent Server Framework</a> : “Tencent Server Framework is a coroutine and Swoole based server framework for fast server deployment which developed by Tencent engineers.”, 先关注下, 看下是否做进一步的落地</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/uzvzF2owmw_g5vP-Np7x5w" target="_blank" rel="external">MixPanel －Android 端埋点技术研究</a> : <code>MixPanel</code>是不多数的开源的可视化埋点的NA框架, 可以关注</p>
</li>
</ul>
<a id="more"></a>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15543596" target="_blank" rel="external">Hadoop on IPFS</a> : 一个新的思路，将分布式分析的文件存在一个非中心化的存储系统，比如<a href="https://ipfs.io/" target="_blank" rel="external">IPFS</a>, 其性能会怎么样？这篇paper做了简要的分析，不过对IPFS理解不深，不好做评价，周末研究下</p>
</li>
<li><p><a href="https://www.nginx.com/blog/nginx-product-roadmap-2017/" target="_blank" rel="external">NGINX Product Roadmap 2017</a> : 谈论了nginx的过去现在, 以及未来的规划，介绍了三个比较大的topic，包括<a href="https://github.com/nginmesh/nginmesh" target="_blank" rel="external">nginmesh/nginmesh</a>(构建自动化的微服务管理平台), <a href="https://www.nginx.com/blog/introducing-nginx-kubernetes-ingress-controller/" target="_blank" rel="external">Ingress controller for Nginx</a>, 以及<a href="https://www.nginx.com/blog/introducing-nginx-unit/" target="_blank" rel="external">Nginx Unit</a></p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/10/qzone-quic-practise" target="_blank" rel="external">QQ空间已在生产环境中使用QUIC协议</a> : 主要介绍了QUIC在QQ空间的落地情况, server端的QUIC实践是通过腾讯云的CLB应用，故没有介绍太多细节，主要介绍QUCI的优势(相比于TCP协议)，以及PC/NA端落地的一些坑，比如端口限制, 丢包等异常情况的策略，这个方面是有不少学习的地方的</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;mid=2653163552&amp;idx=1&amp;sn=5557b261c38fe68bff821a3cc0e7030e" target="_blank" rel="external">Reddit爆款讨论：那些做机器学习的，平时除了数据清洗还干些啥？</a> : 先mark</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/sJBGJ88_-N-LdA8EHywfAA" target="_blank" rel="external">OpenSSL开发学习总结</a> : 内容很丰富翔实，但感觉系统性和条理性方面可以更优化下;</p>
</li>
<li><p><a href="https://sspai.com/post/41477" target="_blank" rel="external">macOS 上都有哪些既免费、又实用的工具？</a> : 一些工具可以关注下, 比如<a href="https://lhc70000.github.io/iina/zh-cn/" target="_blank" rel="external">IINA</a>, <a href="https://github.com/yangshun1029/aria2gui.git" target="_blank" rel="external">Aria2GUI</a>, <a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">CheatSheet</a> 等</p>
</li>
<li><p><a href="http://insights.thoughtworks.cn/eight-security-problems-in-front-end/" target="_blank" rel="external">8大前端安全问题</a> : 对<code>iframe防御</code>, <code>点击劫持</code>, <code>内容推断</code>等的防御做了一些建议，可以关注包括<code>X-Content-Type-Options</code>, <code>X-Frame-Options</code>等header</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/danshui.jpg&quot; alt=&quot;台湾-淡水渔人码头&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/VZMhbha3sjxxNFTcIGYESw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;No.22 漫谈数据质量监控&lt;/a&gt; : 非常有干货的一篇文章, 可以加深&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Tencent/tsf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tencent Server Framework&lt;/a&gt; : “Tencent Server Framework is a coroutine and Swoole based server framework for fast server deployment which developed by Tencent engineers.”, 先关注下, 看下是否做进一步的落地&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/uzvzF2owmw_g5vP-Np7x5w&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MixPanel －Android 端埋点技术研究&lt;/a&gt; : &lt;code&gt;MixPanel&lt;/code&gt;是不多数的开源的可视化埋点的NA框架, 可以关注&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171022</title>
    <link href="http://shevacjs.com/2017/10/25/20171022/"/>
    <id>http://shevacjs.com/2017/10/25/20171022/</id>
    <published>2017-10-25T02:38:45.000Z</published>
    <updated>2017-11-02T06:35:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/xihu.jpg" alt="西湖一景"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://blogs.windows.com/msedgedev/2017/10/18/documenting-web-together-mdn-web-docs/#akYR4ff8rcL8TY9Q.97" target="_blank" rel="external">Documenting the Web together</a> : 微软宣布把W3C的文档都收敛到MDN, 完成web文档的大一统，个人觉得MDN的文档真心不错，有空可以帮忙上去做一些翻译</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/3OeVknv8H60OdTPQBKFjaA" target="_blank" rel="external">密钥重载攻击：强制WPA2重用Nonce</a> : 先mark</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15491553" target="_blank" rel="external">VIM AFTER 15 YEARS</a> : 作者使用vim整整15年，介绍了一些不错的plugin, 建议包括<a href="https://github.com/junegunn/fzf" target="_blank" rel="external">fzf</a>(命令行形式的finder) 等 </p>
</li>
<li><p><a href="https://meribold.github.io/2017/10/20/survey-of-cpu-caches/#listing-1" target="_blank" rel="external">A Survey of CPU Caches</a> : 对Cpu Cache很形象的解释和图形化的说明</p>
</li>
<li><p><a href="https://github.com/RaRe-Technologies/bounter" target="_blank" rel="external">RaRe-Technologies/bounter</a> : “Efficient Counter that uses a limited (bounded) amount of memory regardless of data size.”, 内部通过<code>HLL</code>，<a href="https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch" target="_blank" rel="external">Count-min Sketch algorithm</a>做近似统计.</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://www.vidarholen.net/contents/blog/?p=691" target="_blank" rel="external">An ode to pack: gzip’s forgotten decompressor</a> : 介绍了linux下面压缩命令的历史，包括<code>xz</code>, <code>bzip2</code>, <code>zip</code>, <code>compress</code>, <code>pack</code>等, 文末很简单了介绍了哈夫曼编码的机制和原理,</p>
</li>
<li><p><a href="https://magicly.me/fe-hpc/gpujs" target="_blank" rel="external">前端高性能计算之四：GPU加速计算</a> : 非常好的科普文，作者的其他几个文章也不错, </p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://elliotec.com/how-to-get-100-google-page-speed-score/" target="_blank" rel="external">How to Get 100/100 Google Page Speed Score with Middleman and Nginx</a> : </p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15539730" target="_blank" rel="external">Why does one NGINX worker take all the load?</a> : 文章介绍了为什么很多情况下，部分nginx进程的负载会比其他都高，几个作者自己总结的结论”a) epoll() seem to have LIFO behavior which can result in uneven load balancing across workers (in case of accept()ing from a shared socket); b) using REUSEPORT can worsen latency in a high-load case; c)…”</p>
</li>
<li><p><a href="https://taravancil.com/blog/how-merkle-trees-enable-decentralized-web/" target="_blank" rel="external">How Merkle trees enable the decentralized Web</a> : 作者的大概想法1) 通过对内容算hash值，作为其地址  2) 通过p2p网络构建内容的存储; 为了保障每个分布式节点内容的有效性和合法性，不同节点的内容构建起一个<code>Merkle tree</code>, 但总感觉</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/alibaba/ApsaraCache" target="_blank" rel="external">ApsaraCache: a Redis branch originated from Alibaba Group</a> : 阿里基于Redis 4.0发布的同时支持Cache/Redis协议的可持久化存储的系统</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15507141" target="_blank" rel="external">A VIEW OF MATHEMATICS</a> : 关于现在数学的概述, 在Hack News上面也有不少推荐的文章, mark，对于数学相关的基础需要不断沉淀</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15514805" target="_blank" rel="external">Show HN: I made an RSS News Reader that prioritizes topics you care about</a> : 作者介绍了其开发的<a href="https://www.zuperlist.com/" target="_blank" rel="external">Zuperlist</a>, “An RSS News Reader that prioritizes the topics you care about”, 个人还是非常喜欢这个模式的，比纯粹的Rss阅读器好，但又不知道头条/feed那样太娱乐化, 可以参考这篇文章的一些观点<a href="https://mp.weixin.qq.com/s/UauBrCpyMTRETs_3Wr0uRQ" target="_blank" rel="external">推荐系统意义一点思考</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15540042" target="_blank" rel="external">Ask HN: Are there drawing tool plugins to be used within forums?</a> : <a href="https://www.circuitlab.com/" target="_blank" rel="external">Circuit Lab</a> 感觉还不错，可以试试</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15538744" target="_blank" rel="external">SSH Escape Sequences</a> : SSH的一些小技巧，可以通过类似于<code>~.</code>, <code>~~.</code>, <code>~#</code>做一些链接断开/展现类的需求</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/xihu.jpg&quot; alt=&quot;西湖一景&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.windows.com/msedgedev/2017/10/18/documenting-web-together-mdn-web-docs/#akYR4ff8rcL8TY9Q.97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Documenting the Web together&lt;/a&gt; : 微软宣布把W3C的文档都收敛到MDN, 完成web文档的大一统，个人觉得MDN的文档真心不错，有空可以帮忙上去做一些翻译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/3OeVknv8H60OdTPQBKFjaA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;密钥重载攻击：强制WPA2重用Nonce&lt;/a&gt; : 先mark&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15491553&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VIM AFTER 15 YEARS&lt;/a&gt; : 作者使用vim整整15年，介绍了一些不错的plugin, 建议包括&lt;a href=&quot;https://github.com/junegunn/fzf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fzf&lt;/a&gt;(命令行形式的finder) 等 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://meribold.github.io/2017/10/20/survey-of-cpu-caches/#listing-1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Survey of CPU Caches&lt;/a&gt; : 对Cpu Cache很形象的解释和图形化的说明&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/RaRe-Technologies/bounter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RaRe-Technologies/bounter&lt;/a&gt; : “Efficient Counter that uses a limited (bounded) amount of memory regardless of data size.”, 内部通过&lt;code&gt;HLL&lt;/code&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Count-min Sketch algorithm&lt;/a&gt;做近似统计.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171015</title>
    <link href="http://shevacjs.com/2017/10/17/20171015/"/>
    <id>http://shevacjs.com/2017/10/17/20171015/</id>
    <published>2017-10-17T11:44:45.000Z</published>
    <updated>2017-10-17T11:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/football1.jpg" alt="周五一球"></p>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://www.bearssl.org/constanttime.html" target="_blank" rel="external">Why Constant-Time Crypto?</a> : 本文具体讨论了<code>BearSSL</code>对于<code>constant-time</code>算法的考虑。由于其可以避免被一些旁路监听策略攻击，所以是一个更为安全和理想的加密策略。其后介绍了<code>constant-time</code>的主要方法，一个是<code>masking</code>，就是在代码实现里面加入一些随机因子可以让算法的执行时间不可控，不过这对算法的实现有一些具体的要求，不具有普适性。另外一种办法是让代码实现起来不泄露任何和密钥相关的信息，要保障这点，可以参看<a href="https://cryptocoding.net/index.php/Cryptography_Coding_Standard" target="_blank" rel="external">Cryptography Coding Standard</a>, 其中一个有效的办法是<a href="https://en.wikipedia.org/wiki/Bit_slicing" target="_blank" rel="external">Bit Slicing</a> 其能保障运行时间和具体的信息无关。</p>
</li>
<li><p><a href="http://blog.wesleyac.com/posts/elliptic-curves" target="_blank" rel="external">Elliptic Curve Cryptography for Beginners</a> : 关于椭圆曲线密钥的介绍，可以初步了解其精妙和强大的地方，如果对密码学想要有个直观和系统的认识，个人推荐<a href="https://www.amazon.cn/dp/B01HI4WMEC/" target="_blank" rel="external">图解密码技术</a>(日本人写的)，可以当做通识读本，还是很有意义的</p>
</li>
<li><p><a href="http://litten.me/2017/07/09/prevent-spiders/" target="_blank" rel="external">反击爬虫，前端工程师的脑洞可以有多大？</a> : 各种trick的逻辑去抵御抓取的策略, 从这个里面发现微信公众号也是有部分抓取策略的</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><a href="https://blog.acolyer.org/2017/10/10/pretzel-email-encryption-and-provider-supplied-functions-are-compatible/" target="_blank" rel="external">Pretzel: email encryption and provider-supplied functions are compatible</a> : 本文具体介绍了一个在<code>e2e</code>模式下面，如果做邮件的anti-spam和topic提取，流程上面比较简单，具体的核心是通过一些同态计算的方式，作者具体引用了姚期智的基本概念<a href="https://blog.acolyer.org/2014/12/01/protocols-for-secure-computations/" target="_blank" rel="external">Protocols for Secure Computations</a> 以及更实践的方法<a href="http://win.ua.ac.be/~adrem/bibrem/pubs/goethals.3.pdf" target="_blank" rel="external">GLLM</a>，前者简单看了能理解流程，后者需要进一步分析</li>
</ul>
<a id="more"></a>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="http://ieeexplore.ieee.org/document/8048116/?part=1" target="_blank" rel="external">The Random Forest Based Detection of Shadowsock’s Traffic</a> : 一个paper，介绍基于随机森林去识别SS流量的方案，从摘要来看，准确率可以达到85%以上</p>
</li>
<li><p><a href="https://hackernoon.com/spotifys-discover-weekly-how-machine-learning-finds-your-new-music-19a41ab76efe" target="_blank" rel="external">Spotify’s Discover Weekly: How machine learning finds your new music</a> : Spofity分享了其做推荐系统的经验，采用协同，NLP和对音乐的内容分享等三个混合办法生产</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=2651668536&amp;idx=1&amp;sn=3f25593310e45c19ed6fa1673413418b" target="_blank" rel="external">微信月活9亿的高效运维之路</a> : 个人觉得是干货比较多的一个介绍, 虽然都是很多细节点，但是可以感觉到是有过经历和验证的</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://dustintran.com/blog/a-research-to-engineering-workflow" target="_blank" rel="external">A Research to Engineering Workflow</a> : 个人觉得非常有干货的文章，作者作为一个Ph.D，主要分享了自己作为一个研究者在寻找研究点，paper管理, 项目组织，代码落地等多个阶段和节奏的实践经验，推荐不少工具包括<a href="http://papersapp.com/" target="_blank" rel="external">Papers App</a>,  <a href="http://edwardlib.org/" target="_blank" rel="external">Edward</a>, <a href="https://www.tensorflow.org/get_started/summaries_and_tensorboard" target="_blank" rel="external">Tensorboard</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15454352" target="_blank" rel="external">A Little Story About the <code>yes</code> Unix Command</a> : <code>yes</code>命令被认为是linux下面最为简单的几个命令之一，其一个核心重要是<code>yes | sh boring_installation.sh</code> (之前竟然不知道)，在<code>hack news</code>上面更多人讨论的是如何实现高效的yes输出 </p>
</li>
<li><p><a href="https://dzone.com/articles/jvm-architecture-explained?oid=18544920" target="_blank" rel="external">The JVM Architecture Explained</a> : 本文大概介绍了JVM架构的核心组件，以及每个组件的大概作用，感觉图画的非常清晰，对JVM有兴趣的同学可以细看</p>
</li>
<li><p><a href="http://gfzeng.github.io/blog/2016/11/30/mac-%E8%BE%93%E5%85%A5%E6%B3%95%E5%88%87%E6%8D%A2-bug/" target="_blank" rel="external">Mac 输入法切换 Bug</a> : 最近两周遇到的困扰已久的问题，文中的方法感觉可以解决，推荐下</p>
</li>
<li><p><a href="http://blog.mbrt.it/2017-10-01-demystifying-container-networking/" target="_blank" rel="external">Demystifying container networking</a> : 介绍docker的网络隔离的机制和原理</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/football1.jpg&quot; alt=&quot;周五一球&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.bearssl.org/constanttime.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why Constant-Time Crypto?&lt;/a&gt; : 本文具体讨论了&lt;code&gt;BearSSL&lt;/code&gt;对于&lt;code&gt;constant-time&lt;/code&gt;算法的考虑。由于其可以避免被一些旁路监听策略攻击，所以是一个更为安全和理想的加密策略。其后介绍了&lt;code&gt;constant-time&lt;/code&gt;的主要方法，一个是&lt;code&gt;masking&lt;/code&gt;，就是在代码实现里面加入一些随机因子可以让算法的执行时间不可控，不过这对算法的实现有一些具体的要求，不具有普适性。另外一种办法是让代码实现起来不泄露任何和密钥相关的信息，要保障这点，可以参看&lt;a href=&quot;https://cryptocoding.net/index.php/Cryptography_Coding_Standard&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cryptography Coding Standard&lt;/a&gt;, 其中一个有效的办法是&lt;a href=&quot;https://en.wikipedia.org/wiki/Bit_slicing&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bit Slicing&lt;/a&gt; 其能保障运行时间和具体的信息无关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://blog.wesleyac.com/posts/elliptic-curves&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elliptic Curve Cryptography for Beginners&lt;/a&gt; : 关于椭圆曲线密钥的介绍，可以初步了解其精妙和强大的地方，如果对密码学想要有个直观和系统的认识，个人推荐&lt;a href=&quot;https://www.amazon.cn/dp/B01HI4WMEC/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图解密码技术&lt;/a&gt;(日本人写的)，可以当做通识读本，还是很有意义的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://litten.me/2017/07/09/prevent-spiders/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;反击爬虫，前端工程师的脑洞可以有多大？&lt;/a&gt; : 各种trick的逻辑去抵御抓取的策略, 从这个里面发现微信公众号也是有部分抓取策略的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;每周paper&quot;&gt;&lt;a href=&quot;#每周paper&quot; class=&quot;headerlink&quot; title=&quot;每周paper&quot;&gt;&lt;/a&gt;每周paper&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/10/10/pretzel-email-encryption-and-provider-supplied-functions-are-compatible/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pretzel: email encryption and provider-supplied functions are compatible&lt;/a&gt; : 本文具体介绍了一个在&lt;code&gt;e2e&lt;/code&gt;模式下面，如果做邮件的anti-spam和topic提取，流程上面比较简单，具体的核心是通过一些同态计算的方式，作者具体引用了姚期智的基本概念&lt;a href=&quot;https://blog.acolyer.org/2014/12/01/protocols-for-secure-computations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Protocols for Secure Computations&lt;/a&gt; 以及更实践的方法&lt;a href=&quot;http://win.ua.ac.be/~adrem/bibrem/pubs/goethals.3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLLM&lt;/a&gt;，前者简单看了能理解流程，后者需要进一步分析&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20171008</title>
    <link href="http://shevacjs.com/2017/10/09/20171008/"/>
    <id>http://shevacjs.com/2017/10/09/20171008/</id>
    <published>2017-10-09T06:12:45.000Z</published>
    <updated>2017-10-09T06:14:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/yantai.jpg" alt="烟台海岸"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://blogs.windows.com/windowsexperience/2017/10/05/announcing-microsoft-edge-for-ios-and-android-microsoft-launcher/" target="_blank" rel="external">Announcing Microsoft Edge for iOS and Android, Microsoft Launcher</a> : 微软分别给IOS系统和安卓系统发布了对应的<code>Edge</code>浏览器和<code>Micorsoft Launcher</code></p>
</li>
<li><p><a href="https://aws.amazon.com/cn/blogs/ai/introducing-nnvm-compiler-a-new-open-end-to-end-compiler-for-ai-frameworks/" target="_blank" rel="external">Introducing NNVM Compiler: A New Open End-to-End Compiler for AI Frameworks</a> : Amazon开源了一个全新的机器学习框架的方案，通过引入<code>NNVM</code>和<code>TVM</code>, 前者是类似IR的中间语言，后者是具体的实现，希望以为来提升整体机器学习的性能和工程效率, 可以参看中文的讨论<a href="https://www.zhihu.com/question/51216952" target="_blank" rel="external">如何评价陈天奇的模块化深度学习系统NNVM?</a></p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://github.com/billfeller/billfeller.github.io/issues/121" target="_blank" rel="external">Using Wireshark to decode packets on HTTP/2 over TLS in Chrome on Window/Mac OS X</a> : 本文介绍了一个如何用<code>Wireshark</code>分析TLS包的技巧，整体是思路是由于具体tls沟通的时候肯定是通过对称加密算法沟通的，因此把这个对称密钥打印到日志里面，wireshark就有可能对其包体进行分析</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="https://news.ycombinator.com/item?id=15400037" target="_blank" rel="external">Interactive Vim tutorial</a> : 很不错的vim tutorial, 初学者可以试试, PS: 对国外这些小伙如此费心做这些工具真心佩服</p>
</li>
<li><p><a href="http://www.scylladb.com/2017/10/05/io-access-methods-scylla/" target="_blank" rel="external">Different I/O Access Methods for Linux, What We Chose for Scylla, and Why</a> : 关于Linux下面文件IO操作的概述性介绍，讲的比较详细，对于系统开发比较深入的同学可以参考下</p>
</li>
<li><p><a href="http://robert.ocallahan.org/2017/10/thoughts-on-microsofts-time-travel.html" target="_blank" rel="external">Thoughts On Microsoft’s Time-Travel Debugger</a> : 对之前TTD工具的分析，其实主要是和Mozilla的<a href="https://github.com/mozilla/rr" target="_blank" rel="external">RR</a>做一些对比分析，后者是linux/macOS系统上面比较好的支持调试回放的工具</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="http://www.averylaird.com/programming/editor/2017/09/30/the-piece-table/" target="_blank" rel="external">Text Editor: Data Structures</a> : 本文探讨一个很有意思的话题，就是用哪种数据结构维护编辑器的内容存储，从普通的array，到<a href="https://www.codeproject.com/Articles/20910/Generic-Gap-Buffer#GapBufferWorks" target="_blank" rel="external">Gap Buffer</a>, 还有<a href="https://en.wikipedia.org/wiki/Piece_table" target="_blank" rel="external">Piece table</a></p>
</li>
<li><p><a href="https://www.blog.google/topics/machine-learning/now-anyone-can-explore-machine-learning-no-coding-required/" target="_blank" rel="external">Now anyone can explore machine learning, no coding required</a> : Google提供的一个可视化机器学习demo，其内部主要依赖<a href="https://deeplearnjs.org/" target="_blank" rel="external">deeplearn.js</a>, “It trains a neural net right in your browser—locally on your device—without sending any images to a server”。 可能不少业务场景都可以试试</p>
</li>
<li><p><a href="http://www.52cs.org/?p=2371" target="_blank" rel="external">大规模机器学习系统中的No Free Lunch</a> : 个人理解更多是一个科普文，让你对机器学习的实践问题有进一步理解和判断</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://eux.baidu.com/blog/2017/08/chrome-%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AB%98%E9%98%B6%E5%8A%9F%E8%83%BD" target="_blank" rel="external">Chrome 调试工具的一些高阶功能</a> : 不少Chrome的小技巧，大家可以关注下</p>
</li>
<li><p><a href="https://github.com/nEXT-Browser/nEXT" target="_blank" rel="external">nEXT - The fastest productivity web-browser</a> : 一个基于Lisp集成的浏览器，支持非常灵活的操作</p>
</li>
<li><p><a href="https://github.com/heathermiller/dist-prog-book" target="_blank" rel="external">Programming Models for Distributed Computation</a> : “Source repo for the book that I and my students in my course at Northeastern University, CS7680 Special Topics in Computing Systems: Programming Models for Distributed Computing, are writing on the topic of programming models for distributed systems.”, demo可以参看<a href="http://dist-prog-book.com/chapter/2/futures.html" target="_blank" rel="external">Futures and Promises</a>, 感觉排版和内容都不错</p>
</li>
<li><p><a href="https://securitytxt.org/#about" target="_blank" rel="external">security.txt</a> : 一个新提议，建议每个网站通过引入<code>security.txt</code>文件，来描述该网站对安全相关的策略以及信息, 有人建议可以参照<a href="https://www.ietf.org/rfc/rfc2142.txt" target="_blank" rel="external">rfc2142.txt</a>, 里面直接有相关的信息和标准，比如定义了<code>security@</code>, <code>abuse@</code>的功能和作用</p>
</li>
<li><p><a href="http://pierrickcalvez.com/journal/a-five-minutes-guide-to-better-typography" target="_blank" rel="external">A Five Minutes Guide to Better Typography</a> : 对于一些排版的基本建议，包括字体选择，大小选择(翻倍)， 行间距(1.2x~1.5x)等</p>
</li>
<li><p><a href="https://googleprojectzero.blogspot.com/2017/10/using-binary-diffing-to-discover.html" target="_blank" rel="external">Using Binary Diffing to Discover Windows Kernel Memory Disclosure Bugs</a> ：本文主要介绍基于<code>binary differing</code>技术用于分析和追踪MS的一些内核错误，没有细看，先mark</p>
</li>
<li><p><a href="https://jcp.org/aboutJava/communityprocess/ec-public/materials/2017-02-14/Java_at_Alibaba.pdf" target="_blank" rel="external">Java at Alibaba</a> : 介绍了Java在阿里巴巴的应用实践, 包括<code>JWarmup</code>, <code>WISP</code> 等, 个人感觉干货还是相对偏少</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/yantai.jpg&quot; alt=&quot;烟台海岸&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.windows.com/windowsexperience/2017/10/05/announcing-microsoft-edge-for-ios-and-android-microsoft-launcher/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Announcing Microsoft Edge for iOS and Android, Microsoft Launcher&lt;/a&gt; : 微软分别给IOS系统和安卓系统发布了对应的&lt;code&gt;Edge&lt;/code&gt;浏览器和&lt;code&gt;Micorsoft Launcher&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cn/blogs/ai/introducing-nnvm-compiler-a-new-open-end-to-end-compiler-for-ai-frameworks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing NNVM Compiler: A New Open End-to-End Compiler for AI Frameworks&lt;/a&gt; : Amazon开源了一个全新的机器学习框架的方案，通过引入&lt;code&gt;NNVM&lt;/code&gt;和&lt;code&gt;TVM&lt;/code&gt;, 前者是类似IR的中间语言，后者是具体的实现，希望以为来提升整体机器学习的性能和工程效率, 可以参看中文的讨论&lt;a href=&quot;https://www.zhihu.com/question/51216952&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何评价陈天奇的模块化深度学习系统NNVM?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/billfeller/billfeller.github.io/issues/121&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using Wireshark to decode packets on HTTP/2 over TLS in Chrome on Window/Mac OS X&lt;/a&gt; : 本文介绍了一个如何用&lt;code&gt;Wireshark&lt;/code&gt;分析TLS包的技巧，整体是思路是由于具体tls沟通的时候肯定是通过对称加密算法沟通的，因此把这个对称密钥打印到日志里面，wireshark就有可能对其包体进行分析&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170930</title>
    <link href="http://shevacjs.com/2017/10/02/20170930/"/>
    <id>http://shevacjs.com/2017/10/02/20170930/</id>
    <published>2017-10-01T16:17:45.000Z</published>
    <updated>2017-10-02T16:17:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/chifeng02.jpg" alt="赤峰阿旗风光2"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html" target="_blank" rel="external">Introducing Abseil, a new common libraries project</a> : Google新开源的C++的基础库, 一些feature包括<code>Efficient support for handling time</code>, <code>primary synchronization type</code>，可以先观望下</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="https://blogs.windows.com/buildingapps/2017/09/27/time-travel-debugging-now-available-windbg-preview/#KBvp1SzF3Jp8HJqm.97" target="_blank" rel="external">Time Travel Debugging is now available in WinDbg Preview</a> :  WinDbg开发支持了<code>TTD</code>功能，所谓的<code>TTD</code>可以理解为”Time Travel Debugging (TTD) is a reverse debugging solution that allows you to record the execution of an app or process, replay it both forwards and backwards and use queries to search through the entire trace.”</p>
</li>
<li><p><a href="https://tomassetti.me/guide-parsing-algorithms-terminology/" target="_blank" rel="external">A Guide to Parsing: Algorithms and Terminology</a> : 对于词法和语法分析，有非常系统的说明和介绍，如果对此不感兴趣，可以主要关注作者推荐的几个工具，包括: <a href="https://tomassetti.me/antlr-mega-tutorial/" target="_blank" rel="external">ANTLR</a>(LL), yacc/bison(LR)</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;mid=2653163252&amp;idx=1&amp;sn=0ec4442ecbed6ed20daaf97909e58f7a" target="_blank" rel="external">搜索基础算法重大突破：20行代码解决20年瓶颈问题</a> : minhash算法的优化，可以大大提升性能，不过对其paper没有进一步分析, 先了解吧</p>
</li>
</ul>
<a id="more"></a>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://machinelearning.apple.com/2017/09/12/handwriting.html" target="_blank" rel="external">Real-Time Recognition of Handwritten Chinese Characters Spanning a Large Inventory of 30,000 Characters</a> : 苹果的关于中文字符的识别优化实践, 没有深看</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;mid=2653163244&amp;idx=2&amp;sn=897ff95d521fdb45fd2609e292a922f1&amp;chksm=8b493382bc3eba9449a768278410234b62a6b60778a0d5e1c58a3f3c5f45b10af534739da5dd&amp;scene=0&amp;key=81c0e1f7847266b3ef8f602bf662fae19fafd48d0090c4032e9b5d77acafbd845378df8ec6f32e40fa69176778fadaca3b52d7d9544177727ab932357a74831cb8c486a02036396d9a852c52fe696682&amp;ascene=0&amp;uin=MTQ2Nzg2MzcyMg%3D%3D" target="_blank" rel="external">LinkedIn计划开源Query Analyzer：不增加开销的MySQL查询分析工具</a> : 设计很小巧，精细，通过增加代理，记录每个SQL的执行时间和负载，用于进一步分析系统的问题；感觉可以直接异步日志抓取分析</p>
</li>
<li><p><a href="http://x-algo.cn/index.php/2016/12/15/ee-problem-and-bandit-algorithm-for-recommender-systems/" target="_blank" rel="external">推荐系统的EE问题及Bandit算法</a> : 关于冷启动/多臂赌博机问题的一个策略–<code>bandit算法</code>, 还可以参考这篇文章<a href="https://zhuanlan.zhihu.com/p/21388070" target="_blank" rel="external">专治选择困难症——bandit算法</a>, 以及<a href="https://zhuanlan.zhihu.com/p/21404922" target="_blank" rel="external">UCB算法升职记——LinUCB算法</a>, 同时Amazon也发表了一篇paper，关于利用这个思路进行多变量选择<a href="https://blog.acolyer.org/2017/09/27/an-efficient-bandit-algorithm-for-real-time-multivariate-optimization/" target="_blank" rel="external">An efficient bandit algorithm for real-time multivariate optimization</a></p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><a href="https://www.hanselman.com/blog/TheBookOfTheRuntimeTheInternalsOfTheNETRuntimeThatYouWontFindInTheDocumentation.aspx" target="_blank" rel="external">The Book of the Runtime - The internals of the .NET Runtime that you won’t find in the documentation</a> : 关于<code>.Net internal</code>的介绍和说明, 先mark，如果可以想利用其jit的机制，迁移lua的相关代码</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/chifeng02.jpg&quot; alt=&quot;赤峰阿旗风光2&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.googleblog.com/2017/09/introducing-abseil-new-common-libraries.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing Abseil, a new common libraries project&lt;/a&gt; : Google新开源的C++的基础库, 一些feature包括&lt;code&gt;Efficient support for handling time&lt;/code&gt;, &lt;code&gt;primary synchronization type&lt;/code&gt;，可以先观望下&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://blogs.windows.com/buildingapps/2017/09/27/time-travel-debugging-now-available-windbg-preview/#KBvp1SzF3Jp8HJqm.97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Time Travel Debugging is now available in WinDbg Preview&lt;/a&gt; :  WinDbg开发支持了&lt;code&gt;TTD&lt;/code&gt;功能，所谓的&lt;code&gt;TTD&lt;/code&gt;可以理解为”Time Travel Debugging (TTD) is a reverse debugging solution that allows you to record the execution of an app or process, replay it both forwards and backwards and use queries to search through the entire trace.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://tomassetti.me/guide-parsing-algorithms-terminology/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Guide to Parsing: Algorithms and Terminology&lt;/a&gt; : 对于词法和语法分析，有非常系统的说明和介绍，如果对此不感兴趣，可以主要关注作者推荐的几个工具，包括: &lt;a href=&quot;https://tomassetti.me/antlr-mega-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ANTLR&lt;/a&gt;(LL), yacc/bison(LR)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;amp;mid=2653163252&amp;amp;idx=1&amp;amp;sn=0ec4442ecbed6ed20daaf97909e58f7a&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搜索基础算法重大突破：20行代码解决20年瓶颈问题&lt;/a&gt; : minhash算法的优化，可以大大提升性能，不过对其paper没有进一步分析, 先了解吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170923</title>
    <link href="http://shevacjs.com/2017/09/28/20170923/"/>
    <id>http://shevacjs.com/2017/09/28/20170923/</id>
    <published>2017-09-28T07:35:45.000Z</published>
    <updated>2017-09-28T07:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/chifeng01.jpg" alt="赤峰阿旗风光"></p>
<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/8bn83425XZWLmRJocSXOUw" target="_blank" rel="external">Apache Struts2 再爆严重安全漏洞</a> : “近日，各大网站都报道了黑客从征信企业 Equifax 窃取了 1.43 亿美国人的详细个人信息，事件相关报导表明 Apache Struts 框架存在安全漏洞”, 应用框架的漏洞，无论是何种语言，对企业的安全都是巨大风险，想到之前的ImageMagick</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm" target="_blank" rel="external">Compiling from C/C++ to WebAssembly</a> : 本文具体介绍了mozilla开放的<code>Emscripten</code> 工具，用于支持将C++编译成webassembly代码，对webassembly感兴趣的可以用这个尝尝鲜</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><a href="https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/" target="_blank" rel="external">Bringing the web up to speed with WebAssembly</a> : 本文相对比较学术的介绍了<code>WebAssembly</code>的理念，设计以及实践上面的诸多考虑的点; 作者提了一些有趣的点，包括”linear memory model”, “not to support jumps” 等, 其实很多虚拟机的设计理念是如何保证<code>safe, fast, and portable semantic</code>, 还是非常值得学习的</li>
</ul>
<a id="more"></a>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="https://mozillagfx.wordpress.com/2017/09/21/introduction-to-webrender-part-1-browsers-today/" target="_blank" rel="external">Introduction to WebRender – Part 1 – Browsers today</a> : 又是Mozilla的文章，本文简单介绍了浏览器渲染的原理和核心机制, 后续应该还有更深入的文章, 继续mark关注</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://martin.zinkevich.org/rules_of_ml/rules_of_ml.pdf" target="_blank" rel="external">Rules of Machine Learning: Best Practices for ML Engineering</a> : 很早的文档，再次mark, </p>
</li>
<li><p><a href="https://medium.com/genymobile/if-appimage-flatpak-and-snap-dont-cut-it-you-can-roll-your-own-6175177d6eef" target="_blank" rel="external">If AppImage, Flatpak and Snap don’t cut it, you can roll your own</a> : 作者自己开发了一个软件安装包, 类似的解决方案还有<a href="http://flatpak.org/" target="_blank" rel="external">flatpak</a>, 后者设计理念比较新颖，可以关注review，评估是否可以作为一个新的分发工具</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/9pxQkGB79XHNC146so1Ebw" target="_blank" rel="external">腾讯主要创办人张志东(Tony)：谈谈互联网产品的老化</a> : 感觉上面都是大道理，但细读起来又感同身受, 业内变化日新月异，我们凡人不进则退</p>
</li>
<li><p><a href="https://qotoqot.com/blog/improving-focus/" target="_blank" rel="external">How I got to 200 productive hours a month</a> : 如果按照20个工作日算的话，一天需要保障10个小时有效工作时间，还是非常难的，方法大家都是知道，里面的一些tool/资料建议大家关注尝试，包括: <a href="https://qotoqot.com/qbserve/" target="_blank" rel="external">Qbserve</a>(收费), <a href="https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji" target="_blank" rel="external">StayFocusd</a>, <a href="https://www.headspace.com/" target="_blank" rel="external">Headspace</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/chifeng01.jpg&quot; alt=&quot;赤峰阿旗风光&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/8bn83425XZWLmRJocSXOUw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Struts2 再爆严重安全漏洞&lt;/a&gt; : “近日，各大网站都报道了黑客从征信企业 Equifax 窃取了 1.43 亿美国人的详细个人信息，事件相关报导表明 Apache Struts 框架存在安全漏洞”, 应用框架的漏洞，无论是何种语言，对企业的安全都是巨大风险，想到之前的ImageMagick&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Compiling from C/C++ to WebAssembly&lt;/a&gt; : 本文具体介绍了mozilla开放的&lt;code&gt;Emscripten&lt;/code&gt; 工具，用于支持将C++编译成webassembly代码，对webassembly感兴趣的可以用这个尝尝鲜&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;每周paper&quot;&gt;&lt;a href=&quot;#每周paper&quot; class=&quot;headerlink&quot; title=&quot;每周paper&quot;&gt;&lt;/a&gt;每周paper&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/09/18/bringing-the-web-up-to-speed-with-webassembly/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bringing the web up to speed with WebAssembly&lt;/a&gt; : 本文相对比较学术的介绍了&lt;code&gt;WebAssembly&lt;/code&gt;的理念，设计以及实践上面的诸多考虑的点; 作者提了一些有趣的点，包括”linear memory model”, “not to support jumps” 等, 其实很多虚拟机的设计理念是如何保证&lt;code&gt;safe, fast, and portable semantic&lt;/code&gt;, 还是非常值得学习的&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>Nginx and Http2 应用篇</title>
    <link href="http://shevacjs.com/2017/09/21/nginx_and_http2_apply/"/>
    <id>http://shevacjs.com/2017/09/21/nginx_and_http2_apply/</id>
    <published>2017-09-21T11:39:07.000Z</published>
    <updated>2017-09-21T11:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/gubeishuizhan.jpg" alt="古北水镇"></p>
<p><a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="external">http2协议</a> 一直被认为是这几年对互联网有着重要影响的新协议，业内对其的支持也是非常迅速和快捷的; 作为一个快速迭代的开源软件nginx，也是保持住对http2的快速支持，从最早的spdy到现在的http2，nginx都是<code>刚为天下先</code>的; 随着相关协议和实现的不断落地，不少大的互联网公司都已经支持http2的访问模式, 比如过google, cloudflare, facebook, 国内的腾讯,天猫也支持了(可以安装<a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en" target="_blank" rel="external">HTTP/2 and SPDY indicator</a>这个chrome插件显示)</p>
<p>这里，要从两个方面的实践去了解https，包括应用篇，具体而已就是通过自己构造client/server, 去了解应用https服务的方方面面；其次是实践篇，重点去分析nginx的代码。 本篇文章主要介绍应用篇的内容</p>
<a id="more"></a>
<h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>我们知道http2协议本身并没有要求底层是否要基于TLS(可选)，但是从实践方面来看，几乎所有的浏览器都只支持基于TLS的http2交互，而nginx相对比友好，两个模式都是<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#listen" target="_blank" rel="external">可以支持</a>的, 所以我们可以分别去验证着两种模式，前者我们可以采用curl命令发送，后者我们直接基于浏览器, server都用nginx服务。 具体而已，拆成如下两个交互场景: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  client                      server(nginx)</div><div class="line"></div><div class="line">+---------+    http2        +------------+</div><div class="line">| curl    +---------------&gt; | without TLS|</div><div class="line">+---------+                 +------------+</div><div class="line"></div><div class="line"></div><div class="line">+---------+    http2        +-------------+</div><div class="line">| Chrome  +----------------&gt;+ With TLS    |</div><div class="line">+---------+                 +-------------+</div></pre></td></tr></table></figure>
<h3 id="用curl发送http2请求"><a href="#用curl发送http2请求" class="headerlink" title="用curl发送http2请求"></a>用curl发送http2请求</h3><p>这个环节server端配置非常方便，不再赘述，具体如下:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## nginx非TLS的http2接入配置demo</span></div><div class="line">   <span class="section">server</span> &#123;</div><div class="line"></div><div class="line">      <span class="attribute">listen</span> <span class="number">8086</span> http2; </div><div class="line">       <span class="attribute">location</span> / &#123;</div><div class="line">           <span class="attribute">content_by_lua</span> <span class="string">'</span></div><div class="line">               ngx.say("I am location in http2")';</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>而curl这边，则就有点小问题，因为大部分的机器默认安装的curl版本都偏低(7.33.0支持带tls的http2/7.49.0支持降级的http2), 可以参照文末的参考文档进行更新, 剩余的问题就是如何发送一个不带TLS的客户端请求, 通过<code>man curl</code> 加上<code>grep http2</code>, 有如下几个说明:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--http2-prior-knowledge</div><div class="line">	  (HTTP)  Tells  curl  to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior</div><div class="line">	  knowledge that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2  the  standard  way</div><div class="line">	  with negotiated protocol version in the TLS handshake.</div><div class="line"></div><div class="line">--http2</div><div class="line">	  (HTTP) Tells curl to use HTTP version 2.</div><div class="line"></div><div class="line">	  See also --no-alpn. --http2 requires that the underlying libcurl was built to support HTTP/2. This option  over-</div><div class="line">	  rides --http1.1 and -0, --http1.0 and --http2-prior-knowledge. Added in 7.33.0.</div></pre></td></tr></table></figure>
<p> 上面的文档可以概述如下:</p>
<ul>
<li>curl可以通过<code>--http2</code>或者<code>--http2-prior-knowledge</code>来发送基于TLS的http2或者明文http2</li>
<li><code>--http2-prior-knowledge</code>说明，curl和nginx交互可以不走<code>HTTP/1.1</code>的<code>Upgrade</code>机制, 这个里面涉及到一个问题，就是一个客户端如何和服务器通过http2开始交互(还是老的端口)，理解上面，需要引入一个协商机制(negotiate), 从<a href="https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header" target="_blank" rel="external">wiki</a>里面介绍的是:<ul>
<li>如果是h2c, 可以急于http/1.1的upgrade机制</li>
<li>如果是h2(tls), 是基于<code>ALPN</code>或者<code>NLN</code>(快废弃)</li>
</ul>
</li>
</ul>
<p>这个里面碰到的问题是，配置的nginx好像不能很好的支持<code>http/1.1 upgrade</code>的协商机制，后续通过源码在分析。如上，最简单的构造http/2协议的方式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">]$ curl --http2-prior-knowledge  &quot;127.0.0.1:8086&quot; -i                                              16:42:29</div><div class="line">HTTP/2 200</div><div class="line">server: openresty/1.11.2.5</div><div class="line">date: Thu, 21 Sep 2017 08:42:45 GMT</div><div class="line">content-type: application/octet-stream</div><div class="line"></div><div class="line">I am location in http2</div></pre></td></tr></table></figure>
<h3 id="利用Chrome发送Http-2请求"><a href="#利用Chrome发送Http-2请求" class="headerlink" title="利用Chrome发送Http/2请求"></a>利用Chrome发送Http/2请求</h3><p>如上所述，由于浏览器只支持安全的http2，所以要验证这个demo，我们需要让我们的站点有相应的证书才可以, 所以这个环境主要关注如下几个topic:</p>
<ul>
<li>本地证书的生成步骤</li>
<li>本地nginx的配置</li>
<li>chrome请求的发送以及验证</li>
</ul>
<p>分别如下:</p>
<h4 id="关于测试证书"><a href="#关于测试证书" class="headerlink" title="关于测试证书"></a>关于测试证书</h4><p>虽然<code>Let&#39;s Encrypt</code>给了我们一个免费生成域名证书的机会，但是灵活性/时效性欠缺, 所以在特定的网络情况下(比如内网, 自己测试使用), 更建议自己生成简单的域名证书, 这样也方便接下来的测试, 因此这里简单介绍下如何通过<code>openssl</code>生成自己的域名证书</p>
<p>先介绍整体的逻辑, 要对生成一个域名证书，从<code>PKI</code>的体系来看，主要需要如下三个步骤(假设要生成<code>example.org</code>的域名证书):</p>
<ol>
<li>网站拥有者先生成自己网站的公钥私钥对(私钥对自己可见) :</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl rsa -in example.org.key -noout -text</div></pre></td></tr></table></figure>
<ol>
<li>构造一个<code>Certificate Signing Request (CSR)</code>, 可以理解为你需要描述好你的需求(给那个域名加证书/用什么算法等), 这样后续CA才能依照此颁发证书, 具体如下:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">### 如上，由于这个是描述需求的，所以这个步骤关于最后证书的能力</div><div class="line">### 配置过程中会有不少可选性</div><div class="line">openssl req -new -key example.org.key -out example.org.csr</div></pre></td></tr></table></figure>
<ol>
<li><p>现在我们需要的是用CA对<code>CSR</code>请求进行授权，但是我们还缺少CA，所以这个步骤是生成自己的CA证书，大家可以理解这个是一次性的(后续给其他的域名颁发证书，不需要重复执行这一步), 具体如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### 生成密钥</div><div class="line">openssl genrsa -out ca.key 2048</div><div class="line">### 生成自签名的CA证书</div><div class="line">openssl req -new -x509 -key ca.key -out ca.crt</div></pre></td></tr></table></figure>
</li>
<li><p>有了如上CA证书, 最后一步就是用CA给CSR进行签名，具体如下:</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -in example.org.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.org.crt</div></pre></td></tr></table></figure>
<p>主要参考文档如下:</p>
<ul>
<li><p><a href="https://gist.github.com/Soarez/9688998" target="_blank" rel="external">How to setup your own CA with OpenSSL</a> : 上面的demo都是来自于这个文档，说的比较详细，包括背后的思路和具体的实践步骤，主要推荐</p>
</li>
<li><p><a href="https://jamielinux.com/docs/openssl-certificate-authority/index.html" target="_blank" rel="external">OpenSSL Certificate Authority</a> : 内容更细一些，但是也是非常系统的介绍, 里面还介绍了<code>intermediate CA</code>的操作方式，有此类需求的可以了解</p>
</li>
<li><p><a href="http://www.cnblogs.com/liyulong1982/p/6106129.html" target="_blank" rel="external">HTTPS证书生成原理和部署细节</a> : 中文文档</p>
</li>
</ul>
<h4 id="nginx配置以及chrome发送"><a href="#nginx配置以及chrome发送" class="headerlink" title="nginx配置以及chrome发送"></a>nginx配置以及chrome发送</h4><p>nginx配置比较简单，完整起见，具体配置贴出如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       8443 ssl http2;</div><div class="line">    server_name  www.shevacjs.com;</div><div class="line"></div><div class="line">    ### 证书</div><div class="line">    ssl_certificate      /xxxx/shevacjs.com.crt;</div><div class="line">    ### 私钥</div><div class="line">    ssl_certificate_key  /xxxx/shevacjs.com.key;</div><div class="line"></div><div class="line">    ssl_session_cache    shared:SSL:1m;</div><div class="line">    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    ssl_prefer_server_ciphers  on;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root   html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>用Chrome发送，选择信任此证书, 即可;如下是一个简单的截图:</p>
<p><img src="/images/http2_demo.png" alt="http2_demo"></p>
<p>对比如果使用非http2网络交互情况如下:</p>
<p><img src="/images/http1_demo.png" alt="http1_demo"></p>
<h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ul>
<li><p>用wireshark抓包的时候, 如果协议不是走标准的端口(比如TLS走8443而不是443), 需要手动去配置,告诉wireshark 8443端口上面的应用协议是TLS(一直以为能自动识别), 具体可以参看<a href="https://ask.wireshark.org/questions/34075/why-wireshark-cannot-display-tlsssl" target="_blank" rel="external">Why wireshark cannot display TLS/SSL</a></p>
</li>
<li><p>Chrome下面<code>DevTools</code>会显示所谓的<code>Connection Id</code>, 可以看到在http2情况下，同一个域名的连接id是一致的, chrome是复用链接的, 同时可以通过<code>chrome://net-internals/#http2</code> 来查看HTTP2的交互情况</p>
</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://simonecarletti.com/blog/2016/01/http2-curl-macosx/" target="_blank" rel="external">Using cURL with HTTP/2 on Mac OS X</a> : 介绍了在macOS下面如何让<code>curl</code>支持发送<code>http2</code>请求, 不过有点坑，如果改方法不行，建议自己手动编译<a href="https://nghttp2.org/blog/2017/08/18/nghttp2-v1-25-0/" target="_blank" rel="external">nghttp2</a>和<a href="https://curl.haxx.se/download.html" target="_blank" rel="external">curl</a></p>
</li>
<li><p><a href="https://imququ.com/post/protocol-negotiation-in-http2.html" target="_blank" rel="external">谈谈HTTP/2的协议协商机制</a> 和 <a href="https://imququ.com/post/enable-alpn-asap.html" target="_blank" rel="external">为什么我们应该尽快支持ALPN</a> : 关于Http协议协商(包括Upgrade, NPN, ALPN)的非常好的介绍和说明</p>
</li>
</ul>
<p>以上，有错漏之处后续再补充</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/gubeishuizhan.jpg&quot; alt=&quot;古北水镇&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http2协议&lt;/a&gt; 一直被认为是这几年对互联网有着重要影响的新协议，业内对其的支持也是非常迅速和快捷的; 作为一个快速迭代的开源软件nginx，也是保持住对http2的快速支持，从最早的spdy到现在的http2，nginx都是&lt;code&gt;刚为天下先&lt;/code&gt;的; 随着相关协议和实现的不断落地，不少大的互联网公司都已经支持http2的访问模式, 比如过google, cloudflare, facebook, 国内的腾讯,天猫也支持了(可以安装&lt;a href=&quot;https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 and SPDY indicator&lt;/a&gt;这个chrome插件显示)&lt;/p&gt;
&lt;p&gt;这里，要从两个方面的实践去了解https，包括应用篇，具体而已就是通过自己构造client/server, 去了解应用https服务的方方面面；其次是实践篇，重点去分析nginx的代码。 本篇文章主要介绍应用篇的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx, http2" scheme="http://shevacjs.com/tags/nginx-http2/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170917</title>
    <link href="http://shevacjs.com/2017/09/18/20170917/"/>
    <id>http://shevacjs.com/2017/09/18/20170917/</id>
    <published>2017-09-18T06:01:45.000Z</published>
    <updated>2017-09-18T06:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><a href="https://blog.mozilla.org/firefox/introducing-firefox-multi-account-containers/" target="_blank" rel="external">Put your multiple personalities in Firefox Multi-Account Containers</a> :  Firefox新开发的<code>Muliti-Account Container</code>功能和机制, 可以使得你在一个浏览器上面拥有多个不同的帐号体系(比如工作/生活/娱乐), 改功能在<a href="https://news.ycombinator.com/item?id=15256603" target="_blank" rel="external">hacker news</a>倍受赞誉</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://jackhiston.com/2017/9/13/making-a-master-puppeteer/" target="_blank" rel="external">Making a Master Puppeteer</a> : 本文是最之前Chrome开放的<code>Puppeteer</code>(Chrome headless模式)的使用介绍和说明, 有助于大家对这个nodelib有个初步了解</p>
</li>
<li><p><a href="https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array" target="_blank" rel="external">Why is it faster to process a sorted array than an unsorted array?</a> : stack overflow上面一个非常高点赞(25K+)的问题, 分析为什么对一个已经排序好数组排序，速度会更快, 其主要原因认为在于排序好的数组在cpu做分支预测的时候会更准确, 上面的demo对于分支预测的解释非常准确, 可以深入了解</p>
</li>
<li><p><a href="https://github.com/agentzh/amazon-polly-batch" target="_blank" rel="external">agentzh: amazon-polly-batch</a> : “Convert large plain text files to MP3 files via Amazon Polly”, 这样你就可以随时随地练练自己的英语听力了。感觉<code>agentzh</code>的确是hacker极致的代表人物, 自己最近做诸多事情，都是偏眼高手低, 心态执行力太差，需要好好反思</p>
</li>
<li><p><a href="http://linuxperf.com/?p=83" target="_blank" rel="external">内核如何检测SOFT LOCKUP与HARD LOCKUP？</a> : 核心是有一个不可屏蔽的<code>NMI Watchdog</code>中断，可以定时检测和侦测</p>
</li>
</ul>
<a id="more"></a>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://blog.jessfraz.com/post/windows-for-linux-nerds/" target="_blank" rel="external">Windows for Linux Nerds</a> : 其实主要介绍了Windows Subsystem for Linux (WSL), 简单阐述了其原理机制以及优缺点(主要是跨系统的文件操作问题), 可以当做一个科普文</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkxMzg1Nw==&amp;mid=2653163012&amp;idx=1&amp;sn=a69a6a439e677ff6e338d266f3c95bc2&amp;chksm=8b49336abc3eba7c05b91d6fdac9eecad89cbc01c76e2d38de3cd7564d3eec0a771f5971cd56#rd" target="_blank" rel="external">后台程序员转算法的参考秘籍：大规模机器学习框架的四重境界</a> : 最近看的感觉不错的中文文档, 对机器学习模型训练的工程化，有着非常清楚的介绍和说明, 也可以加深你自己对参数服务器的理解, 关于<code>Parameter Server</code>还可以参考<a href="http://blog.csdn.net/cyh_24/article/details/50545780" target="_blank" rel="external">Parameter Server 详解</a>, <a href="http://blog.csdn.net/buptgshengod/article/details/46819051" target="_blank" rel="external">MapReduce的替代者-Parameter Server</a> 这两个文章，可以综合起来理解</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://blog.mozilla.org/security/2017/09/13/verified-cryptography-firefox-57/" target="_blank" rel="external">Verified cryptography for Firefox 57</a> : Firefox尝试在其<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Overview" target="_blank" rel="external">NSS</a>引入<a href="https://github.com/mitls/hacl-star" target="_blank" rel="external"> HACL* cryptographic library</a>, 其被认为会有更好的健壮性，整体思路是依赖<a href="https://github.com/FStarLang/FStar" target="_blank" rel="external">Fstar</a> 这种<code>Verification system for effectful programs</code>, <code>F-star/F*</code>这类语言可以关注下</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;mid=2247485394&amp;idx=1&amp;sn=ca2e301eb7ad996384306671205bc90b&amp;chksm=97236510a054ec06c67c7f8fd14eec29c07050746cb00dc3934580a76c8db7e8e98b92db1322&amp;scene=21#wechat_redirect" target="_blank" rel="external">React 的许可协议到底发生了什么问题？</a> : 可以了解之前业内讨论不休的<code>React</code>协议</p>
</li>
<li><p><a href="http://www.developingandstuff.com/2016/01/10-questions-to-make-on-tech-interview.html" target="_blank" rel="external">10 questions to make on a tech interview</a> : 不知道怎么面试的，问问这些问题也是可以的</p>
</li>
<li><p><a href="https://github.com/raymestalez/nulis" target="_blank" rel="external">Nulis: Tree editor for writers</a> : 一个针对作者/作家的编辑器, 支持树型模式的展开式编辑, 对于一些写故事和小说的写着而已，个人感觉是非常有意义的尝试</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/firefox/introducing-firefox-multi-account-containers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Put your multiple personalities in Firefox Multi-Account Containers&lt;/a&gt; :  Firefox新开发的&lt;code&gt;Muliti-Account Container&lt;/code&gt;功能和机制, 可以使得你在一个浏览器上面拥有多个不同的帐号体系(比如工作/生活/娱乐), 改功能在&lt;a href=&quot;https://news.ycombinator.com/item?id=15256603&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hacker news&lt;/a&gt;倍受赞誉&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://jackhiston.com/2017/9/13/making-a-master-puppeteer/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making a Master Puppeteer&lt;/a&gt; : 本文是最之前Chrome开放的&lt;code&gt;Puppeteer&lt;/code&gt;(Chrome headless模式)的使用介绍和说明, 有助于大家对这个nodelib有个初步了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why is it faster to process a sorted array than an unsorted array?&lt;/a&gt; : stack overflow上面一个非常高点赞(25K+)的问题, 分析为什么对一个已经排序好数组排序，速度会更快, 其主要原因认为在于排序好的数组在cpu做分支预测的时候会更准确, 上面的demo对于分支预测的解释非常准确, 可以深入了解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/agentzh/amazon-polly-batch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;agentzh: amazon-polly-batch&lt;/a&gt; : “Convert large plain text files to MP3 files via Amazon Polly”, 这样你就可以随时随地练练自己的英语听力了。感觉&lt;code&gt;agentzh&lt;/code&gt;的确是hacker极致的代表人物, 自己最近做诸多事情，都是偏眼高手低, 心态执行力太差，需要好好反思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://linuxperf.com/?p=83&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;内核如何检测SOFT LOCKUP与HARD LOCKUP？&lt;/a&gt; : 核心是有一个不可屏蔽的&lt;code&gt;NMI Watchdog&lt;/code&gt;中断，可以定时检测和侦测&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170910</title>
    <link href="http://shevacjs.com/2017/09/11/20170910/"/>
    <id>http://shevacjs.com/2017/09/11/20170910/</id>
    <published>2017-09-11T12:59:45.000Z</published>
    <updated>2017-09-11T12:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/?cb=1" target="_blank" rel="external">The Incredible Growth of Python</a> : 由于Machine Learning的不断推广和普及, python这几年变得愈发流行，本文是Stackf overlow的官方分析</p>
</li>
<li><p><a href="https://herbsutter.com/2017/09/06/c17-is-formally-approved/" target="_blank" rel="external">C++17 is formally approved</a> : C++ 17正式通过相关的标准审议, 具体相关的特性可以查看<a href="https://stackoverflow.com/questions/38060436/what-are-the-new-features-in-c17/38060437#38060437" target="_blank" rel="external">What are the new features in C++17?</a>, 感觉自己C++的相关理解还是停留在大学时代, 需要有机会可以去进一步了解实践:)</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/09/Angel-lda-vldb-windows-lightlda" target="_blank" rel="external">基于腾讯Angel的LDA*入选VLDB，超越微软LightLDA</a> : 不错，可惜今年的VLDB会议没有去参加</p>
</li>
</ul>
<a id="more"></a>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://www.jasondavies.com/bloomfilter/" target="_blank" rel="external">Bloom Filters</a> : 本文比较精炼的介绍了Bloom过滤器的实现和设计，还构造了一个可视化的demo展示，还是挺有意思的</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15185416" target="_blank" rel="external">Optimizing web servers for high throughput and low latency</a> : Dropbox的博客文章, 对于系统性能的分析和优化，从底层硬件, 到操作系统栈，到应用层, 都有非常详细的说明和介绍(比如cpu的avx2的支持, kenerl TLS支持等)，建议mark学习</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/09/streaming-Pipeline-kuaishou" target="_blank" rel="external">超百万观众同场看直播秒开不卡顿，快手是如何做到的？|首次披露</a> : 先mark</p>
</li>
<li><p><a href="https://eng.uber.com/michelangelo/" target="_blank" rel="external">MEET MICHELANGELO: UBER’S MACHINE LEARNING PLATFORM</a> : 有点类似公司内部的<code>BML</code>平台, 但是感觉其系统性考虑和整体设计的理念会更全局一些, 值得参考</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="http://www.infoq.com/cn/articles/cloud-data-auditing" target="_blank" rel="external">专注于隐私和安全的云数据审计技术</a> : 先mark</p>
</li>
<li><p><a href="https://varvy.com/pagespeed/" target="_blank" rel="external">Page speed optimization</a> : 不错的页面，可以展现不同网页的pagespeed优化策略, 其方法论值得学习</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://stackoverflow.blog/2017/09/06/incredible-growth-python/?cb=1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;The Incredible Growth of Python&lt;/a&gt; : 由于Machine Learning的不断推广和普及, python这几年变得愈发流行，本文是Stackf overlow的官方分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://herbsutter.com/2017/09/06/c17-is-formally-approved/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C++17 is formally approved&lt;/a&gt; : C++ 17正式通过相关的标准审议, 具体相关的特性可以查看&lt;a href=&quot;https://stackoverflow.com/questions/38060436/what-are-the-new-features-in-c17/38060437#38060437&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the new features in C++17?&lt;/a&gt;, 感觉自己C++的相关理解还是停留在大学时代, 需要有机会可以去进一步了解实践:)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2017/09/Angel-lda-vldb-windows-lightlda&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于腾讯Angel的LDA*入选VLDB，超越微软LightLDA&lt;/a&gt; : 不错，可惜今年的VLDB会议没有去参加&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170903</title>
    <link href="http://shevacjs.com/2017/09/04/20170903/"/>
    <id>http://shevacjs.com/2017/09/04/20170903/</id>
    <published>2017-09-04T07:27:45.000Z</published>
    <updated>2017-09-04T07:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://www.jianshu.com/p/072587b47515" target="_blank" rel="external">一篇文章，教你学会Git</a> : 对Git的概念和核心用法介绍的还是比较清晰的，可以学习下</p>
</li>
<li><p><a href="http://linuxperf.com/?p=184" target="_blank" rel="external">如何诊断SLUB问题</a> : 可以了解linux的内核内存分配的Slab机制</p>
</li>
</ul>
<h2 id="每周paper"><a href="#每周paper" class="headerlink" title="每周paper"></a>每周paper</h2><ul>
<li><a href="https://blog.acolyer.org/2017/08/28/using-chatbots-against-voicespam-analyzing-lennys-effectiveness/" target="_blank" rel="external">Using chatbots against voicespam: analyzing Lenny’s effectiveness</a> :  这篇paper介绍了一种应对电话骚扰的简单而又有效的办法: 通过构建一个对话机器人，该机器人无需进行复杂的语音识别等，只需要通过固定的句式和轮回对话，就能大大拖累攻击者的会话时间，使其攻击成本成倍提升</li>
</ul>
<a id="more"></a>
<ul>
<li><a href="https://blog.acolyer.org/2017/08/24/a-cloud-based-content-gathering-network/" target="_blank" rel="external">A cloud-based content gathering network</a> : 该paper介绍了<br>一个新的概念<code>CGN</code>节点, 有点类似于现在常见的正向代理, 其让用户的访问模式变为<code>Client --(1 RTT)--&gt; CGN --(N RTT)--&gt; Web Service</code>,  同时让CGN节点和web service尽快靠近，这会使得即便有N次RTT，其整体响应时间也会很快; 有点类似于动态的CDN，其实现在很多CDN服务商都在往这个方面走了</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://blog.apnic.net/2016/08/22/ipv6-performance-revisited/" target="_blank" rel="external">IPv6 Performance – Revisited</a> : 作者对比了IPv6和IPv4的性能差异, 总体的结论是 整体上看以RTT为例, IPv6和IPv4差异不是很大, 细化下来，在欧洲北美Ipv6的性能会稍好一些; 但是从连通率来看, Ipv4的连通率是好于IpV6(0.2%失败率 vs 1.6%)</p>
</li>
<li><p><a href="http://brianknapp.me/coding-secrets-that-are-only-learnt-by-experience/" target="_blank" rel="external">Do programmers have some coding secrets that are only learnt by experience?</a> : “There are absolutely 100% for sure coding secrets that are only learned by experience. In fact, and perhaps I shouldn’t tell you this, even if I tell you the secrets you won’t believe them until you experience them.”，需要不断的积累自己的经验, 换个工作环境, 亲自写码, 掌握基础知识，以及注重一些非技术体系方面的知识(管理，领域相关)</p>
</li>
<li><p><a href="http://insights.thoughtworks.cn/build-security-in-pii/" target="_blank" rel="external">Build Security In PII</a> : <code>PII</code>(Personal Identifiable Information)是可以用来标识个体的信息, 考虑到以后个人隐私的重要性, 本文论述了如何系统化的建设PII保护体系, 包括意识的强化, 相关研发流程解决方案的建立等</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://github.com/nikitavoloboev/my-mac-os/" target="_blank" rel="external">My wonderful world of macOS</a> : 列出了一系列MacOS非常有用的工具，可以mark, 个人感觉比较不错的命令行工具包括<a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">tldr</a>, <a href="https://github.com/asciinema/asciinema" target="_blank" rel="external">asciinema</a>, <a href="https://github.com/rgcr/m-cli" target="_blank" rel="external">m-cli</a></p>
</li>
<li><p><a href="https://qgraph.io/blog/deep-learning-surprises/" target="_blank" rel="external">Why Deep Learning Surprises me</a> : 作者认为, Deep Learning打破了他之前”Understanding is something more than computation. Since computers are computation machines, they can never understand anything”的认知</p>
</li>
<li><p><a href="https://github.com/abell123456/AST-/blob/master/README.md?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">AST业界实现收集整理</a> : 一些AST的实现, 先收藏，应该会有用到的地方</p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/29004697" target="_blank" rel="external">在工作中学习</a> : 这个思路自己一直很认同，但是文中提到的一些技巧觉得还可以掌握: “阅读每个pull request”, “不要学习工作之外的编程语言/框架”</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/072587b47515&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一篇文章，教你学会Git&lt;/a&gt; : 对Git的概念和核心用法介绍的还是比较清晰的，可以学习下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://linuxperf.com/?p=184&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何诊断SLUB问题&lt;/a&gt; : 可以了解linux的内核内存分配的Slab机制&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;每周paper&quot;&gt;&lt;a href=&quot;#每周paper&quot; class=&quot;headerlink&quot; title=&quot;每周paper&quot;&gt;&lt;/a&gt;每周paper&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.acolyer.org/2017/08/28/using-chatbots-against-voicespam-analyzing-lennys-effectiveness/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Using chatbots against voicespam: analyzing Lenny’s effectiveness&lt;/a&gt; :  这篇paper介绍了一种应对电话骚扰的简单而又有效的办法: 通过构建一个对话机器人，该机器人无需进行复杂的语音识别等，只需要通过固定的句式和轮回对话，就能大大拖累攻击者的会话时间，使其攻击成本成倍提升&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170827</title>
    <link href="http://shevacjs.com/2017/08/28/20170827/"/>
    <id>http://shevacjs.com/2017/08/28/20170827/</id>
    <published>2017-08-28T04:12:45.000Z</published>
    <updated>2017-08-28T04:12:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://www.android.com/versions/oreo-8-0/" target="_blank" rel="external">Android Oreo</a> : Google发布安卓8.0, 加入一系列新特性, 包括引入支持模块化框架的<a href="https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html" target="_blank" rel="external">Treble</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15068278" target="_blank" rel="external">Initial Hammer2 filesystem implementation</a> : Hammer2 FS是一个类似于<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.3704&amp;rep=rep1&amp;type=pdf" target="_blank" rel="external">ZFS</a>的大型分布式文件系统，支持一系列新特性，可以了解下现在最近文件系统的<a href="https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/vfs/hammer2/DESIGN" target="_blank" rel="external">设计思路和理念</a></p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15090424" target="_blank" rel="external">Introducing App Engine Firewall (googleblog.com)</a> : Google App Engine推出的新功能，支持配置一个服务的防火墙，这样可以避免代码上面做改动</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="https://cppcon2017.sched.com/event/Bgsj/time-travel-debugging-root-causing-bugs-in-commercial-scale-software" target="_blank" rel="external">Time Travel Debugging: Root Causing Bugs in Commercial Scale Software</a> : 微软开发支持了基于<code>Time Travel Debugging</code>的机制，不过具体这个机制还不是很了解，先mark，等到时候具体talk出来再深究</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://ialloc.org/tags.html#nginx-ref" target="_blank" rel="external">nginx源码笔记</a> : 该blog对nginx的实践机制有不少非常深刻的说明，对nginx有兴趣的同学可以多看看</p>
</li>
<li><p><a href="https://medium.freecodecamp.org/why-i-still-use-vim-67afd76b4db6" target="_blank" rel="external">Why I Still Use Vim</a> :  “it’s not because I can’t figure out how to close it”, 和其他的编辑器对比了启动时间，内存消耗等特性，vim还是非常精巧的, 上面也推荐了不少vim相关的资料，可以收藏</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://daily.zhihu.com/story/9583047" target="_blank" rel="external">如何快速成为数据分析师?</a> : </li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://mp.weixin.qq.com/s/TjFzJVOowfceHwJNUItcxQ" target="_blank" rel="external">从语言学到深度学习NLP，一文概述自然语言处理</a> : 下一个阶段的目标，就是了解和学习NLP，先mark</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650997427&amp;idx=1&amp;sn=6dcc5fe91cb26c12a5357b10d7dde318" target="_blank" rel="external">测试已死？我看未必！</a> : 多测试人员的多样化需求</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA==&amp;mid=2247486468&amp;idx=1&amp;sn=b498aed5576470529d8a155846a8eac7&amp;chksm=96cdad49a1ba245f71d75208ca6711d23b9087fa4329ca68f774a763ce1ecfedd0c0cf9c9835&amp;mpshare=1&amp;scene=23&amp;srcid=08180g1CIQtUh5ECs7m6Of7I#rd" target="_blank" rel="external">推荐给程序员的一些书（不止是技术书</a> : mark，里面有一些社会学的书籍可以关注</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15089916" target="_blank" rel="external">Feather: Beautiful open-source icons</a> : 收藏了一些精美的icon图标，可以mark</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15089476" target="_blank" rel="external">Ask HN: What is your all time favorite CS paper?</a> : 必须mark, 上面的那些paper, 最好一篇一篇下载下来认真review</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.android.com/versions/oreo-8-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Oreo&lt;/a&gt; : Google发布安卓8.0, 加入一系列新特性, 包括引入支持模块化框架的&lt;a href=&quot;https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Treble&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15068278&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Initial Hammer2 filesystem implementation&lt;/a&gt; : Hammer2 FS是一个类似于&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.184.3704&amp;amp;rep=rep1&amp;amp;type=pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ZFS&lt;/a&gt;的大型分布式文件系统，支持一系列新特性，可以了解下现在最近文件系统的&lt;a href=&quot;https://gitweb.dragonflybsd.org/dragonfly.git/blob_plain/HEAD:/sys/vfs/hammer2/DESIGN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计思路和理念&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15090424&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing App Engine Firewall (googleblog.com)&lt;/a&gt; : Google App Engine推出的新功能，支持配置一个服务的防火墙，这样可以避免代码上面做改动&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cppcon2017.sched.com/event/Bgsj/time-travel-debugging-root-causing-bugs-in-commercial-scale-software&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Time Travel Debugging: Root Causing Bugs in Commercial Scale Software&lt;/a&gt; : 微软开发支持了基于&lt;code&gt;Time Travel Debugging&lt;/code&gt;的机制，不过具体这个机制还不是很了解，先mark，等到时候具体talk出来再深究&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170820</title>
    <link href="http://shevacjs.com/2017/08/22/20170820/"/>
    <id>http://shevacjs.com/2017/08/22/20170820/</id>
    <published>2017-08-22T03:28:45.000Z</published>
    <updated>2017-08-22T03:31:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://news.ycombinator.com/item?id=15012882" target="_blank" rel="external">64-bit Firefox is the new default on 64-bit Windows</a> : FireFox在windows系统的默认版本将会是64位的程序，Hacker News很有意义，主要讨论了两个点: 1) 迁移64位的困难之处: 主要是扩展(比如Flash)的兼容; 2)迁移64位对crash的影响，由于用于更多的虚拟内存，已经可以更好的分配连续比较大的地址空间, 对JIT之类更为友好</p>
</li>
<li><p><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">Puppeteer</a> : “Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome”, 个人觉得对一些浏览器上面的自动化工作(比如抓取, 性能分析)都是有非常大的裨益</p>
</li>
<li><p><a href="https://research.googleblog.com/2017/08/making-visible-watermarks-more-effective.html" target="_blank" rel="external">Making Visible Watermarks More Effective</a> : 还是Google的研究成果，通过对聚类水印图片的学习，可以更高效的去除图片里面的水印，具体如何实现可以进一步了解, 先mark</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2017/08/Memsniff-Memcached" target="_blank" rel="external">Memsniff：一个健壮的Memcached流量分析工具</a> : 思路是通过分析网络包(tcpdump产出等)，来对memcached进行相关的分析, 有时候应该有用</li>
</ul>
<a id="more"></a>
<ul>
<li><p><a href="http://h14s.p5r.org/2012/09/0x5f3759df.html" target="_blank" rel="external">0x5f3759df</a> : “This post is about the magic constant 0x5f3759df and an extremely neat hack, fast inverse square root, which is where the constant comes from.”, mark</p>
</li>
<li><p><a href="http://io.upyun.com/2017/08/19/nginx-signals/" target="_blank" rel="external">谈谈 nginx 信号集</a> : 关于nginx信号的一些细节，梳理的很清楚，可以加深理解</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><a href="http://www.infoq.com/cn/news/2017/08/Spark-on-Angel-swift" target="_blank" rel="external">Spark on Angel：Spark机器学习的核心加速器</a> : 本文具体介绍了腾讯<a href="https://github.com/Tencent/angel" target="_blank" rel="external">Angle</a> 参数服务器如何和spark有效结合的策略, 对于机器学习工程架构有兴趣的可以好好看下</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471" target="_blank" rel="external">Machine Learning is Fun!</a> : “The world’s easiest introduction to Machine Learning”，也有<a href="https://zhuanlan.zhihu.com/p/24339995" target="_blank" rel="external">中文版</a>, 先mark</p>
</li>
<li><p><a href="http://www.infoq.com/cn/minibooks/profile-in-practice?utm_campaign=rightbar_v2&amp;utm_source=infoq&amp;utm_medium=minibooks_link&amp;utm_content=link_text" target="_blank" rel="external">架构师特刊：用户画像实践</a> : Infoq<a href="http://www.infoq.com/cn/minibooks?utm_source=infoq&amp;utm_medium=breadcrumbs_feature&amp;utm_campaign=breadcrumbs" target="_blank" rel="external">架构师特刊</a>里面的系列专刊，专门介绍用户画像的实践，有不少干货</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=15012882&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Firefox is the new default on 64-bit Windows&lt;/a&gt; : FireFox在windows系统的默认版本将会是64位的程序，Hacker News很有意义，主要讨论了两个点: 1) 迁移64位的困难之处: 主要是扩展(比如Flash)的兼容; 2)迁移64位对crash的影响，由于用于更多的虚拟内存，已经可以更好的分配连续比较大的地址空间, 对JIT之类更为友好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Puppeteer&lt;/a&gt; : “Puppeteer is a Node library which provides a high-level API to control headless Chrome over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome”, 个人觉得对一些浏览器上面的自动化工作(比如抓取, 性能分析)都是有非常大的裨益&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://research.googleblog.com/2017/08/making-visible-watermarks-more-effective.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making Visible Watermarks More Effective&lt;/a&gt; : 还是Google的研究成果，通过对聚类水印图片的学习，可以更高效的去除图片里面的水印，具体如何实现可以进一步了解, 先mark&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;工具技巧&quot;&gt;&lt;a href=&quot;#工具技巧&quot; class=&quot;headerlink&quot; title=&quot;工具技巧&quot;&gt;&lt;/a&gt;工具技巧&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/news/2017/08/Memsniff-Memcached&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memsniff：一个健壮的Memcached流量分析工具&lt;/a&gt; : 思路是通过分析网络包(tcpdump产出等)，来对memcached进行相关的分析, 有时候应该有用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
  <entry>
    <title>weekly of 20170813</title>
    <link href="http://shevacjs.com/2017/08/14/20170813/"/>
    <id>http://shevacjs.com/2017/08/14/20170813/</id>
    <published>2017-08-14T11:51:00.000Z</published>
    <updated>2017-08-14T11:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新鲜事"><a href="#新鲜事" class="headerlink" title="新鲜事"></a>新鲜事</h2><ul>
<li><p><a href="https://medium.com/@andrewng/deeplearning-ai-announcing-new-deep-learning-courses-on-coursera-43af0a368116" target="_blank" rel="external">Deeplearning.ai: Announcing new Deep Learning courses on Coursera</a> : Ng的新的关于Deep Learning的AI课程将会在courses发布，有兴趣的同学可以关注</p>
</li>
<li><p><a href="http://nginx.org/en/CHANGES" target="_blank" rel="external">nginx 1.13.4 </a> : Nginx退出1.13.4版本, 支持<a href="http://nginx.org/en/docs/http/ngx_http_mirror_module.html" target="_blank" rel="external">mirror module</a>，感觉有不少应用场景，可以关注下</p>
</li>
<li><p><a href="http://www.infoq.com/cn/news/2017/08/deeplearn-js-Browser-machine-int" target="_blank" rel="external">deeplearn.js：浏览器端机器智能框架</a> : “deeplearn.js最初由Google Brain PAIR开发，是一款基于硬件加速的开源JavaScript库，可被用在机器智能领域”</p>
</li>
</ul>
<h2 id="工具技巧"><a href="#工具技巧" class="headerlink" title="工具技巧"></a>工具技巧</h2><ul>
<li><p><a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" target="_blank" rel="external">Linux Load Averages: Solving the Mystery</a> : 对<code>load average</code> 有非常系统的阐述和说明, 可以加深对其的认识和理解, mark</p>
</li>
<li><p><a href="https://tools.ietf.org/id/draft-nottingham-thanks-larry-00.html#RFC2324" target="_blank" rel="external">Reserving the 418 HTTP Status Code</a> : 现在才知道还有418这个奇葩的状态码，含义是:”I’m a teapot’”</p>
</li>
</ul>
<h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ul>
<li><p><a href="https://medium.com/netflix-techblog/starting-the-avalanche-640e69b14a06" target="_blank" rel="external">Starting the Avalanche</a> : Netflix关于发现和防止系统雪崩的设计, 最后一段的总结还是有不少干货</p>
</li>
<li><p><a href="http://www.infoq.com/cn/presentations/practice-of-wechat-advertising-engine-and-rhythm-algorithm?utm_source=infoq&amp;utm_medium=videos_homepage&amp;utm_campaign=videos_row2" target="_blank" rel="external">微信广告引擎与播放节奏算法实践</a> : 微信的广告算法实践，相比于百度等公司，其策略里面会更多引入社交相关的信息，另外整个PPT做的非常好看，值得收藏</p>
</li>
<li><p><a href="https://news.ycombinator.com/item?id=15005031" target="_blank" rel="external">An Intro to Compilers</a> : 对编译器很简洁但很系统的介绍，另外hacker news上面的讨论有不少干货和资料，可以关注，mark</p>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/28418760" target="_blank" rel="external">机器学习领域值得关注的 10 位 Quora 大咖</a> : 感觉不错，里面的一些相关问题的推荐可以都好好读一遍</p>
</li>
<li><p><a href="https://github.com/vahidk/EffectiveTensorflow?" target="_blank" rel="external">Effective Tensorflow</a> : Tensorflow的教程，这几周需要抽时间开始系统学习了</p>
</li>
<li><p><a href="https://www.thomas-krenn.com/de/wikiDE/images/e/e0/Linux-storage-stack-diagram_v4.10.png" target="_blank" rel="external">Linux Storage Stack Diagram</a> : 图花的很好，可以收藏</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新鲜事&quot;&gt;&lt;a href=&quot;#新鲜事&quot; class=&quot;headerlink&quot; title=&quot;新鲜事&quot;&gt;&lt;/a&gt;新鲜事&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/@andrewng/deeplearning-ai-ann
    
    </summary>
    
    
      <category term="weekly" scheme="http://shevacjs.com/tags/weekly/"/>
    
  </entry>
  
</feed>
